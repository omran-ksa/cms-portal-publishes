{"version":3,"file":"index.js","sources":["../../../src/packages/rte/components/rte-base.element.ts"],"sourcesContent":["import type { UmbPropertyEditorRteValueType } from '../types.js';\r\nimport { UMB_BLOCK_RTE_PROPERTY_EDITOR_SCHEMA_ALIAS } from '../constants.js';\r\nimport { property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { observeMultiple } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbBlockRteEntriesContext, UmbBlockRteManagerContext } from '@umbraco-cms/backoffice/block-rte';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UMB_PROPERTY_CONTEXT, UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport type { UmbBlockRteTypeModel } from '@umbraco-cms/backoffice/block-rte';\r\nimport type {\r\n\tUmbPropertyEditorUiElement,\r\n\tUmbPropertyEditorConfigCollection,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport {\r\n\tUMB_VALIDATION_EMPTY_LOCALIZATION_KEY,\r\n\tUmbFormControlMixin,\r\n\tUmbValidationContext,\r\n} from '@umbraco-cms/backoffice/validation';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { UMB_CONTENT_WORKSPACE_CONTEXT } from '@umbraco-cms/backoffice/content';\r\n\r\nexport abstract class UmbPropertyEditorUiRteElementBase\r\n\textends UmbFormControlMixin<UmbPropertyEditorRteValueType | undefined, typeof UmbLitElement, undefined>(UmbLitElement)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\r\n\t\tthis._config = config;\r\n\r\n\t\tconst blocks = config.getValueByAlias<Array<UmbBlockRteTypeModel>>('blocks') ?? [];\r\n\t\tthis.#managerContext.setBlockTypes(blocks);\r\n\r\n\t\tthis.#managerContext.setEditorConfiguration(config);\r\n\t}\r\n\r\n\t@property({\r\n\t\tattribute: false,\r\n\t\ttype: Object,\r\n\t\thasChanged(value?: UmbPropertyEditorRteValueType, oldValue?: UmbPropertyEditorRteValueType) {\r\n\t\t\treturn value?.markup !== oldValue?.markup;\r\n\t\t},\r\n\t})\r\n\tpublic override set value(value: UmbPropertyEditorRteValueType | undefined) {\r\n\t\tif (!value) {\r\n\t\t\tsuper.value = undefined;\r\n\t\t\tthis._markup = '';\r\n\t\t\tthis.#managerContext.setLayouts([]);\r\n\t\t\tthis.#managerContext.setContents([]);\r\n\t\t\tthis.#managerContext.setSettings([]);\r\n\t\t\tthis.#managerContext.setExposes([]);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst buildUpValue: Partial<UmbPropertyEditorRteValueType> = value ? { ...value } : {};\r\n\t\tbuildUpValue.markup ??= '';\r\n\t\tif (buildUpValue.blocks) {\r\n\t\t\tbuildUpValue.blocks = { ...buildUpValue.blocks };\r\n\t\t} else {\r\n\t\t\tbuildUpValue.blocks ??= { layout: {}, contentData: [], settingsData: [], expose: [] };\r\n\t\t}\r\n\t\tbuildUpValue.blocks.layout ??= {};\r\n\t\tbuildUpValue.blocks.contentData ??= [];\r\n\t\tbuildUpValue.blocks.settingsData ??= [];\r\n\t\tbuildUpValue.blocks.expose ??= [];\r\n\t\tsuper.value = buildUpValue as UmbPropertyEditorRteValueType;\r\n\r\n\t\t// Only update the actual editor markup if it is not the same as the value.\r\n\t\tif (this._markup !== super.value.markup) {\r\n\t\t\tthis._markup = super.value.markup;\r\n\t\t}\r\n\r\n\t\tthis.#managerContext.setLayouts(buildUpValue.blocks.layout[UMB_BLOCK_RTE_PROPERTY_EDITOR_SCHEMA_ALIAS] ?? []);\r\n\t\tthis.#managerContext.setContents(buildUpValue.blocks.contentData);\r\n\t\tthis.#managerContext.setSettings(buildUpValue.blocks.settingsData);\r\n\t\tthis.#managerContext.setExposes(buildUpValue.blocks.expose);\r\n\t}\r\n\tpublic override get value(): UmbPropertyEditorRteValueType | undefined {\r\n\t\treturn super.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly = false;\r\n\r\n\t@property({ type: Boolean })\r\n\tmandatory?: boolean;\r\n\r\n\t@property({ type: String })\r\n\tmandatoryMessage?: string | undefined;\r\n\r\n\t@state()\r\n\tprotected _config?: UmbPropertyEditorConfigCollection;\r\n\r\n\t/**\r\n\t * @deprecated _value is depreacated, use `super.value` instead.\r\n\t */\r\n\t@state()\r\n\tprotected get _value(): UmbPropertyEditorRteValueType | undefined {\r\n\t\treturn super.value;\r\n\t}\r\n\tprotected set _value(value: UmbPropertyEditorRteValueType | undefined) {\r\n\t\tsuper.value = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Separate state for markup, to avoid re-rendering/re-setting the value of the Tiptap editor when the value does not really change.\r\n\t */\r\n\t@state()\r\n\tprotected _markup = '';\r\n\r\n\treadonly #managerContext = new UmbBlockRteManagerContext(this);\r\n\treadonly #entriesContext = new UmbBlockRteEntriesContext(this);\r\n\r\n\treadonly #validationContext = new UmbValidationContext(this);\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_CONTENT_WORKSPACE_CONTEXT, (context) => {\r\n\t\t\tif (context) {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tobserveMultiple([\r\n\t\t\t\t\t\tthis.#managerContext.blockTypes,\r\n\t\t\t\t\t\tcontext.structure.variesByCulture,\r\n\t\t\t\t\t\tcontext.structure.variesBySegment,\r\n\t\t\t\t\t]),\r\n\t\t\t\t\tasync ([blockTypes, variesByCulture, variesBySegment]) => {\r\n\t\t\t\t\t\tif (blockTypes.length > 0 && (variesByCulture === false || variesBySegment === false)) {\r\n\t\t\t\t\t\t\t// check if any of the Blocks varyByCulture or Segment and then display a warning.\r\n\t\t\t\t\t\t\tconst promises = await Promise.all(\r\n\t\t\t\t\t\t\t\tblockTypes.map(async (blockType) => {\r\n\t\t\t\t\t\t\t\t\tconst elementType = blockType.contentElementTypeKey;\r\n\t\t\t\t\t\t\t\t\tawait this.#managerContext.contentTypesLoaded;\r\n\t\t\t\t\t\t\t\t\tconst structure = await this.#managerContext.getStructure(elementType);\r\n\t\t\t\t\t\t\t\t\tif (variesByCulture === false && structure?.getVariesByCulture() === true) {\r\n\t\t\t\t\t\t\t\t\t\t// If block varies by culture but document does not.\r\n\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t} else if (variesBySegment === false && structure?.getVariesBySegment() === true) {\r\n\t\t\t\t\t\t\t\t\t\t// If block varies by segment but document does not.\r\n\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tconst notSupportedVariantSetting = promises.filter((x) => x === true).length > 0;\r\n\r\n\t\t\t\t\t\t\tif (notSupportedVariantSetting) {\r\n\t\t\t\t\t\t\t\tthis.setCustomValidity('#blockEditor_blockVariantConfigurationNotSupported');\r\n\t\t\t\t\t\t\t\tthis.checkValidity();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'blockTypeConfigurationCheck',\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.removeUmbControllerByAlias('blockTypeConfigurationCheck');\r\n\t\t\t}\r\n\t\t}).passContextAliasMatches();\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\r\n\t\t\tthis.#gotPropertyContext(context);\r\n\t\t});\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, (context) => {\r\n\t\t\tthis.#managerContext.setVariantId(context?.getVariantId());\r\n\t\t});\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#entriesContext.layoutEntries,\r\n\t\t\t(layouts) => {\r\n\t\t\t\t// Update manager:\r\n\t\t\t\tthis.#managerContext.setLayouts(layouts);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.addValidator(\r\n\t\t\t'valueMissing',\r\n\t\t\t() => this.mandatoryMessage ?? UMB_VALIDATION_EMPTY_LOCALIZATION_KEY,\r\n\t\t\t() => !!this.mandatory && this.value === undefined,\r\n\t\t);\r\n\t}\r\n\r\n\t#gotPropertyContext(context: typeof UMB_PROPERTY_CONTEXT.TYPE | undefined) {\r\n\t\tthis.observe(\r\n\t\t\tcontext?.dataPath,\r\n\t\t\t(dataPath) => {\r\n\t\t\t\tif (dataPath) {\r\n\t\t\t\t\t// Set the data path for the local validation context:\r\n\t\t\t\t\tthis.#validationContext.setDataPath(dataPath + '.blocks');\r\n\t\t\t\t\tthis.#validationContext.autoReport();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeDataPath',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tcontext?.alias,\r\n\t\t\t(alias) => {\r\n\t\t\t\tthis.#managerContext.setPropertyAlias(alias);\r\n\t\t\t},\r\n\t\t\t'observePropertyAlias',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([\r\n\t\t\t\tthis.#managerContext.layouts,\r\n\t\t\t\tthis.#managerContext.contents,\r\n\t\t\t\tthis.#managerContext.settings,\r\n\t\t\t\tthis.#managerContext.exposes,\r\n\t\t\t]),\r\n\t\t\t([layouts, contents, settings, exposes]) => {\r\n\t\t\t\tif (layouts.length === 0) {\r\n\t\t\t\t\tif (super.value?.markup === undefined) {\r\n\t\t\t\t\t\tsuper.value = undefined;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsuper.value = {\r\n\t\t\t\t\t\t\t...super.value,\r\n\t\t\t\t\t\t\tblocks: {\r\n\t\t\t\t\t\t\t\tlayout: {},\r\n\t\t\t\t\t\t\t\tcontentData: [],\r\n\t\t\t\t\t\t\t\tsettingsData: [],\r\n\t\t\t\t\t\t\t\texpose: [],\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsuper.value = {\r\n\t\t\t\t\t\tmarkup: this._markup,\r\n\t\t\t\t\t\tblocks: {\r\n\t\t\t\t\t\t\tlayout: { [UMB_BLOCK_RTE_PROPERTY_EDITOR_SCHEMA_ALIAS]: layouts },\r\n\t\t\t\t\t\t\tcontentData: contents,\r\n\t\t\t\t\t\t\tsettingsData: settings,\r\n\t\t\t\t\t\t\texpose: exposes,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we don't have a value set from the outside or an internal value, we don't want to set the value.\r\n\t\t\t\t// This is added to prevent the block list from setting an empty value on startup.\r\n\t\t\t\tif (super.value?.markup === undefined) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontext?.setValue(super.value);\r\n\t\t\t},\r\n\t\t\t'blockManagerObserver',\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _filterUnusedBlocks(usedContentKeys: (string | null)[]) {\r\n\t\tconst unusedLayouts = this.#managerContext.getLayouts().filter((x) => usedContentKeys.indexOf(x.contentKey) === -1);\r\n\r\n\t\tconst unusedContentKeys = unusedLayouts.map((x) => x.contentKey);\r\n\r\n\t\tconst unusedSettingsKeys = unusedLayouts\r\n\t\t\t.map((x) => x.settingsKey)\r\n\t\t\t.filter((x) => typeof x === 'string') as Array<string>;\r\n\r\n\t\tthis.#managerContext.removeManyContent(unusedContentKeys);\r\n\t\tthis.#managerContext.removeManySettings(unusedSettingsKeys);\r\n\t\tthis.#managerContext.removeManyLayouts(unusedContentKeys);\r\n\t}\r\n\r\n\tprotected _fireChangeEvent() {\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n}\r\n"],"names":["UmbPropertyEditorUiRteElementBase","UmbFormControlMixin","UmbLitElement","#managerContext","UmbBlockRteManagerContext","#entriesContext","UmbBlockRteEntriesContext","#validationContext","UmbValidationContext","UMB_CONTENT_WORKSPACE_CONTEXT","context","observeMultiple","blockTypes","variesByCulture","variesBySegment","blockType","elementType","structure","x","UMB_PROPERTY_CONTEXT","#gotPropertyContext","UMB_PROPERTY_DATASET_CONTEXT","layouts","UMB_VALIDATION_EMPTY_LOCALIZATION_KEY","config","blocks","value","buildUpValue","UMB_BLOCK_RTE_PROPERTY_EDITOR_SCHEMA_ALIAS","dataPath","alias","contents","settings","exposes","usedContentKeys","unusedLayouts","unusedContentKeys","unusedSettingsKeys","UmbChangeEvent","__decorateClass","property","oldValue","state"],"mappings":"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"}