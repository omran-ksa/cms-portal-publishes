{"version":3,"file":"sysinfo.repository-CwDFQXFc.js","sources":["../../../src/packages/sysinfo/repository/sysinfo.repository.ts"],"sourcesContent":["import packageJson from '../../../../package.json';\r\nimport type { UmbServerUpgradeCheck } from '../types.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport { ServerService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UMB_SERVER_CONTEXT } from '@umbraco-cms/backoffice/server';\r\n\r\nexport class UmbSysinfoRepository extends UmbRepositoryBase {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, 'Umb.Repository.Sysinfo');\r\n\t}\r\n\r\n\tasync requestTroubleShooting() {\r\n\t\tconst { data } = await tryExecute(this, ServerService.getServerTroubleshooting(), { disableNotifications: true });\r\n\t\treturn data;\r\n\t}\r\n\r\n\tasync requestServerInformation() {\r\n\t\tconst { data } = await tryExecute(this, ServerService.getServerInformation(), { disableNotifications: true });\r\n\t\treturn data;\r\n\t}\r\n\r\n\tasync requestClientInformation() {\r\n\t\tconst { version } = packageJson;\r\n\t\tconst clientInformation = {\r\n\t\t\tversion,\r\n\t\t};\r\n\t\treturn clientInformation;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the server has an upgrade available and return the result.\r\n\t * If the server has an upgrade available, the result will be stored in local storage.\r\n\t * If the server does not have an upgrade available, the result will be stored in local storage as well.\r\n\t * @param {string} currentVersion The current version of the server.\r\n\t * @returns {Promise<UmbServerUpgradeCheck | null>} The server upgrade check result or null if the check is not allowed or if the check failed.\r\n\t */\r\n\tasync serverUpgradeCheck(currentVersion: string): Promise<UmbServerUpgradeCheck | null> {\r\n\t\t// Check if we are allowed to check again\r\n\t\tconst serverContext = await this.getContext(UMB_SERVER_CONTEXT);\r\n\t\tif (!serverContext) {\r\n\t\t\tthrow new Error('Could not get the server context.');\r\n\t\t}\r\n\t\t// TODO: Provide a get method, so we do not need to observe in this case:\r\n\t\tconst versionCheckPeriod = await this.observe(serverContext.getServerConnection().versionCheckPeriod).asPromise();\r\n\r\n\t\tif (versionCheckPeriod <= 0) {\r\n\t\t\t// We do not need to check the server for an upgrade\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst lastUpgradeCheck = this.#getStoredServerUpgradeCheck(currentVersion);\r\n\r\n\t\t// If we have a stored check, then return it if it is still valid\r\n\t\tif (lastUpgradeCheck !== null) {\r\n\t\t\t// If we have a stored check, then check if we should check again based on the period\r\n\t\t\tif (lastUpgradeCheck.createdAt) {\r\n\t\t\t\tconst lastCheckDate = new Date(lastUpgradeCheck.createdAt);\r\n\t\t\t\tconst diff = new Date().getTime() - lastCheckDate.getTime();\r\n\t\t\t\tconst diffDays = diff / (1000 * 3600 * 24);\r\n\r\n\t\t\t\tif (diffDays < versionCheckPeriod) {\r\n\t\t\t\t\t// If we should not check, then return what we have stored if it is still valid\r\n\t\t\t\t\tif (lastUpgradeCheck.type.toLowerCase() !== 'none') {\r\n\t\t\t\t\t\treturn lastUpgradeCheck;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null; // no upgrade available\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check the server for an upgrade because we have no stored check or the stored check is invalid\r\n\t\treturn this.#fetchServerUpgradeCheck(versionCheckPeriod, currentVersion);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the stored server upgrade check if it is still valid, otherwise return null and remove the stored check.\r\n\t * @param {string} currentVersion The current version of the server.\r\n\t * @returns {UmbServerUpgradeCheck | null} The stored server upgrade check or null if it is not valid.\r\n\t */\r\n\t#getStoredServerUpgradeCheck(currentVersion: string): UmbServerUpgradeCheck | null {\r\n\t\tconst storedCheck = localStorage.getItem('umb:serverUpgradeCheck');\r\n\t\tif (!storedCheck) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst upgradeCheck: UmbServerUpgradeCheck = JSON.parse(storedCheck);\r\n\r\n\t\t// Check that the stored check is for the same version\r\n\t\tif (upgradeCheck.version !== currentVersion) {\r\n\t\t\tlocalStorage.removeItem('umb:serverUpgradeCheck');\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Check that the stored check is not older than the last check\r\n\t\tif (upgradeCheck.createdAt) {\r\n\t\t\tconst createdAt = new Date(upgradeCheck.createdAt);\r\n\t\t\tconst expiresAt = new Date(upgradeCheck.expires);\r\n\t\t\tif (expiresAt.getTime() <= createdAt.getTime()) {\r\n\t\t\t\tlocalStorage.removeItem('umb:serverUpgradeCheck');\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn upgradeCheck;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the server upgrade check from the server and store the result in local storage.\r\n\t * @param {number} versionCheckPeriod A period in days to wait before checking the server again.\r\n\t * @param {string} currentVersion The current version of the server.\r\n\t * @returns {Promise<UmbServerUpgradeCheck | null>} The server upgrade check result or null if the check failed.\r\n\t */\r\n\tasync #fetchServerUpgradeCheck(\r\n\t\tversionCheckPeriod: number,\r\n\t\tcurrentVersion: string,\r\n\t): Promise<UmbServerUpgradeCheck | null> {\r\n\t\t// Check the server for an upgrade because we have no stored check or the stored check is invalid\r\n\t\tconst { data } = await tryExecute(this, ServerService.getServerUpgradeCheck(), { disableNotifications: true });\r\n\r\n\t\tif (data) {\r\n\t\t\t// Save the last check date including the data received\r\n\t\t\tconst expiresAt = new Date();\r\n\t\t\texpiresAt.setDate(expiresAt.getDate() + versionCheckPeriod);\r\n\t\t\tconst upgradeCheck = {\r\n\t\t\t\t...data,\r\n\t\t\t\texpires: expiresAt.toISOString(),\r\n\t\t\t\tversion: currentVersion,\r\n\t\t\t\tcreatedAt: new Date().toISOString(),\r\n\t\t\t} satisfies UmbServerUpgradeCheck;\r\n\t\t\tlocalStorage.setItem('umb:serverUpgradeCheck', JSON.stringify(upgradeCheck));\r\n\r\n\t\t\t// Only return if we have a valid type\r\n\t\t\tif (data.type.toLowerCase() !== 'none') {\r\n\t\t\t\treturn upgradeCheck;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null; // no upgrade available\r\n\t}\r\n}\r\n"],"names":["UmbSysinfoRepository","UmbRepositoryBase","host","data","tryExecute","ServerService","version","packageJson","currentVersion","serverContext","UMB_SERVER_CONTEXT","versionCheckPeriod","lastUpgradeCheck","#getStoredServerUpgradeCheck","lastCheckDate","#fetchServerUpgradeCheck","storedCheck","upgradeCheck","createdAt","expiresAt"],"mappings":";;;;;;;AAQO,MAAMA,UAA6BC,EAAkB;AAAA,EAC3D,YAAYC,GAAyB;AACpC,UAAMA,GAAM,wBAAwB;AAAA,EAAA;AAAA,EAGrC,MAAM,yBAAyB;AAC9B,UAAM,EAAE,MAAAC,EAAA,IAAS,MAAMC,EAAW,MAAMC,EAAc,4BAA4B,EAAE,sBAAsB,IAAM;AACzG,WAAAF;AAAA,EAAA;AAAA,EAGR,MAAM,2BAA2B;AAChC,UAAM,EAAE,MAAAA,EAAA,IAAS,MAAMC,EAAW,MAAMC,EAAc,wBAAwB,EAAE,sBAAsB,IAAM;AACrG,WAAAF;AAAA,EAAA;AAAA,EAGR,MAAM,2BAA2B;AAC1B,UAAA,EAAE,SAAAG,MAAYC;AAIb,WAHmB;AAAA,MACzB,SAAAD;AAAA,IACD;AAAA,EACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUR,MAAM,mBAAmBE,GAA+D;AAEvF,UAAMC,IAAgB,MAAM,KAAK,WAAWC,CAAkB;AAC9D,QAAI,CAACD;AACE,YAAA,IAAI,MAAM,mCAAmC;AAG9C,UAAAE,IAAqB,MAAM,KAAK,QAAQF,EAAc,oBAAoB,EAAE,kBAAkB,EAAE,UAAU;AAEhH,QAAIE,KAAsB;AAElB,aAAA;AAGF,UAAAC,IAAmB,KAAKC,GAA6BL,CAAc;AAGzE,QAAII,MAAqB,QAEpBA,EAAiB,WAAW;AAC/B,YAAME,IAAgB,IAAI,KAAKF,EAAiB,SAAS;AAIzD,YAHiB,oBAAA,KAAA,GAAO,QAAQ,IAAIE,EAAc,QAAQ,MACjC,MAAO,OAAO,MAExBH;AAEd,eAAIC,EAAiB,KAAK,YAAY,MAAM,SACpCA,IAED;AAAA,IACR;AAKK,WAAA,KAAKG,GAAyBJ,GAAoBH,CAAc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQxEK,GAA6BL,GAAsD;AAC5E,UAAAQ,IAAc,aAAa,QAAQ,wBAAwB;AACjE,QAAI,CAACA;AACG,aAAA;AAGF,UAAAC,IAAsC,KAAK,MAAMD,CAAW;AAG9D,QAAAC,EAAa,YAAYT;AAC5B,0BAAa,WAAW,wBAAwB,GACzC;AAIR,QAAIS,EAAa,WAAW;AAC3B,YAAMC,IAAY,IAAI,KAAKD,EAAa,SAAS;AAEjD,UADkB,IAAI,KAAKA,EAAa,OAAO,EACjC,QAAA,KAAaC,EAAU;AACpC,4BAAa,WAAW,wBAAwB,GACzC;AAAA,IACR;AAGM,WAAAD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASR,MAAMF,GACLJ,GACAH,GACwC;AAExC,UAAM,EAAE,MAAAL,EAAA,IAAS,MAAMC,EAAW,MAAMC,EAAc,yBAAyB,EAAE,sBAAsB,IAAM;AAE7G,QAAIF,GAAM;AAEH,YAAAgB,wBAAgB,KAAK;AAC3B,MAAAA,EAAU,QAAQA,EAAU,QAAQ,IAAIR,CAAkB;AAC1D,YAAMM,IAAe;AAAA,QACpB,GAAGd;AAAA,QACH,SAASgB,EAAU,YAAY;AAAA,QAC/B,SAASX;AAAA,QACT,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MACnC;AAIA,UAHA,aAAa,QAAQ,0BAA0B,KAAK,UAAUS,CAAY,CAAC,GAGvEd,EAAK,KAAK,YAAY,MAAM;AACxB,eAAAc;AAAA,IACR;AAGM,WAAA;AAAA,EAAA;AAET;"}