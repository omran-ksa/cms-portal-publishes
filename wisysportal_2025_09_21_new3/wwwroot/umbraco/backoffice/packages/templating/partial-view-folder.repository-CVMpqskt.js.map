{"version":3,"file":"partial-view-folder.repository-CVMpqskt.js","sources":["../../../src/packages/templating/partial-views/tree/folder/repository/partial-view-folder.server.data-source.ts","../../../src/packages/templating/partial-views/tree/folder/repository/partial-view-folder.repository.ts"],"sourcesContent":["import { UMB_PARTIAL_VIEW_FOLDER_ENTITY_TYPE } from '../../../entity.js';\r\nimport { UmbServerFilePathUniqueSerializer } from '@umbraco-cms/backoffice/server-file-system';\r\nimport type { UmbFolderModel } from '@umbraco-cms/backoffice/tree';\r\nimport type { CreatePartialViewFolderRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { PartialViewService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\n\r\n/**\r\n * A data source for Partial View folders that fetches data from the server\r\n * @class UmbPartialViewFolderServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbPartialViewFolderServerDataSource implements UmbDetailDataSource<UmbFolderModel> {\r\n\t#host: UmbControllerHost;\r\n\t#serverFilePathUniqueSerializer = new UmbServerFilePathUniqueSerializer();\r\n\r\n\t/**\r\n\t * Creates an instance of UmbPartialViewFolderServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbPartialViewFolderServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a scaffold for a Partial View folder\r\n\t * @param {Partial<UmbFolderModel>} [preset]\r\n\t * @returns {*}\r\n\t * @memberof UmbPartialViewFolderServerDataSource\r\n\t */\r\n\tasync createScaffold(preset?: Partial<UmbFolderModel>) {\r\n\t\tconst scaffold: UmbFolderModel = {\r\n\t\t\tentityType: UMB_PARTIAL_VIEW_FOLDER_ENTITY_TYPE,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\tname: '',\r\n\t\t\t...preset,\r\n\t\t};\r\n\r\n\t\treturn { data: scaffold };\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a Partial View folder from the server\r\n\t * @param {string} unique\r\n\t * @returns {UmbDataSourceResponse<UmbFolderModel>}\r\n\t * @memberof UmbPartialViewFolderServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst path = this.#serverFilePathUniqueSerializer.toServerPath(unique);\r\n\t\tif (!path) throw new Error('Cannot read partial view folder without a path');\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tPartialViewService.getPartialViewFolderByPath({\r\n\t\t\t\tpath: { path },\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data) {\r\n\t\t\tconst mappedData = {\r\n\t\t\t\tentityType: UMB_PARTIAL_VIEW_FOLDER_ENTITY_TYPE,\r\n\t\t\t\tunique: this.#serverFilePathUniqueSerializer.toUnique(data.path),\r\n\t\t\t\tparentUnique: data.parent ? this.#serverFilePathUniqueSerializer.toUnique(data.parent.path) : null,\r\n\t\t\t\tname: data.name,\r\n\t\t\t};\r\n\r\n\t\t\treturn { data: mappedData };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Partial View folder on the server\r\n\t * @param {UmbFolderModel} model\r\n\t * @returns {UmbDataSourceResponse<UmbFolderModel>}\r\n\t * @memberof UmbPartialViewFolderServerDataSource\r\n\t */\r\n\tasync create(model: UmbFolderModel, parentUnique: string | null) {\r\n\t\tif (!model) throw new Error('Data is missing');\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\t\tif (!model.name) throw new Error('Name is missing');\r\n\r\n\t\tconst parentPath = new UmbServerFilePathUniqueSerializer().toServerPath(parentUnique);\r\n\r\n\t\tconst body: CreatePartialViewFolderRequestModel = {\r\n\t\t\tparent: parentPath ? { path: parentPath } : null,\r\n\t\t\tname: model.name,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tPartialViewService.postPartialViewFolder({\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data && typeof data === 'string') {\r\n\t\t\tconst newPath = decodeURIComponent(data);\r\n\t\t\tconst newPathUnique = this.#serverFilePathUniqueSerializer.toUnique(newPath);\r\n\t\t\treturn this.read(newPathUnique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a Partial View folder on the server\r\n\t * @param {string} unique\r\n\t * @returns {UmbDataSourceErrorResponse}\r\n\t * @memberof UmbPartialViewServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst path = this.#serverFilePathUniqueSerializer.toServerPath(unique);\r\n\t\tif (!path) throw new Error('Cannot delete partial view folder without a path');\r\n\r\n\t\treturn tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tPartialViewService.deletePartialViewFolderByPath({\r\n\t\t\t\tpath: { path },\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n\r\n\tasync update(): Promise<any> {\r\n\t\tthrow new Error('Updating is not supported');\r\n\t}\r\n}\r\n","import { UmbPartialViewFolderServerDataSource } from './partial-view-folder.server.data-source.js';\r\nimport { UMB_PARTIAL_VIEW_FOLDER_STORE_CONTEXT } from './partial-view-folder.store.context-token.js';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbFolderModel } from '@umbraco-cms/backoffice/tree';\r\n\r\nexport class UmbPartialViewFolderRepository extends UmbDetailRepositoryBase<UmbFolderModel> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbPartialViewFolderServerDataSource, UMB_PARTIAL_VIEW_FOLDER_STORE_CONTEXT);\r\n\t}\r\n}\r\n\r\nexport { UmbPartialViewFolderRepository as api };\r\n"],"names":["UmbPartialViewFolderServerDataSource","#host","#serverFilePathUniqueSerializer","UmbServerFilePathUniqueSerializer","host","preset","UMB_PARTIAL_VIEW_FOLDER_ENTITY_TYPE","UmbId","unique","path","data","error","tryExecute","PartialViewService","model","parentUnique","parentPath","body","newPath","newPathUnique","UmbPartialViewFolderRepository","UmbDetailRepositoryBase","UMB_PARTIAL_VIEW_FOLDER_STORE_CONTEXT"],"mappings":";;;;;;AAeO,MAAMA,EAAoF;AAAA,EAChGC;AAAA,EACAC,KAAkC,IAAIC,EAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxE,YAAYC,GAAyB;AACpC,SAAKH,KAAQG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,eAAeC,GAAkC;AAQ/C,WAAA,EAAE,MAPwB;AAAA,MAChC,YAAYC;AAAA,MACZ,QAAQC,EAAM,IAAI;AAAA,MAClB,MAAM;AAAA,MACN,GAAGF;AAAA,IACJ,EAEwB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASzB,MAAM,KAAKG,GAAgB;AAC1B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAEhD,UAAMC,IAAO,KAAKP,GAAgC,aAAaM,CAAM;AACrE,QAAI,CAACC,EAAY,OAAA,IAAI,MAAM,gDAAgD;AAE3E,UAAM,EAAE,MAAAC,GAAM,OAAAC,EAAM,IAAI,MAAMC;AAAA,MAC7B,KAAKX;AAAA,MACLY,EAAmB,2BAA2B;AAAA,QAC7C,MAAM,EAAE,MAAAJ,EAAK;AAAA,MACb,CAAA;AAAA,IACF;AAEA,WAAIC,IAQI,EAAE,MAPU;AAAA,MAClB,YAAYJ;AAAA,MACZ,QAAQ,KAAKJ,GAAgC,SAASQ,EAAK,IAAI;AAAA,MAC/D,cAAcA,EAAK,SAAS,KAAKR,GAAgC,SAASQ,EAAK,OAAO,IAAI,IAAI;AAAA,MAC9F,MAAMA,EAAK;AAAA,IACZ,EAE0B,IAGpB,EAAE,OAAAC,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,MAAM,OAAOG,GAAuBC,GAA6B;AAChE,QAAI,CAACD,EAAa,OAAA,IAAI,MAAM,iBAAiB;AAC7C,QAAI,CAACA,EAAM,OAAc,OAAA,IAAI,MAAM,mBAAmB;AACtD,QAAI,CAACA,EAAM,KAAY,OAAA,IAAI,MAAM,iBAAiB;AAElD,UAAME,IAAa,IAAIb,IAAoC,aAAaY,CAAY,GAE9EE,IAA4C;AAAA,MACjD,QAAQD,IAAa,EAAE,MAAMA,EAAe,IAAA;AAAA,MAC5C,MAAMF,EAAM;AAAA,IACb,GAEM,EAAE,MAAAJ,GAAM,OAAAC,EAAM,IAAI,MAAMC;AAAA,MAC7B,KAAKX;AAAA,MACLY,EAAmB,sBAAsB;AAAA,QACxC,MAAAI;AAAA,MACA,CAAA;AAAA,IACF;AAEI,QAAAP,KAAQ,OAAOA,KAAS,UAAU;AAC/B,YAAAQ,IAAU,mBAAmBR,CAAI,GACjCS,IAAgB,KAAKjB,GAAgC,SAASgB,CAAO;AACpE,aAAA,KAAK,KAAKC,CAAa;AAAA,IAAA;AAG/B,WAAO,EAAE,OAAAR,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,MAAM,OAAOH,GAAgB;AAC5B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAEhD,UAAMC,IAAO,KAAKP,GAAgC,aAAaM,CAAM;AACrE,QAAI,CAACC,EAAY,OAAA,IAAI,MAAM,kDAAkD;AAEtE,WAAAG;AAAA,MACN,KAAKX;AAAA,MACLY,EAAmB,8BAA8B;AAAA,QAChD,MAAM,EAAE,MAAAJ,EAAK;AAAA,MACb,CAAA;AAAA,IACF;AAAA,EAAA;AAAA,EAGD,MAAM,SAAuB;AACtB,UAAA,IAAI,MAAM,2BAA2B;AAAA,EAAA;AAE7C;ACjIO,MAAMW,UAAuCC,EAAwC;AAAA,EAC3F,YAAYjB,GAAyB;AAC9B,UAAAA,GAAMJ,GAAsCsB,CAAqC;AAAA,EAAA;AAEzF;"}