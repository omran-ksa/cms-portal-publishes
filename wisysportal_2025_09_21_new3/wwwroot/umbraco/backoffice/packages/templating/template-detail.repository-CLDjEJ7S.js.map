{"version":3,"file":"template-detail.repository-CLDjEJ7S.js","sources":["../../../src/packages/templating/templates/repository/detail/template-detail.server.data-source.ts","../../../src/packages/templating/templates/repository/detail/template-detail.repository.ts"],"sourcesContent":["import type { UmbTemplateDetailModel } from '../../types.js';\r\nimport { UMB_TEMPLATE_ENTITY_TYPE } from '../../entity.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\nimport type {\r\n\tCreateTemplateRequestModel,\r\n\tUpdateTemplateRequestModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { TemplateService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the Template that fetches data from the server\r\n * @class UmbTemplateServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbTemplateServerDataSource implements UmbDetailDataSource<UmbTemplateDetailModel> {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbTemplateServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbTemplateServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Template scaffold\r\n\t * @param {Partial<UmbTemplateDetailModel>} [preset]\r\n\t * @returns { CreateTemplateRequestModel }\r\n\t * @memberof UmbTemplateServerDataSource\r\n\t */\r\n\tasync createScaffold(preset: Partial<UmbTemplateDetailModel> = {}) {\r\n\t\tconst scaffold =\r\n\t\t\t'@using Umbraco.Cms.Web.Common.PublishedModels;\\n@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage\\n@{\\n\\tLayout = null;\\n}';\r\n\r\n\t\tconst data: UmbTemplateDetailModel = {\r\n\t\t\tentityType: UMB_TEMPLATE_ENTITY_TYPE,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\tname: '',\r\n\t\t\talias: '',\r\n\t\t\tcontent: scaffold,\r\n\t\t\tmasterTemplate: null,\r\n\t\t\t...preset,\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a Template with the given id from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbTemplateServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(this.#host, TemplateService.getTemplateById({ path: { id: unique } }));\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst template: UmbTemplateDetailModel = {\r\n\t\t\tentityType: UMB_TEMPLATE_ENTITY_TYPE,\r\n\t\t\tunique: data.id,\r\n\t\t\tname: data.name,\r\n\t\t\tcontent: data.content || null,\r\n\t\t\talias: data.alias,\r\n\t\t\tmasterTemplate: data.masterTemplate ? { unique: data.masterTemplate.id } : null,\r\n\t\t};\r\n\r\n\t\treturn { data: template };\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a new Template on the server\r\n\t * @param {UmbTemplateDetailModel} model\r\n\t * @returns {*}\r\n\t * @memberof UmbTemplateServerDataSource\r\n\t */\r\n\tasync create(model: UmbTemplateDetailModel) {\r\n\t\tif (!model) throw new Error('Template is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: CreateTemplateRequestModel = {\r\n\t\t\tid: model.unique,\r\n\t\t\tname: model.name,\r\n\t\t\tcontent: model.content,\r\n\t\t\talias: model.alias,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tTemplateService.postTemplate({\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data) {\r\n\t\t\treturn this.read(data as never);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a Template on the server\r\n\t * @param {UmbTemplateDetailModel} Template\r\n\t * @param model\r\n\t * @returns {*}\r\n\t * @memberof UmbTemplateServerDataSource\r\n\t */\r\n\tasync update(model: UmbTemplateDetailModel) {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: UpdateTemplateRequestModel = {\r\n\t\t\tname: model.name,\r\n\t\t\tcontent: model.content,\r\n\t\t\talias: model.alias,\r\n\t\t};\r\n\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tTemplateService.putTemplateById({\r\n\t\t\t\tpath: { id: model.unique },\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn this.read(model.unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a Template on the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbTemplateServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tTemplateService.deleteTemplateById({\r\n\t\t\t\tpath: { id: unique },\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbTemplateDetailModel } from '../../types.js';\r\nimport { UmbTemplateServerDataSource } from './template-detail.server.data-source.js';\r\nimport { UMB_TEMPLATE_DETAIL_STORE_CONTEXT } from './template-detail.store.context-token.js';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbTemplateDetailRepository extends UmbDetailRepositoryBase<UmbTemplateDetailModel> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbTemplateServerDataSource, UMB_TEMPLATE_DETAIL_STORE_CONTEXT);\r\n\t}\r\n}\r\n\r\nexport default UmbTemplateDetailRepository;\r\n"],"names":["UmbTemplateServerDataSource","#host","host","preset","UMB_TEMPLATE_ENTITY_TYPE","UmbId","unique","data","error","tryExecute","TemplateService","model","body","UmbTemplateDetailRepository","UmbDetailRepositoryBase","UMB_TEMPLATE_DETAIL_STORE_CONTEXT"],"mappings":";;;;;AAiBO,MAAMA,EAAmF;AAAA,EAC/FC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,eAAeC,IAA0C,IAAI;AAclE,WAAO,EAAE,MAV4B;AAAA,MACpC,YAAYC;AAAA,MACZ,QAAQC,EAAM,IAAI;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAPA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,gBAAgB;AAAA,MAChB,GAAGF;AAAA,IACJ,EAEc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASf,MAAM,KAAKG,GAAgB;AAC1B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAEhD,UAAM,EAAE,MAAAC,GAAM,OAAAC,EAAA,IAAU,MAAMC,EAAW,KAAKR,IAAOS,EAAgB,gBAAgB,EAAE,MAAM,EAAE,IAAIJ,EAAO,EAAG,CAAA,CAAC;AAE1G,WAAAE,KAAS,CAACD,IACN,EAAE,OAAAC,EAAM,IAaT,EAAE,MATgC;AAAA,MACxC,YAAYJ;AAAA,MACZ,QAAQG,EAAK;AAAA,MACb,MAAMA,EAAK;AAAA,MACX,SAASA,EAAK,WAAW;AAAA,MACzB,OAAOA,EAAK;AAAA,MACZ,gBAAgBA,EAAK,iBAAiB,EAAE,QAAQA,EAAK,eAAe,OAAO;AAAA,IAC5E,EAEwB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASzB,MAAM,OAAOI,GAA+B;AAC3C,QAAI,CAACA,EAAa,OAAA,IAAI,MAAM,qBAAqB;AAGjD,UAAMC,IAAmC;AAAA,MACxC,IAAID,EAAM;AAAA,MACV,MAAMA,EAAM;AAAA,MACZ,SAASA,EAAM;AAAA,MACf,OAAOA,EAAM;AAAA,IACd,GAEM,EAAE,MAAAJ,GAAM,OAAAC,EAAM,IAAI,MAAMC;AAAA,MAC7B,KAAKR;AAAA,MACLS,EAAgB,aAAa;AAAA,QAC5B,MAAAE;AAAA,MACA,CAAA;AAAA,IACF;AAEA,WAAIL,IACI,KAAK,KAAKA,CAAa,IAGxB,EAAE,OAAAC,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUhB,MAAM,OAAOG,GAA+B;AAC3C,QAAI,CAACA,EAAM,OAAc,OAAA,IAAI,MAAM,mBAAmB;AAGtD,UAAMC,IAAmC;AAAA,MACxC,MAAMD,EAAM;AAAA,MACZ,SAASA,EAAM;AAAA,MACf,OAAOA,EAAM;AAAA,IACd,GAEM,EAAE,OAAAH,EAAM,IAAI,MAAMC;AAAA,MACvB,KAAKR;AAAA,MACLS,EAAgB,gBAAgB;AAAA,QAC/B,MAAM,EAAE,IAAIC,EAAM,OAAO;AAAA,QACzB,MAAAC;AAAA,MACA,CAAA;AAAA,IACF;AAEA,WAAKJ,IAIE,EAAE,OAAAA,EAAM,IAHP,KAAK,KAAKG,EAAM,MAAM;AAAA,EAGf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,MAAM,OAAOL,GAAgB;AAC5B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAEzC,WAAAG;AAAA,MACN,KAAKR;AAAA,MACLS,EAAgB,mBAAmB;AAAA,QAClC,MAAM,EAAE,IAAIJ,EAAO;AAAA,MACnB,CAAA;AAAA,IACF;AAAA,EAAA;AAEF;ACzJO,MAAMO,UAAoCC,EAAgD;AAAA,EAChG,YAAYZ,GAAyB;AAC9B,UAAAA,GAAMF,GAA6Be,CAAiC;AAAA,EAAA;AAE5E;"}