{"version":3,"file":"dashboard-health-check.element-Bcj5l406.js","sources":["../../../src/packages/health-check/dashboard-health-check.element.ts"],"sourcesContent":["import type { UmbDashboardHealthCheckGroupElement } from './views/health-check-group.element.js';\r\nimport { UmbHealthCheckDashboardContext } from './health-check-dashboard.context.js';\r\nimport type { ManifestHealthCheck } from './health-check.extension.js';\r\nimport { html, customElement, state, type PropertyValueMap } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { HealthCheckGroupResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { HealthCheckService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbRoute } from '@umbraco-cms/backoffice/router';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n@customElement('umb-dashboard-health-check')\r\nexport class UmbDashboardHealthCheckElement extends UmbLitElement {\r\n\t@state()\r\n\tprivate _routes: UmbRoute[] = [\r\n\t\t{\r\n\t\t\tpath: `/:groupName`,\r\n\t\t\tcomponent: () => import('./views/health-check-group.element.js'),\r\n\t\t\tsetup: (component, info) => {\r\n\t\t\t\tconst element = component as UmbDashboardHealthCheckGroupElement;\r\n\t\t\t\telement.groupName = decodeURI(info.match.params.groupName);\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: ``,\r\n\t\t\tcomponent: () => import('./views/health-check-overview.element.js'),\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: `**`,\r\n\t\t\tcomponent: async () => (await import('@umbraco-cms/backoffice/router')).UmbRouteNotFoundElement,\r\n\t\t},\r\n\t];\r\n\r\n\tprivate _healthCheckDashboardContext = new UmbHealthCheckDashboardContext(this);\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.observe(umbExtensionsRegistry.byType('healthCheck'), (healthCheckManifests) => {\r\n\t\t\tthis._healthCheckDashboardContext.manifests = healthCheckManifests;\r\n\t\t});\r\n\t}\r\n\r\n\tprotected override firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>) {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\t\tthis.#registerHealthChecks();\r\n\t}\r\n\r\n\t#registerHealthChecks = async () => {\r\n\t\tconst { data } = await tryExecute(this, HealthCheckService.getHealthCheckGroup({ query: { skip: 0, take: 9999 } }));\r\n\t\tif (!data) return;\r\n\t\tconst manifests = this.#createManifests(data.items);\r\n\t\tthis.#register(manifests);\r\n\t};\r\n\r\n\t#createManifests(groups: HealthCheckGroupResponseModel[]): Array<ManifestHealthCheck> {\r\n\t\treturn groups.map((group) => {\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'healthCheck',\r\n\t\t\t\talias: `Umb.HealthCheck.${group.name?.replace(/\\s+/g, '') || ''}`,\r\n\t\t\t\tname: `${group.name} Health Check`,\r\n\t\t\t\tapi: () => import('./health-check.context.js'),\r\n\t\t\t\tweight: 500,\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\tlabel: group.name || '',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\t#register(manifests: Array<ManifestHealthCheck>) {\r\n\t\tmanifests.forEach((manifest) => {\r\n\t\t\tif (umbExtensionsRegistry.isRegistered(manifest.alias)) return;\r\n\t\t\tumbExtensionsRegistry.register(manifest);\r\n\t\t});\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html` <umb-router-slot .routes=${this._routes}></umb-router-slot>`;\r\n\t}\r\n}\r\n\r\nexport default UmbDashboardHealthCheckElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-dashboard-health-check': UmbDashboardHealthCheckElement;\r\n\t}\r\n}\r\n"],"names":["_registerHealthChecks","_UmbDashboardHealthCheckElement_instances","createManifests_fn","register_fn","UmbDashboardHealthCheckElement","UmbLitElement","__privateAdd","component","info","element","UmbHealthCheckDashboardContext","data","tryExecute","HealthCheckService","manifests","__privateMethod","umbExtensionsRegistry","healthCheckManifests","_changedProperties","__privateGet","html","groups","group","n","manifest","__decorateClass","state","customElement","UmbDashboardHealthCheckElement$1"],"mappings":";;;;;;;;;;;;+TAAAA,GAAAC,GAAAC,GAAAC;AAYa,IAAAC,IAAN,cAA6CC,EAAc;AAAA,EAuBjE,cAAc;AACP,UAAA,GAxBDC,EAAA,MAAAL,CAAA,GAEN,KAAQ,UAAsB;AAAA,MAC7B;AAAA,QACC,MAAM;AAAA,QACN,WAAW,MAAM,OAAO,0CAAuC;AAAA,QAC/D,OAAO,CAACM,GAAWC,MAAS;AAC3B,gBAAMC,IAAUF;AAChB,UAAAE,EAAQ,YAAY,UAAUD,EAAK,MAAM,OAAO,SAAS;AAAA,QAAA;AAAA,MAE3D;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,WAAW,MAAM,OAAO,6CAA0C;AAAA,MACnE;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,WAAW,aAAa,MAAM,OAAO,gCAAgC,GAAG;AAAA,MAAA;AAAA,IAE1E,GAEQ,KAAA,+BAA+B,IAAIE,EAA+B,IAAI,GAe9EJ,EAAA,MAAAN,GAAwB,YAAY;AACnC,YAAM,EAAE,MAAAW,EAAK,IAAI,MAAMC,EAAW,MAAMC,EAAmB,oBAAoB,EAAE,OAAO,EAAE,MAAM,GAAG,MAAM,KAAK,EAAG,CAAA,CAAC;AAClH,UAAI,CAACF,EAAM;AACX,YAAMG,IAAYC,EAAA,MAAKd,GAALC,CAAA,EAAA,KAAA,MAAsBS,EAAK,KAAA;AAC7C,MAAAI,EAAA,MAAKd,MAAL,KAAe,MAAAa,CAAA;AAAA,IAAA,CAChB,GAfC,KAAK,QAAQE,EAAsB,OAAO,aAAa,GAAG,CAACC,MAAyB;AACnF,WAAK,6BAA6B,YAAYA;AAAA,IAAA,CAC9C;AAAA,EAAA;AAAA,EAGiB,aAAaC,GAAuE;AACtG,UAAM,aAAaA,CAAkB,GACrCC,EAAA,MAAKnB,CAAL,EAAA,KAAA,IAAA;AAAA,EAAA;AAAA,EAgCQ,SAAS;AACV,WAAAoB,8BAAiC,KAAK,OAAO;AAAA,EAAA;AAEtD;AAhCCpB,IAAA,oBAAA,QAAA;AApCMC,IAAA,oBAAA,QAAA;AA2CNC,IAAgB,SAACmB,GAAqE;AAC9E,SAAAA,EAAO,IAAI,CAACC,OACX;AAAA,IACN,MAAM;AAAA,IACN,OAAO,mBAAmBA,EAAM,MAAM,QAAQ,QAAQ,EAAE,KAAK,EAAE;AAAA,IAC/D,MAAM,GAAGA,EAAM,IAAI;AAAA,IACnB,KAAK,MAAM,OAAO,8CAA2B,EAAA,KAAA,CAAAC,MAAAA,EAAA,CAAA;AAAA,IAC7C,QAAQ;AAAA,IACR,MAAM;AAAA,MACL,OAAOD,EAAM,QAAQ;AAAA,IAAA;AAAA,EAEvB,EACA;AACF;AAEAnB,IAAS,SAACW,GAAuC;AACtC,EAAAA,EAAA,QAAQ,CAACU,MAAa;AAC/B,IAAIR,EAAsB,aAAaQ,EAAS,KAAK,KACrDR,EAAsB,SAASQ,CAAQ;AAAA,EAAA,CACvC;AACF;AA7DQC,EAAA;AAAA,EADPC,EAAM;AAAA,GADKtB,EAEJ,WAAA,WAAA,CAAA;AAFIA,IAANqB,EAAA;AAAA,EADNE,EAAc,4BAA4B;AAAA,GAC9BvB,CAAA;AAsEb,MAAAwB,IAAexB;"}