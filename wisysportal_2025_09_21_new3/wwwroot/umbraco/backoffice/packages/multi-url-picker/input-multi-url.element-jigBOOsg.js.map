{"version":3,"file":"input-multi-url.element-jigBOOsg.js","sources":["../../../src/packages/multi-url-picker/components/input-multi-url/input-multi-url.element.ts"],"sourcesContent":["import type { UmbLinkPickerLink } from '../../link-picker-modal/types.js';\r\nimport { UMB_LINK_PICKER_MODAL } from '../../link-picker-modal/link-picker-modal.token.js';\r\nimport {\r\n\tcss,\r\n\tcustomElement,\r\n\thtml,\r\n\tifDefined,\r\n\tnothing,\r\n\tproperty,\r\n\trepeat,\r\n\tstate,\r\n\twhen,\r\n} from '@umbraco-cms/backoffice/external/lit';\r\nimport { simpleHashCode } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbModalRouteRegistrationController } from '@umbraco-cms/backoffice/router';\r\nimport { UmbSorterController } from '@umbraco-cms/backoffice/sorter';\r\nimport { UUIFormControlMixin } from '@umbraco-cms/backoffice/external/uui';\r\nimport type { UmbModalRouteBuilder } from '@umbraco-cms/backoffice/router';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UUIModalSidebarSize } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UmbDocumentUrlRepository, UmbDocumentUrlsDataResolver } from '@umbraco-cms/backoffice/document';\r\nimport { UmbMediaUrlRepository } from '@umbraco-cms/backoffice/media';\r\n\r\n/**\r\n * @element umb-input-multi-url\r\n * @fires change - when the value of the input changes\r\n * @fires blur - when the input loses focus\r\n * @fires focus - when the input gains focus\r\n */\r\nconst elementName = 'umb-input-multi-url';\r\n@customElement(elementName)\r\nexport class UmbInputMultiUrlElement extends UUIFormControlMixin(UmbLitElement, '') {\r\n\t#sorter = new UmbSorterController<UmbLinkPickerLink>(this, {\r\n\t\tgetUniqueOfElement: (element) => {\r\n\t\t\treturn element.id;\r\n\t\t},\r\n\t\tgetUniqueOfModel: (modelEntry) => {\r\n\t\t\treturn this.#getUnique(modelEntry);\r\n\t\t},\r\n\t\tidentifier: 'Umb.SorterIdentifier.InputMultiUrl',\r\n\t\titemSelector: 'uui-ref-node',\r\n\t\tcontainerSelector: 'uui-ref-list',\r\n\t\tonChange: ({ model }) => {\r\n\t\t\tthis.urls = model;\r\n\t\t\tthis.#dispatchChangeEvent();\r\n\t\t},\r\n\t});\r\n\r\n\tprotected override getFormElement() {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t@property()\r\n\t/** @deprecated will be removed in v17 */\r\n\tpublic set alias(value: string | undefined) {\r\n\t\t//this.#linkPickerModal.setUniquePathValue('propertyAlias', value);\r\n\t}\r\n\tpublic get alias(): string | undefined {\r\n\t\treturn undefined; //this.#linkPickerModal.getUniquePathValue('propertyAlias');\r\n\t}\r\n\r\n\t@property()\r\n\t/** @deprecated will be removed in v17 */\r\n\tpublic set variantId(value: string | UmbVariantId | undefined) {\r\n\t\t//this.#linkPickerModal.setUniquePathValue('variantId', value?.toString());\r\n\t}\r\n\tpublic get variantId(): string | undefined {\r\n\t\treturn undefined; //this.#linkPickerModal.getUniquePathValue('variantId');\r\n\t}\r\n\r\n\t/**\r\n\t * This is a minimum amount of selected items in this input.\r\n\t * @type {number}\r\n\t * @attr\r\n\t * @default undefined\r\n\t */\r\n\t@property({ type: Number })\r\n\tmin?: number;\r\n\r\n\t/**\r\n\t * Min validation message.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default\r\n\t */\r\n\t@property({ type: String, attribute: 'min-message' })\r\n\tminMessage = 'This field needs more items';\r\n\r\n\t/**\r\n\t * This is a maximum amount of selected items in this input.\r\n\t * @type {number}\r\n\t * @attr\r\n\t * @default undefined\r\n\t */\r\n\t@property({ type: Number })\r\n\tmax?: number;\r\n\r\n\t/**\r\n\t * Max validation message.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default\r\n\t */\r\n\t@property({ type: String, attribute: 'min-message' })\r\n\tmaxMessage = 'This field exceeds the allowed amount of items';\r\n\r\n\t/**\r\n\t @attr 'hide-anchor'\r\n\t */\r\n\t@property({ type: Boolean, attribute: 'hide-anchor' })\r\n\thideAnchor?: boolean;\r\n\r\n\t/**\r\n\t * @type {UUIModalSidebarSize}\r\n\t * @attr\r\n\t * @default \"small\"\r\n\t */\r\n\t@property()\r\n\toverlaySize?: UUIModalSidebarSize;\r\n\r\n\t/**\r\n\t * @type {Array<UmbLinkPickerLink>}\r\n\t * @default\r\n\t */\r\n\t@property({ attribute: false })\r\n\tset urls(data: Array<UmbLinkPickerLink>) {\r\n\t\tdata ??= [];\r\n\t\tthis.#urls = [...data]; // Unfreeze data coming from State, so we can manipulate it.\r\n\t\tsuper.value = this.#urls.map((x) => x.url).join(',');\r\n\t\tthis.#sorter.setModel(this.#urls);\r\n\t\tthis.#populateLinksUrl();\r\n\t}\r\n\tget urls(): Array<UmbLinkPickerLink> {\r\n\t\treturn this.#urls;\r\n\t}\r\n\r\n\t#urls: Array<UmbLinkPickerLink> = [];\r\n\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\tpublic get readonly() {\r\n\t\treturn this.#readonly;\r\n\t}\r\n\tpublic set readonly(value) {\r\n\t\tthis.#readonly = value;\r\n\r\n\t\tif (this.#readonly) {\r\n\t\t\tthis.#sorter.disable();\r\n\t\t} else {\r\n\t\t\tthis.#sorter.enable();\r\n\t\t}\r\n\t}\r\n\t#readonly = false;\r\n\r\n\t@state()\r\n\tprivate _modalRoute?: UmbModalRouteBuilder;\r\n\r\n\t@state()\r\n\t_resolvedLinkUrls: Array<{ unique: string; url: string }> = [];\r\n\r\n\t#linkPickerModal;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.addValidator(\r\n\t\t\t'rangeUnderflow',\r\n\t\t\t() => this.minMessage,\r\n\t\t\t() => !!this.min && this.urls.length < this.min,\r\n\t\t);\r\n\t\tthis.addValidator(\r\n\t\t\t'rangeOverflow',\r\n\t\t\t() => this.maxMessage,\r\n\t\t\t() => !!this.max && this.urls.length > this.max,\r\n\t\t);\r\n\r\n\t\tthis.#linkPickerModal = new UmbModalRouteRegistrationController(this, UMB_LINK_PICKER_MODAL)\r\n\t\t\t.addAdditionalPath(`:index`)\r\n\t\t\t.onSetup((params) => {\r\n\t\t\t\t// Get index:\r\n\t\t\t\tconst indexParam = params.index;\r\n\t\t\t\tif (!indexParam) return false;\r\n\t\t\t\tlet index: number | null = parseInt(params.index);\r\n\t\t\t\tif (Number.isNaN(index)) return false;\r\n\r\n\t\t\t\t// Use the index to find data:\r\n\t\t\t\tlet data: UmbLinkPickerLink | null = null;\r\n\t\t\t\tif (index >= 0 && index < this.urls.length) {\r\n\t\t\t\t\tdata = this.#getItemByIndex(index);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If not then make a new pick:\r\n\t\t\t\t\tindex = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmodal: {\r\n\t\t\t\t\t\tsize: this.overlaySize || 'small',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tindex: index,\r\n\t\t\t\t\t\tisNew: index === null,\r\n\t\t\t\t\t\tconfig: {\r\n\t\t\t\t\t\t\thideAnchor: this.hideAnchor,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: {\r\n\t\t\t\t\t\tlink: {\r\n\t\t\t\t\t\t\ticon: data?.icon,\r\n\t\t\t\t\t\t\tname: data?.name,\r\n\t\t\t\t\t\t\tpublished: data?.published,\r\n\t\t\t\t\t\t\tqueryString: data?.queryString,\r\n\t\t\t\t\t\t\ttarget: data?.target,\r\n\t\t\t\t\t\t\ttrashed: data?.trashed,\r\n\t\t\t\t\t\t\ttype: data?.type,\r\n\t\t\t\t\t\t\tunique: data?.unique,\r\n\t\t\t\t\t\t\turl: data?.url,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.onSubmit((value) => {\r\n\t\t\t\tif (!value) return;\r\n\t\t\t\tthis.#setSelection(value.link, this.#linkPickerModal.modalContext?.data.index ?? null);\r\n\t\t\t})\r\n\t\t\t.observeRouteBuilder((routeBuilder) => {\r\n\t\t\t\tthis._modalRoute = routeBuilder;\r\n\t\t\t});\r\n\t}\r\n\r\n\t#populateLinksUrl() {\r\n\t\t// Documents and media have URLs saved in the local link format. Display the actual URL to align with what\r\n\t\t// the user sees when they selected it initially.\r\n\t\tthis.#urls.forEach(async (link) => {\r\n\t\t\tif (!link.unique) return;\r\n\r\n\t\t\tlet url: string | undefined = undefined;\r\n\t\t\tswitch (link.type) {\r\n\t\t\t\tcase 'document': {\r\n\t\t\t\t\turl = await this.#getUrlForDocument(link.unique);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'media': {\r\n\t\t\t\t\turl = await this.#getUrlForMedia(link.unique);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (url) {\r\n\t\t\t\tconst resolvedUrl = { unique: link.unique, url };\r\n\t\t\t\tthis._resolvedLinkUrls = [...this._resolvedLinkUrls, resolvedUrl];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tasync #getUrlForDocument(unique: string) {\r\n\t\tconst documentUrlRepository = new UmbDocumentUrlRepository(this);\r\n\t\tconst { data: documentUrlData } = await documentUrlRepository.requestItems([unique]);\r\n\t\tconst urlsItem = documentUrlData?.[0];\r\n\t\tconst dataResolver = new UmbDocumentUrlsDataResolver(this);\r\n\t\tdataResolver.setData(urlsItem?.urls);\r\n\t\tconst resolvedUrls = await dataResolver.getUrls();\r\n\t\treturn resolvedUrls?.[0]?.url ?? '';\r\n\t}\r\n\r\n\tasync #getUrlForMedia(unique: string) {\r\n\t\tconst mediaUrlRepository = new UmbMediaUrlRepository(this);\r\n\t\tconst { data: mediaUrlData } = await mediaUrlRepository.requestItems([unique]);\r\n\t\treturn mediaUrlData?.[0].url ?? '';\r\n\t}\r\n\r\n\tasync #requestRemoveItem(index: number) {\r\n\t\tconst item = this.#urls[index];\r\n\t\tif (!item) throw new Error('Could not find item at index: ' + index);\r\n\r\n\t\tawait umbConfirmModal(this, {\r\n\t\t\tcolor: 'danger',\r\n\t\t\theadline: `Remove ${item.name}?`,\r\n\t\t\tcontent: 'Are you sure you want to remove this item',\r\n\t\t\tconfirmLabel: 'Remove',\r\n\t\t});\r\n\r\n\t\tthis.#removeItem(index);\r\n\t}\r\n\r\n\t#removeItem(index: number) {\r\n\t\tthis.urls.splice(index, 1);\r\n\t\tthis.#dispatchChangeEvent();\r\n\t}\r\n\r\n\t#getItemByIndex(index: number) {\r\n\t\treturn this.urls[index];\r\n\t}\r\n\r\n\t#getUnique(link: UmbLinkPickerLink): string {\r\n\t\treturn 'x' + simpleHashCode(JSON.stringify(link)).toString(16);\r\n\t}\r\n\r\n\t#setSelection(selection: UmbLinkPickerLink, index: number | null) {\r\n\t\tif (index !== null && index >= 0) {\r\n\t\t\tthis.urls[index] = selection;\r\n\t\t} else {\r\n\t\t\tthis.urls.push(selection);\r\n\t\t}\r\n\r\n\t\tthis.#dispatchChangeEvent();\r\n\t}\r\n\r\n\t#dispatchChangeEvent() {\r\n\t\tthis.requestUpdate();\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`${this.#renderItems()} ${this.#renderAddButton()}`;\r\n\t}\r\n\r\n\t#renderAddButton() {\r\n\t\tif (this.max === 1 && this.urls && this.urls.length >= this.max) return nothing;\r\n\t\tif (this.readonly && this.urls.length > 0) {\r\n\t\t\treturn nothing;\r\n\t\t} else {\r\n\t\t\treturn html`\r\n\t\t\t\t<uui-button\r\n\t\t\t\t\tid=\"btn-add\"\r\n\t\t\t\t\tlook=\"placeholder\"\r\n\t\t\t\t\tlabel=${this.localize.term('general_add')}\r\n\t\t\t\t\t.href=${this._modalRoute?.({ index: -1 })}\r\n\t\t\t\t\t?disabled=${this.readonly}></uui-button>\r\n\t\t\t`;\r\n\t\t}\r\n\t}\r\n\r\n\t#renderItems() {\r\n\t\tif (!this.urls) return;\r\n\t\treturn html`\r\n\t\t\t<uui-ref-list>\r\n\t\t\t\t${repeat(\r\n\t\t\t\t\tthis.urls,\r\n\t\t\t\t\t(link) => link.unique,\r\n\t\t\t\t\t(link, index) => this.#renderItem(link, index),\r\n\t\t\t\t)}\r\n\t\t\t</uui-ref-list>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderItem(link: UmbLinkPickerLink, index: number) {\r\n\t\tconst unique = this.#getUnique(link);\r\n\t\tconst href = this.readonly ? undefined : (this._modalRoute?.({ index }) ?? undefined);\r\n\t\tconst resolvedUrl = this._resolvedLinkUrls.find((url) => url.unique === link.unique)?.url ?? '';\r\n\t\treturn html`\r\n\t\t\t<uui-ref-node\r\n\t\t\t\tid=${unique}\r\n\t\t\t\thref=${ifDefined(href)}\r\n\t\t\t\tname=${link.name || ''}\r\n\t\t\t\tdetail=${resolvedUrl + (link.queryString || '')}\r\n\t\t\t\t?readonly=${this.readonly}>\r\n\t\t\t\t<umb-icon slot=\"icon\" name=${link.icon || 'icon-link'}></umb-icon>\r\n\t\t\t\t${when(\r\n\t\t\t\t\t!this.readonly,\r\n\t\t\t\t\t() => html`\r\n\t\t\t\t\t\t<uui-action-bar slot=\"actions\">\r\n\t\t\t\t\t\t\t<uui-button\r\n\t\t\t\t\t\t\t\tlabel=${this.localize.term('general_remove')}\r\n\t\t\t\t\t\t\t\t@click=${() => this.#requestRemoveItem(index)}></uui-button>\r\n\t\t\t\t\t\t</uui-action-bar>\r\n\t\t\t\t\t`,\r\n\t\t\t\t)}\r\n\t\t\t</uui-ref-node>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t#btn-add {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t[elementName]: UmbInputMultiUrlElement;\r\n\t}\r\n}\r\n"],"names":["_sorter","_urls","_readonly","_linkPickerModal","_UmbInputMultiUrlElement_instances","populateLinksUrl_fn","getUrlForDocument_fn","getUrlForMedia_fn","requestRemoveItem_fn","removeItem_fn","getItemByIndex_fn","getUnique_fn","setSelection_fn","dispatchChangeEvent_fn","renderAddButton_fn","renderItems_fn","renderItem_fn","elementName","UmbInputMultiUrlElement","UUIFormControlMixin","UmbLitElement","__privateAdd","UmbSorterController","element","modelEntry","__privateMethod","model","__privateSet","UmbModalRouteRegistrationController","UMB_LINK_PICKER_MODAL","params","index","data","value","__privateGet","routeBuilder","x","html","link","url","resolvedUrl","unique","documentUrlRepository","UmbDocumentUrlRepository","documentUrlData","urlsItem","dataResolver","UmbDocumentUrlsDataResolver","mediaUrlRepository","UmbMediaUrlRepository","mediaUrlData","item","umbConfirmModal","simpleHashCode","selection","UmbChangeEvent","nothing","repeat","href","ifDefined","when","css","__decorateClass","property","state","customElement"],"mappings":"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"}