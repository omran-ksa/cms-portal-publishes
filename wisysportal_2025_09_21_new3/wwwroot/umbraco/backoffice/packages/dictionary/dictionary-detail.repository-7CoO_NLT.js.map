{"version":3,"file":"dictionary-detail.repository-7CoO_NLT.js","sources":["../../../src/packages/dictionary/repository/detail/dictionary-detail.server.data-source.ts","../../../src/packages/dictionary/repository/detail/dictionary-detail.repository.ts"],"sourcesContent":["import type { UmbDictionaryDetailModel } from '../../types.js';\r\nimport { UMB_DICTIONARY_ENTITY_TYPE } from '../../entity.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\nimport type {\r\n\tCreateDictionaryItemRequestModel,\r\n\tUpdateDictionaryItemRequestModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { DictionaryService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the Dictionary that fetches data from the server\r\n * @class UmbDictionaryServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbDictionaryServerDataSource implements UmbDetailDataSource<UmbDictionaryDetailModel> {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbDictionaryServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbDictionaryServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Dictionary scaffold\r\n\t * @returns { CreateDictionaryRequestModel }\r\n\t * @memberof UmbDictionaryServerDataSource\r\n\t */\r\n\tasync createScaffold() {\r\n\t\tconst data: UmbDictionaryDetailModel = {\r\n\t\t\tentityType: UMB_DICTIONARY_ENTITY_TYPE,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\tname: '',\r\n\t\t\ttranslations: [],\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a Dictionary with the given id from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDictionaryServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(this.#host, DictionaryService.getDictionaryById({ path: { id: unique } }));\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst dictionary: UmbDictionaryDetailModel = {\r\n\t\t\tentityType: UMB_DICTIONARY_ENTITY_TYPE,\r\n\t\t\tunique: data.id,\r\n\t\t\tname: data.name,\r\n\t\t\ttranslations: data.translations,\r\n\t\t};\r\n\r\n\t\treturn { data: dictionary };\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a new Dictionary on the server\r\n\t * @param {UmbDictionaryDetailModel} model\r\n\t * @param parentUnique\r\n\t * @returns {*}\r\n\t * @memberof UmbDictionaryServerDataSource\r\n\t */\r\n\tasync create(model: UmbDictionaryDetailModel, parentUnique: string | null) {\r\n\t\tif (!model) throw new Error('Dictionary is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: CreateDictionaryItemRequestModel = {\r\n\t\t\tid: model.unique,\r\n\t\t\tparent: parentUnique ? { id: parentUnique } : null,\r\n\t\t\tname: model.name,\r\n\t\t\ttranslations: model.translations,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDictionaryService.postDictionary({\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data && typeof data === 'string') {\r\n\t\t\treturn this.read(data);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a Dictionary on the server\r\n\t * @param {UmbDictionaryDetailModel} Dictionary\r\n\t * @param model\r\n\t * @returns {*}\r\n\t * @memberof UmbDictionaryServerDataSource\r\n\t */\r\n\tasync update(model: UmbDictionaryDetailModel) {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: UpdateDictionaryItemRequestModel = {\r\n\t\t\tname: model.name,\r\n\t\t\ttranslations: model.translations,\r\n\t\t};\r\n\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDictionaryService.putDictionaryById({\r\n\t\t\t\tpath: { id: model.unique },\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn this.read(model.unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a Dictionary on the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDictionaryServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDictionaryService.deleteDictionaryById({\r\n\t\t\t\tpath: { id: unique },\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbDictionaryDetailModel } from '../../types.js';\r\nimport { UmbDictionaryServerDataSource } from './dictionary-detail.server.data-source.js';\r\nimport { UMB_DICTIONARY_DETAIL_STORE_CONTEXT } from './dictionary-detail.store.context-token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbDictionaryDetailRepository extends UmbDetailRepositoryBase<UmbDictionaryDetailModel> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbDictionaryServerDataSource, UMB_DICTIONARY_DETAIL_STORE_CONTEXT);\r\n\t}\r\n}\r\n\r\nexport { UmbDictionaryDetailRepository as api };\r\n"],"names":["UmbDictionaryServerDataSource","#host","host","UMB_DICTIONARY_ENTITY_TYPE","UmbId","unique","data","error","tryExecute","DictionaryService","model","parentUnique","body","UmbDictionaryDetailRepository","UmbDetailRepositoryBase","UMB_DICTIONARY_DETAIL_STORE_CONTEXT"],"mappings":";;;;;AAiBO,MAAMA,EAAuF;AAAA,EACnGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,MAAM,iBAAiB;AAQtB,WAAO,EAAE,MAP8B;AAAA,MACtC,YAAYC;AAAA,MACZ,QAAQC,EAAM,IAAI;AAAA,MAClB,MAAM;AAAA,MACN,cAAc,CAAA;AAAA,IACf,EAEc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASf,MAAM,KAAKC,GAAgB;AAC1B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAEhD,UAAM,EAAE,MAAAC,GAAM,OAAAC,EAAA,IAAU,MAAMC,EAAW,KAAKP,IAAOQ,EAAkB,kBAAkB,EAAE,MAAM,EAAE,IAAIJ,EAAO,EAAG,CAAA,CAAC;AAE9G,WAAAE,KAAS,CAACD,IACN,EAAE,OAAAC,EAAM,IAWT,EAAE,MAPoC;AAAA,MAC5C,YAAYJ;AAAA,MACZ,QAAQG,EAAK;AAAA,MACb,MAAMA,EAAK;AAAA,MACX,cAAcA,EAAK;AAAA,IACpB,EAE0B;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU3B,MAAM,OAAOI,GAAiCC,GAA6B;AAC1E,QAAI,CAACD,EAAa,OAAA,IAAI,MAAM,uBAAuB;AAGnD,UAAME,IAAyC;AAAA,MAC9C,IAAIF,EAAM;AAAA,MACV,QAAQC,IAAe,EAAE,IAAIA,EAAiB,IAAA;AAAA,MAC9C,MAAMD,EAAM;AAAA,MACZ,cAAcA,EAAM;AAAA,IACrB,GAEM,EAAE,MAAAJ,GAAM,OAAAC,EAAM,IAAI,MAAMC;AAAA,MAC7B,KAAKP;AAAA,MACLQ,EAAkB,eAAe;AAAA,QAChC,MAAAG;AAAA,MACA,CAAA;AAAA,IACF;AAEI,WAAAN,KAAQ,OAAOA,KAAS,WACpB,KAAK,KAAKA,CAAI,IAGf,EAAE,OAAAC,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUhB,MAAM,OAAOG,GAAiC;AAC7C,QAAI,CAACA,EAAM,OAAc,OAAA,IAAI,MAAM,mBAAmB;AAGtD,UAAME,IAAyC;AAAA,MAC9C,MAAMF,EAAM;AAAA,MACZ,cAAcA,EAAM;AAAA,IACrB,GAEM,EAAE,OAAAH,EAAM,IAAI,MAAMC;AAAA,MACvB,KAAKP;AAAA,MACLQ,EAAkB,kBAAkB;AAAA,QACnC,MAAM,EAAE,IAAIC,EAAM,OAAO;AAAA,QACzB,MAAAE;AAAA,MACA,CAAA;AAAA,IACF;AAEA,WAAKL,IAIE,EAAE,OAAAA,EAAM,IAHP,KAAK,KAAKG,EAAM,MAAM;AAAA,EAGf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,MAAM,OAAOL,GAAgB;AAC5B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAEzC,WAAAG;AAAA,MACN,KAAKP;AAAA,MACLQ,EAAkB,qBAAqB;AAAA,QACtC,MAAM,EAAE,IAAIJ,EAAO;AAAA,MACnB,CAAA;AAAA,IACF;AAAA,EAAA;AAEF;AChJO,MAAMQ,UAAsCC,EAAkD;AAAA,EACpG,YAAYZ,GAAyB;AAC9B,UAAAA,GAAMF,GAA+Be,CAAmC;AAAA,EAAA;AAEhF;"}