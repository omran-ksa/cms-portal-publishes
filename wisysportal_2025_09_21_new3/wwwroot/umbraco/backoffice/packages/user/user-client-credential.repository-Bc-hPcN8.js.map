{"version":3,"file":"user-client-credential.repository-Bc-hPcN8.js","sources":["../../../src/packages/user/user/client-credential/repository/data-source/user-client-credential.server.data-source.ts","../../../src/packages/user/user/client-credential/repository/user-client-credential.repository.ts"],"sourcesContent":["import type {\r\n\tUmbCreateUserClientCredentialRequestArgs,\r\n\tUmbDeleteUserClientCredentialRequestArgs,\r\n\tUmbUserClientCredentialRequestArgs,\r\n} from '../types.js';\r\nimport type { UmbUserClientCredentialDataSource } from './types.js';\r\nimport { UserService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * Server data source for user client credentials\r\n * @export\r\n * @class UmbUserClientCredentialServerDataSource\r\n * @implements {UmbUserClientCredentialDataSource}\r\n */\r\nexport class UmbUserClientCredentialServerDataSource implements UmbUserClientCredentialDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new client credentials for a user\r\n\t * @param {UmbCreateUserClientCredentialRequestArgs} args - The user and client to create the credentials for\r\n\t * @returns {*}\r\n\t * @memberof UmbUserClientCredentialServerDataSource\r\n\t */\r\n\tasync create(args: UmbCreateUserClientCredentialRequestArgs) {\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tUserService.postUserByIdClientCredentials({\r\n\t\t\t\tpath: { id: args.user.unique },\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tclientId: args.client.unique,\r\n\t\t\t\t\tclientSecret: args.client.secret,\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn { data: { unique: args.client.unique } };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the client credentials for a user\r\n\t * @param {UmbUserClientCredentialRequestArgs} args - The user to read the credentials for\r\n\t * @returns {*}\r\n\t * @memberof UmbUserClientCredentialServerDataSource\r\n\t */\r\n\tasync read(args: UmbUserClientCredentialRequestArgs) {\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tUserService.getUserByIdClientCredentials({\r\n\t\t\t\tpath: { id: args.user.unique },\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data) {\r\n\t\t\tconst credentials = data.map((clientId) => ({\r\n\t\t\t\tunique: clientId,\r\n\t\t\t}));\r\n\r\n\t\t\treturn { data: credentials };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the client credentials for a user\r\n\t * @param {UmbDeleteUserClientCredentialRequestArgs} args - The user and client unique to delete the credentials for\r\n\t * @returns {*}\r\n\t * @memberof UmbUserClientCredentialServerDataSource\r\n\t */\r\n\tdelete(args: UmbDeleteUserClientCredentialRequestArgs) {\r\n\t\treturn tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tUserService.deleteUserByIdClientCredentialsByClientId({\r\n\t\t\t\tpath: { id: args.user.unique, clientId: args.client.unique },\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbUserClientCredentialDataSource } from './data-source/index.js';\r\nimport { UmbUserClientCredentialServerDataSource } from './data-source/user-client-credential.server.data-source.js';\r\nimport type {\r\n\tUmbCreateUserClientCredentialRequestArgs,\r\n\tUmbDeleteUserClientCredentialRequestArgs,\r\n\tUmbUserClientCredentialRequestArgs,\r\n} from './types.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\n/**\r\n * UmbUserClientCredentialRepository\r\n * @export\r\n * @class UmbUserClientCredentialRepository\r\n * @augments {UmbRepositoryBase}\r\n */\r\nexport class UmbUserClientCredentialRepository extends UmbRepositoryBase {\r\n\t#source: UmbUserClientCredentialDataSource;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbUserClientCredentialRepository.\r\n\t * @param {UmbControllerHost} host - The controller host\r\n\t * @memberof UmbUserClientCredentialRepository\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.#source = new UmbUserClientCredentialServerDataSource(host);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new client credentials for a user\r\n\t * @param {UmbCreateUserClientCredentialRequestArgs} args - The user and client to create the credentials for\r\n\t * @returns {*}\r\n\t * @memberof UmbUserClientCredentialRepository\r\n\t */\r\n\tasync requestCreate(args: UmbCreateUserClientCredentialRequestArgs) {\r\n\t\treturn this.#source.create(args);\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the client credentials for a user\r\n\t * @param {UmbUserClientCredentialRequestArgs} args - The user to read the credentials for\r\n\t * @returns {*}\r\n\t * @memberof UmbUserClientCredentialRepository\r\n\t */\r\n\tasync requestClientCredentials(args: UmbUserClientCredentialRequestArgs) {\r\n\t\treturn this.#source.read(args);\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the client credentials for a user\r\n\t * @param {UmbDeleteUserClientCredentialRequestArgs} args - The user and client unique to delete the credentials for\r\n\t * @returns {*}\r\n\t * @memberof UmbUserClientCredentialRepository\r\n\t */\r\n\tasync requestDelete(args: UmbDeleteUserClientCredentialRequestArgs) {\r\n\t\treturn this.#source.delete(args);\r\n\t}\r\n}\r\n\r\nexport { UmbUserClientCredentialRepository as api };\r\n"],"names":["UmbUserClientCredentialServerDataSource","#host","host","args","error","tryExecute","UserService","data","clientId","UmbUserClientCredentialRepository","UmbRepositoryBase","#source"],"mappings":";;;AAgBO,MAAMA,EAAqF;AAAA,EACjGC;AAAA,EAEA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,OAAOC,GAAgD;AACtD,UAAA,EAAE,OAAAC,EAAM,IAAI,MAAMC;AAAA,MACvB,KAAKJ;AAAA,MACLK,EAAY,8BAA8B;AAAA,QACzC,MAAM,EAAE,IAAIH,EAAK,KAAK,OAAO;AAAA,QAC7B,MAAM;AAAA,UACL,UAAUA,EAAK,OAAO;AAAA,UACtB,cAAcA,EAAK,OAAO;AAAA,QAAA;AAAA,MAE3B,CAAA;AAAA,IACF;AAEA,WAAKC,IAIE,EAAE,OAAAA,EAAM,IAHP,EAAE,MAAM,EAAE,QAAQD,EAAK,OAAO,SAAS;AAAA,EAGhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,MAAM,KAAKA,GAA0C;AACpD,UAAM,EAAE,MAAAI,GAAM,OAAAH,EAAM,IAAI,MAAMC;AAAA,MAC7B,KAAKJ;AAAA,MACLK,EAAY,6BAA6B;AAAA,QACxC,MAAM,EAAE,IAAIH,EAAK,KAAK,OAAO;AAAA,MAC7B,CAAA;AAAA,IACF;AAEA,WAAII,IAKI,EAAE,MAJWA,EAAK,IAAI,CAACC,OAAc;AAAA,MAC3C,QAAQA;AAAA,IAAA,EACP,EAEyB,IAGrB,EAAE,OAAAJ,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,OAAOD,GAAgD;AAC/C,WAAAE;AAAA,MACN,KAAKJ;AAAA,MACLK,EAAY,0CAA0C;AAAA,QACrD,MAAM,EAAE,IAAIH,EAAK,KAAK,QAAQ,UAAUA,EAAK,OAAO,OAAO;AAAA,MAC3D,CAAA;AAAA,IACF;AAAA,EAAA;AAEF;ACvEO,MAAMM,UAA0CC,EAAkB;AAAA,EACxEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYT,GAAyB;AACpC,UAAMA,CAAI,GACL,KAAAS,KAAU,IAAIX,EAAwCE,CAAI;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShE,MAAM,cAAcC,GAAgD;AAC5D,WAAA,KAAKQ,GAAQ,OAAOR,CAAI;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShC,MAAM,yBAAyBA,GAA0C;AACjE,WAAA,KAAKQ,GAAQ,KAAKR,CAAI;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS9B,MAAM,cAAcA,GAAgD;AAC5D,WAAA,KAAKQ,GAAQ,OAAOR,CAAI;AAAA,EAAA;AAEjC;"}