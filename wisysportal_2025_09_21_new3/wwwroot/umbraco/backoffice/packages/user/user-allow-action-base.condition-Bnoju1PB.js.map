{"version":3,"file":"user-allow-action-base.condition-Bnoju1PB.js","sources":["../../../src/packages/user/user/conditions/user-allow-action-base.condition.ts"],"sourcesContent":["import type { UmbUserStateEnum } from '../types.js';\r\nimport { UMB_USER_WORKSPACE_CONTEXT } from '../workspace/user/user-workspace.context-token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { isCurrentUser } from '@umbraco-cms/backoffice/current-user';\r\nimport type {\r\n\tUmbConditionConfigBase,\r\n\tUmbConditionControllerArguments,\r\n\tUmbExtensionCondition,\r\n} from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbConditionBase } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { observeMultiple } from '@umbraco-cms/backoffice/observable-api';\r\n\r\nexport abstract class UmbUserActionConditionBase\r\n\textends UmbConditionBase<UmbConditionConfigBase>\r\n\timplements UmbExtensionCondition\r\n{\r\n\t/**\r\n\t * The unique identifier of the user being edited\r\n\t * @protected\r\n\t * @type {string}\r\n\t * @memberof UmbUserActionConditionBase\r\n\t */\r\n\tprotected userUnique?: string;\r\n\r\n\t/**\r\n\t * The state of the user being edited\r\n\t * @protected\r\n\t * @type {(UmbUserStateEnum | null)}\r\n\t * @memberof UmbUserActionConditionBase\r\n\t */\r\n\tprotected userState?: UmbUserStateEnum | null;\r\n\r\n\t/**\r\n\t * The kind of user being edited\r\n\t * @protected\r\n\t * @type {string}\r\n\t * @memberof UmbUserActionConditionBase\r\n\t */\r\n\tprotected userKind?: string;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbUserActionConditionBase.\r\n\t * @param {UmbControllerHost} host The host controller\r\n\t * @param {UmbConditionControllerArguments<UmbConditionConfigBase>} args The condition arguments\r\n\t * @memberof UmbUserActionConditionBase\r\n\t */\r\n\tconstructor(host: UmbControllerHost, args: UmbConditionControllerArguments<UmbConditionConfigBase>) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis.consumeContext(UMB_USER_WORKSPACE_CONTEXT, (context) => {\r\n\t\t\tif (context) {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tobserveMultiple([context.unique, context.state, context.kind]),\r\n\t\t\t\t\t([unique, state, kind]) => {\r\n\t\t\t\t\t\tthis.userUnique = unique ?? undefined;\r\n\t\t\t\t\t\tthis.userState = state;\r\n\t\t\t\t\t\tthis.userKind = kind;\r\n\t\t\t\t\t\tthis._onUserDataChange();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'_umbActiveUser',\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.removeUmbControllerByAlias('_umbActiveUser');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the current user is the same as the user being edited\r\n\t * @protected\r\n\t * @returns {Promise<boolean>}\r\n\t * @memberof UmbUserActionConditionBase\r\n\t */\r\n\tprotected async isCurrentUser() {\r\n\t\treturn this.userUnique ? isCurrentUser(this._host, this.userUnique) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Called when the user data changes\r\n\t * @protected\r\n\t * @memberof UmbUserActionConditionBase\r\n\t */\r\n\tprotected abstract _onUserDataChange(): Promise<void>;\r\n}\r\n"],"names":["UmbUserActionConditionBase","UmbConditionBase","host","args","UMB_USER_WORKSPACE_CONTEXT","context","observeMultiple","unique","state","kind","isCurrentUser"],"mappings":";;;;AAYO,MAAeA,UACbC,EAET;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BC,YAAYC,GAAyBC,GAA+D;AACnG,UAAMD,GAAMC,CAAI,GAEX,KAAA,eAAeC,GAA4B,CAACC,MAAY;AAC5D,MAAIA,IACE,KAAA;AAAA,QACJC,EAAgB,CAACD,EAAQ,QAAQA,EAAQ,OAAOA,EAAQ,IAAI,CAAC;AAAA,QAC7D,CAAC,CAACE,GAAQC,GAAOC,CAAI,MAAM;AAC1B,eAAK,aAAaF,KAAU,QAC5B,KAAK,YAAYC,GACjB,KAAK,WAAWC,GAChB,KAAK,kBAAkB;AAAA,QACxB;AAAA,QACA;AAAA,MACD,IAEA,KAAK,2BAA2B,gBAAgB;AAAA,IACjD,CACA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASF,MAAgB,gBAAgB;AAC/B,WAAO,KAAK,aAAaC,EAAc,KAAK,OAAO,KAAK,UAAU,IAAI;AAAA,EAAA;AASxE;"}