{"version":3,"file":"group-id.condition-DGFTVzWm.js","sources":["../../../src/packages/user/current-user/conditions/group-id/group-id.condition.ts"],"sourcesContent":["import { UMB_CURRENT_USER_CONTEXT } from '../../current-user.context.token.js';\r\nimport type { UmbCurrentUserModel } from '../../types.js';\r\nimport type { UmbCurrentUserGroupIdConditionConfig } from './types.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbConditionControllerArguments, UmbExtensionCondition } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbConditionBase } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class UmbCurrentUserGroupCondition\r\n\textends UmbConditionBase<UmbCurrentUserGroupIdConditionConfig>\r\n\timplements UmbExtensionCondition\r\n{\r\n\tconstructor(host: UmbControllerHost, args: UmbConditionControllerArguments<UmbCurrentUserGroupIdConditionConfig>) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis.consumeContext(UMB_CURRENT_USER_CONTEXT, (context) => {\r\n\t\t\tthis.observe(context?.currentUser, this.observeCurrentUser, 'umbCurrentUserGroupConditionObserver');\r\n\t\t});\r\n\t}\r\n\r\n\tprivate observeCurrentUser = async (currentUser: UmbCurrentUserModel) => {\r\n\t\t// Idea: This part could be refactored to become a shared util, to align these matching feature across conditions. [NL]\r\n\t\t// Notice doing so it would be interesting to invistigate if it makes sense to combine some of these properties, to enable more specific matching. (But maybe it is only relevant for the combination of match + oneOf) [NL]\r\n\t\tconst { match, oneOf, allOf, noneOf } = this.config;\r\n\r\n\t\tif (match) {\r\n\t\t\tthis.permitted = currentUser.userGroupUniques.includes(match);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (oneOf) {\r\n\t\t\tthis.permitted = oneOf.some((v) => currentUser.userGroupUniques.includes(v));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (allOf) {\r\n\t\t\tthis.permitted = allOf.every((v) => currentUser.userGroupUniques.includes(v));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (noneOf) {\r\n\t\t\tif (noneOf.some((v) => currentUser.userGroupUniques.includes(v))) {\r\n\t\t\t\tthis.permitted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.permitted = true;\r\n\t};\r\n}\r\n\r\nexport { UmbCurrentUserGroupCondition as api };\r\n"],"names":["UmbCurrentUserGroupCondition","UmbConditionBase","host","args","currentUser","match","oneOf","allOf","noneOf","v","UMB_CURRENT_USER_CONTEXT","context"],"mappings":";;AAOO,MAAMA,UACJC,EAET;AAAA,EACC,YAAYC,GAAyBC,GAA6E;AACjH,UAAMD,GAAMC,CAAI,GAOT,KAAA,qBAAqB,OAAOC,MAAqC;AAGxE,YAAM,EAAE,OAAAC,GAAO,OAAAC,GAAO,OAAAC,GAAO,QAAAC,EAAA,IAAW,KAAK;AAE7C,UAAIH,GAAO;AACV,aAAK,YAAYD,EAAY,iBAAiB,SAASC,CAAK;AAC5D;AAAA,MAAA;AAGD,UAAIC,GAAO;AACL,aAAA,YAAYA,EAAM,KAAK,CAACG,MAAML,EAAY,iBAAiB,SAASK,CAAC,CAAC;AAC3E;AAAA,MAAA;AAGD,UAAIF,GAAO;AACL,aAAA,YAAYA,EAAM,MAAM,CAACE,MAAML,EAAY,iBAAiB,SAASK,CAAC,CAAC;AAC5E;AAAA,MAAA;AAGD,UAAID,KACCA,EAAO,KAAK,CAACC,MAAML,EAAY,iBAAiB,SAASK,CAAC,CAAC,GAAG;AACjE,aAAK,YAAY;AACjB;AAAA,MAAA;AAIF,WAAK,YAAY;AAAA,IAClB,GAjCM,KAAA,eAAeC,GAA0B,CAACC,MAAY;AAC1D,WAAK,QAAQA,GAAS,aAAa,KAAK,oBAAoB,sCAAsC;AAAA,IAAA,CAClG;AAAA,EAAA;AAgCH;"}