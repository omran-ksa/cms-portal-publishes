{"version":3,"file":"index.js","sources":["../../../../src/packages/user/user/repository/new-password/constants.ts","../../../../src/packages/user/user/utils/is-user.function.ts","../../../../src/packages/user/user/conditions/allow-enable/constants.ts"],"sourcesContent":["export const UMB_NEW_USER_PASSWORD_REPOSITORY_ALIAS = 'Umb.Repository.User.NewPassword';\r\n","import { UmbUserDetailRepository } from '../repository/index.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\n/**\r\n * Check if the user is an admin\r\n * @param {UmbControllerHost} host - The controller host\r\n * @param {string} userUnique - The user unique identifier\r\n * @returns {Promise<boolean>} - The result\r\n */\r\nexport const isUserAdmin = async (host: UmbControllerHost, userUnique: string) => {\r\n\tconst repository = new UmbUserDetailRepository(host);\r\n\tconst { data: user } = await repository.requestByUnique(userUnique);\r\n\r\n\treturn user?.isAdmin ?? false;\r\n};\r\n","export const UMB_USER_ALLOW_ENABLE_CONDITION_ALIAS = 'Umb.Condition.User.AllowEnableAction';\r\n"],"names":["UMB_NEW_USER_PASSWORD_REPOSITORY_ALIAS","isUserAdmin","host","userUnique","repository","UmbUserDetailRepository","user","UMB_USER_ALLOW_ENABLE_CONDITION_ALIAS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAMA,IAAyC,mCCSzCC,IAAc,OAAOC,GAAyBC,MAAuB;AAC3E,QAAAC,IAAa,IAAIC,EAAwBH,CAAI,GAC7C,EAAE,MAAMI,EAAA,IAAS,MAAMF,EAAW,gBAAgBD,CAAU;AAElE,SAAOG,GAAM,WAAW;AACzB,GCdaC,IAAwC;"}