{"version":3,"file":"current-user-mfa-modal.element-z3hX78aU.js","sources":["../../../src/packages/user/current-user/modals/current-user-mfa/current-user-mfa-modal.element.ts"],"sourcesContent":["import { UMB_CURRENT_USER_MFA_ENABLE_PROVIDER_MODAL } from '../current-user-mfa-enable/current-user-mfa-enable-modal.token.js';\r\nimport { UmbCurrentUserRepository } from '../../repository/index.js';\r\nimport { UMB_CURRENT_USER_MFA_DISABLE_PROVIDER_MODAL } from '../current-user-mfa-disable/current-user-mfa-disable-modal.token.js';\r\nimport type { UmbCurrentUserMfaProviderModel } from '../../types.js';\r\nimport { css, customElement, html, nothing, property, repeat, state, when } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { umbOpenModal, type UmbModalContext } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { mergeObservables } from '@umbraco-cms/backoffice/observable-api';\r\n\r\ntype UmbMfaLoginProviderOption = UmbCurrentUserMfaProviderModel & {\r\n\tdisplayName: string;\r\n\texistsOnServer: boolean;\r\n};\r\n\r\n@customElement('umb-current-user-mfa-modal')\r\nexport class UmbCurrentUserMfaModalElement extends UmbLitElement {\r\n\t@property({ attribute: false })\r\n\tmodalContext?: UmbModalContext;\r\n\r\n\t@state()\r\n\t_items: Array<UmbMfaLoginProviderOption> = [];\r\n\r\n\t#currentUserRepository = new UmbCurrentUserRepository(this);\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.#loadProviders();\r\n\t}\r\n\r\n\tasync #loadProviders() {\r\n\t\tconst serverLoginProviders$ = (await this.#currentUserRepository.requestMfaLoginProviders()).asObservable();\r\n\t\tconst manifestLoginProviders$ = umbExtensionsRegistry.byType('mfaLoginProvider');\r\n\r\n\t\t// Merge the server and manifest providers to get the final list of providers\r\n\t\tconst mfaLoginProviders$ = mergeObservables(\r\n\t\t\t[serverLoginProviders$, manifestLoginProviders$],\r\n\t\t\t([serverLoginProviders, manifestLoginProviders]) => {\r\n\t\t\t\treturn manifestLoginProviders.map((manifestLoginProvider) => {\r\n\t\t\t\t\tconst serverLoginProvider = serverLoginProviders.find(\r\n\t\t\t\t\t\t(serverLoginProvider) => serverLoginProvider.providerName === manifestLoginProvider.forProviderName,\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\texistsOnServer: !!serverLoginProvider,\r\n\t\t\t\t\t\tisEnabledOnUser: serverLoginProvider?.isEnabledOnUser ?? false,\r\n\t\t\t\t\t\tproviderName: serverLoginProvider?.providerName ?? manifestLoginProvider.forProviderName,\r\n\t\t\t\t\t\tdisplayName:\r\n\t\t\t\t\t\t\tmanifestLoginProvider.meta?.label ?? serverLoginProvider?.providerName ?? manifestLoginProvider.name,\r\n\t\t\t\t\t} satisfies UmbMfaLoginProviderOption;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tmfaLoginProviders$,\r\n\t\t\t(providers) => {\r\n\t\t\t\tthis._items = providers;\r\n\t\t\t},\r\n\t\t\t'_mfaLoginProviders',\r\n\t\t);\r\n\t}\r\n\r\n\t#close() {\r\n\t\tthis.modalContext?.submit();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-body-layout headline=\"${this.localize.term('member_2fa')}\">\r\n\t\t\t\t<div id=\"main\">\r\n\t\t\t\t\t${when(\r\n\t\t\t\t\t\tthis._items.length > 0,\r\n\t\t\t\t\t\t() => html`\r\n\t\t\t\t\t\t\t${repeat(\r\n\t\t\t\t\t\t\t\tthis._items,\r\n\t\t\t\t\t\t\t\t(item) => item.providerName,\r\n\t\t\t\t\t\t\t\t(item) => this.#renderProvider(item),\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t`,\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div slot=\"actions\">\r\n\t\t\t\t\t<uui-button @click=${this.#close} look=\"secondary\" .label=${this.localize.term('general_close')}></uui-button>\r\n\t\t\t\t</div>\r\n\t\t\t</umb-body-layout>\r\n\t\t`;\r\n\t}\r\n\r\n\t/**\r\n\t * Render a provider with a toggle to enable/disable it\r\n\t * @param item\r\n\t */\r\n\t#renderProvider(item: UmbMfaLoginProviderOption) {\r\n\t\treturn html`\r\n\t\t\t<uui-box headline=${item.displayName}>\r\n\t\t\t\t${when(\r\n\t\t\t\t\titem.existsOnServer,\r\n\t\t\t\t\t() => nothing,\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t\thtml`<div style=\"position:relative\" slot=\"header-actions\">\r\n\t\t\t\t\t\t\t<uui-badge\r\n\t\t\t\t\t\t\t\tstyle=\"cursor:default\"\r\n\t\t\t\t\t\t\t\ttitle=\"Warning: This provider is not configured on the server\"\r\n\t\t\t\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\t\t\t\tlook=\"primary\">\r\n\t\t\t\t\t\t\t\t!\r\n\t\t\t\t\t\t\t</uui-badge>\r\n\t\t\t\t\t\t</div>`,\r\n\t\t\t\t)}\r\n\t\t\t\t${when(\r\n\t\t\t\t\titem.isEnabledOnUser,\r\n\t\t\t\t\t() => html`\r\n\t\t\t\t\t\t<p style=\"margin-top:0\">\r\n\t\t\t\t\t\t\t<umb-localize key=\"user_2faProviderIsEnabled\">This two-factor provider is enabled</umb-localize>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<uui-button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tlook=\"secondary\"\r\n\t\t\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\t\t\t.label=${this.localize.term('actions_disable')}\r\n\t\t\t\t\t\t\t@click=${() => this.#onProviderDisable(item)}></uui-button>\r\n\t\t\t\t\t`,\r\n\t\t\t\t\t() => html`\r\n\t\t\t\t\t\t<uui-button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tlook=\"secondary\"\r\n\t\t\t\t\t\t\t?disabled=${!item.existsOnServer}\r\n\t\t\t\t\t\t\t.label=${this.localize.term('actions_enable')}\r\n\t\t\t\t\t\t\t@click=${() => this.#onProviderEnable(item)}></uui-button>\r\n\t\t\t\t\t`,\r\n\t\t\t\t)}\r\n\t\t\t</uui-box>\r\n\t\t`;\r\n\t}\r\n\r\n\t/**\r\n\t * Open the provider modal.\r\n\t * This will show the QR code and/or other means of validation for the given provider and return the activation code.\r\n\t * The activation code is then used to either enable the provider.\r\n\t * @param item\r\n\t */\r\n\tasync #onProviderEnable(item: UmbMfaLoginProviderOption) {\r\n\t\tawait umbOpenModal(this, UMB_CURRENT_USER_MFA_ENABLE_PROVIDER_MODAL, {\r\n\t\t\tdata: { providerName: item.providerName, displayName: item.displayName },\r\n\t\t}).catch(() => undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * Open the provider modal.\r\n\t * This will show the QR code and/or other means of validation for the given provider and return the activation code.\r\n\t * The activation code is then used to disable the provider.\r\n\t * @param item\r\n\t */\r\n\tasync #onProviderDisable(item: UmbMfaLoginProviderOption) {\r\n\t\tawait umbOpenModal(this, UMB_CURRENT_USER_MFA_DISABLE_PROVIDER_MODAL, {\r\n\t\t\tdata: { providerName: item.providerName, displayName: item.displayName },\r\n\t\t}).catch(() => undefined);\r\n\t}\r\n\r\n\tstatic override readonly styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\tuui-box {\r\n\t\t\t\tmargin-bottom: var(--uui-size-space-3);\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbCurrentUserMfaModalElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-current-user-mfa-modal': UmbCurrentUserMfaModalElement;\r\n\t}\r\n}\r\n"],"names":["_currentUserRepository","_UmbCurrentUserMfaModalElement_instances","loadProviders_fn","close_fn","renderProvider_fn","onProviderEnable_fn","onProviderDisable_fn","UmbCurrentUserMfaModalElement","UmbLitElement","__privateAdd","UmbCurrentUserRepository","__privateMethod","html","when","repeat","item","serverLoginProviders$","__privateGet","manifestLoginProviders$","umbExtensionsRegistry","mfaLoginProviders$","mergeObservables","serverLoginProviders","manifestLoginProviders","manifestLoginProvider","serverLoginProvider","providers","nothing","umbOpenModal","UMB_CURRENT_USER_MFA_ENABLE_PROVIDER_MODAL","UMB_CURRENT_USER_MFA_DISABLE_PROVIDER_MODAL","UmbTextStyles","css","__decorateClass","property","state","customElement","UmbCurrentUserMfaModalElement$1"],"mappings":"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"}