{"version":3,"file":"current-user.repository-CzsCrtUS.js","sources":["../../../src/packages/user/current-user/repository/current-user.server.data-source.ts","../../../src/packages/user/current-user/repository/current-user.repository.ts"],"sourcesContent":["import type { UmbCurrentUserModel } from '../types.js';\r\nimport { UserService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbManagementApiDataMapper } from '@umbraco-cms/backoffice/repository';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the current user that fetches data from the server\r\n * @class UmbCurrentUserServerDataSource\r\n */\r\nexport class UmbCurrentUserServerDataSource extends UmbControllerBase {\r\n\t#dataMapper = new UmbManagementApiDataMapper(this);\r\n\r\n\t/**\r\n\t * Get the current user\r\n\t * @returns {*}\r\n\t * @memberof UmbCurrentUserServerDataSource\r\n\t */\r\n\tasync getCurrentUser() {\r\n\t\tconst { data, error } = await tryExecute(this, UserService.getUserCurrent());\r\n\r\n\t\tif (data) {\r\n\t\t\tconst permissionDataPromises = data.permissions.map(async (item) => {\r\n\t\t\t\treturn this.#dataMapper.map({\r\n\t\t\t\t\tforDataModel: item.$type,\r\n\t\t\t\t\tdata: item,\r\n\t\t\t\t\tfallback: async () => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...item,\r\n\t\t\t\t\t\t\tpermissionType: 'unknown',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tconst permissions = await Promise.all(permissionDataPromises);\r\n\r\n\t\t\tconst user: UmbCurrentUserModel = {\r\n\t\t\t\tallowedSections: data.allowedSections,\r\n\t\t\t\tavatarUrls: data.avatarUrls,\r\n\t\t\t\tdocumentStartNodeUniques: data.documentStartNodeIds.map((node) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tunique: node.id,\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\t\temail: data.email,\r\n\t\t\t\tfallbackPermissions: data.fallbackPermissions,\r\n\t\t\t\thasAccessToAllLanguages: data.hasAccessToAllLanguages,\r\n\t\t\t\thasAccessToSensitiveData: data.hasAccessToSensitiveData,\r\n\t\t\t\thasDocumentRootAccess: data.hasDocumentRootAccess,\r\n\t\t\t\thasMediaRootAccess: data.hasMediaRootAccess,\r\n\t\t\t\tisAdmin: data.isAdmin,\r\n\t\t\t\tlanguageIsoCode: data.languageIsoCode || 'en-us', // TODO: make global variable\r\n\t\t\t\tlanguages: data.languages,\r\n\t\t\t\tmediaStartNodeUniques: data.mediaStartNodeIds.map((node) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tunique: node.id,\r\n\t\t\t\t\t};\r\n\t\t\t\t}),\r\n\t\t\t\tname: data.name,\r\n\t\t\t\tpermissions,\r\n\t\t\t\tunique: data.id,\r\n\t\t\t\tuserName: data.userName,\r\n\t\t\t\tuserGroupUniques: data.userGroupIds.map((group) => group.id),\r\n\t\t\t};\r\n\t\t\treturn { data: user };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current user's external login providers\r\n\t * @memberof UmbCurrentUserServerDataSource\r\n\t */\r\n\tasync getExternalLoginProviders() {\r\n\t\treturn tryExecute(this, UserService.getUserCurrentLoginProviders());\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current user's available MFA login providers\r\n\t * @memberof UmbCurrentUserServerDataSource\r\n\t */\r\n\tasync getMfaLoginProviders() {\r\n\t\tconst { data, error } = await tryExecute(this, UserService.getUserCurrent2Fa());\r\n\r\n\t\tif (data) {\r\n\t\t\treturn { data };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Enable an MFA provider\r\n\t * @param providerName\r\n\t * @param code\r\n\t * @param secret\r\n\t */\r\n\tasync enableMfaProvider(providerName: string, code: string, secret: string) {\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis,\r\n\t\t\tUserService.postUserCurrent2FaByProviderName({ path: { providerName }, body: { code, secret } }),\r\n\t\t);\r\n\r\n\t\tif (error) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Disable an MFA provider\r\n\t * @param providerName\r\n\t * @param code\r\n\t */\r\n\tasync disableMfaProvider(providerName: string, code: string) {\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis,\r\n\t\t\tUserService.deleteUserCurrent2FaByProviderName({ path: { providerName }, query: { code } }),\r\n\t\t);\r\n\r\n\t\tif (error) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Change the password for current user\r\n\t * @param id\r\n\t * @param newPassword\r\n\t * @param oldPassword\r\n\t * @param isCurrentUser\r\n\t * @returns\r\n\t */\r\n\tasync changePassword(newPassword: string, oldPassword: string) {\r\n\t\treturn tryExecute(\r\n\t\t\tthis,\r\n\t\t\tUserService.postUserCurrentChangePassword({\r\n\t\t\t\tbody: {\r\n\t\t\t\t\tnewPassword,\r\n\t\t\t\t\toldPassword,\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n}\r\n","import { UmbCurrentUserServerDataSource } from './current-user.server.data-source.js';\r\nimport { UMB_CURRENT_USER_STORE_CONTEXT } from './current-user.store.token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\n\r\n/**\r\n * A repository for the current user\r\n * @class UmbCurrentUserRepository\r\n * @augments {UmbRepositoryBase}\r\n */\r\nexport class UmbCurrentUserRepository extends UmbRepositoryBase {\r\n\t#currentUserSource = new UmbCurrentUserServerDataSource(this._host);\r\n\t#currentUserStore?: typeof UMB_CURRENT_USER_STORE_CONTEXT.TYPE;\r\n\t#init: Promise<unknown>;\r\n\tprotected notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#init = Promise.all([\r\n\t\t\tthis.consumeContext(UMB_CURRENT_USER_STORE_CONTEXT, (instance) => {\r\n\t\t\t\tif (instance) {\r\n\t\t\t\t\tthis.#currentUserStore = instance;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t\t.asPromise({ preventTimeout: true })\r\n\t\t\t\t// Ignore the error, we can assume that the flow was stopped (asPromise failed), but it does not mean that the consumption was not successful.\r\n\t\t\t\t.catch(() => undefined),\r\n\r\n\t\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\r\n\t\t\t\tthis.notificationContext = instance;\r\n\t\t\t})\r\n\t\t\t\t.asPromise({ preventTimeout: true })\r\n\t\t\t\t.catch(() => undefined),\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Request the current user\r\n\t * @returns {*}\r\n\t * @memberof UmbCurrentUserRepository\r\n\t */\r\n\tasync requestCurrentUser() {\r\n\t\tawait this.#init;\r\n\t\tconst { data, error } = await this.#currentUserSource.getCurrentUser();\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#currentUserStore?.set(data);\r\n\t\t}\r\n\r\n\t\treturn { data, error, asObservable: () => this.#currentUserStore!.data };\r\n\t}\r\n\r\n\t/**\r\n\t * Request the current user's external login providers\r\n\t * @memberof UmbCurrentUserRepository\r\n\t */\r\n\tasync requestExternalLoginProviders() {\r\n\t\tawait this.#init;\r\n\t\tconst { data, error } = await this.#currentUserSource.getExternalLoginProviders();\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#currentUserStore?.setExternalLoginProviders(data);\r\n\t\t}\r\n\r\n\t\treturn { data, error, asObservable: () => this.#currentUserStore!.externalLoginProviders };\r\n\t}\r\n\r\n\t/**\r\n\t * Request the current user's available MFA login providers\r\n\t * @memberof UmbCurrentUserRepository\r\n\t */\r\n\tasync requestMfaLoginProviders() {\r\n\t\tawait this.#init;\r\n\r\n\t\tconst { data, error } = await this.#currentUserSource.getMfaLoginProviders();\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#currentUserStore?.setMfaProviders(data);\r\n\t\t}\r\n\r\n\t\treturn { data, error, asObservable: () => this.#currentUserStore!.mfaProviders };\r\n\t}\r\n\r\n\t/**\r\n\t * Enable an MFA provider\r\n\t * @param provider The provider to enable\r\n\t * @param providerName\r\n\t * @param code The activation code of the provider to enable\r\n\t * @param secret\r\n\t * @memberof UmbCurrentUserRepository\r\n\t */\r\n\tasync enableMfaProvider(providerName: string, code: string, secret: string) {\r\n\t\tconst { error } = await this.#currentUserSource.enableMfaProvider(providerName, code, secret);\r\n\r\n\t\tif (error) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\tthis.#currentUserStore?.updateMfaProvider({ providerName, isEnabledOnUser: true });\r\n\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Disable an MFA provider\r\n\t * @param provider The provider to disable\r\n\t * @param providerName\r\n\t * @param code The activation code of the provider to disable\r\n\t * @memberof UmbCurrentUserRepository\r\n\t */\r\n\tasync disableMfaProvider(providerName: string, code: string) {\r\n\t\tconst { error } = await this.#currentUserSource.disableMfaProvider(providerName, code);\r\n\r\n\t\tif (error) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\tthis.#currentUserStore?.updateMfaProvider({ providerName, isEnabledOnUser: false });\r\n\r\n\t\treturn {};\r\n\t}\r\n\t/**\r\n\t * Change password for current user\r\n\t * @param userId\r\n\t * @param newPassword\r\n\t * @param oldPassword\r\n\t * @param isCurrentUser\r\n\t * @returns\r\n\t */\r\n\tasync changePassword(newPassword: string, oldPassword: string) {\r\n\t\tif (!newPassword) throw new Error('New password is missing');\r\n\t\tif (!oldPassword) throw new Error('Old password is missing');\r\n\r\n\t\tconst { data, error } = await this.#currentUserSource.changePassword(newPassword, oldPassword);\r\n\r\n\t\tif (!error) {\r\n\t\t\tconst notification = { data: { message: `Password changed` } };\r\n\t\t\tthis.notificationContext?.peek('positive', notification);\r\n\t\t}\r\n\r\n\t\treturn { data, error };\r\n\t}\r\n}\r\n\r\nexport default UmbCurrentUserRepository;\r\n"],"names":["UmbCurrentUserServerDataSource","UmbControllerBase","#dataMapper","UmbManagementApiDataMapper","data","error","tryExecute","UserService","permissionDataPromises","item","permissions","node","group","providerName","code","secret","newPassword","oldPassword","UmbCurrentUserRepository","UmbRepositoryBase","#currentUserSource","#currentUserStore","#init","host","UMB_CURRENT_USER_STORE_CONTEXT","instance","UMB_NOTIFICATION_CONTEXT","notification"],"mappings":"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"}