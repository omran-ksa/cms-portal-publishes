{"version":3,"file":"index.js","sources":["../../../src/packages/search/global-search/global-search-base.ts"],"sourcesContent":["import type {\r\n\tManifestGlobalSearch,\r\n\tManifestSearchProvider,\r\n\tUmbGlobalSearchApi,\r\n\tUmbSearchProvider,\r\n\tUmbSearchRequestArgs,\r\n} from '../types.js';\r\nimport { UmbExtensionApiInitializer } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\n\r\nexport abstract class UmbGlobalSearchBase<SearchProviderType extends UmbSearchProvider = UmbSearchProvider>\r\n\textends UmbControllerBase\r\n\timplements UmbGlobalSearchApi\r\n{\r\n\tprotected _manifest?: ManifestGlobalSearch;\r\n\tprotected _searchProvider?: SearchProviderType;\r\n\t#initResolver?: () => void;\r\n\t#initialized = false;\r\n\r\n\tprotected _init = new Promise<void>((resolve) => {\r\n\t\tif (this.#initialized) {\r\n\t\t\tresolve();\r\n\t\t} else {\r\n\t\t\tthis.#initResolver = resolve;\r\n\t\t}\r\n\t});\r\n\r\n\t#checkIfInitialized() {\r\n\t\tif (this._searchProvider) {\r\n\t\t\tthis.#initialized = true;\r\n\t\t\tthis.#initResolver?.();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic set manifest(manifest: ManifestGlobalSearch | undefined) {\r\n\t\tif (this._manifest === manifest) return;\r\n\t\tthis._manifest = manifest;\r\n\t\tthis.#observeSearchProvider(this._manifest?.meta.searchProviderAlias);\r\n\t}\r\n\tpublic get manifest() {\r\n\t\treturn this._manifest;\r\n\t}\r\n\r\n\t#observeSearchProvider(alias?: string) {\r\n\t\tif (!alias) throw new Error('Search provider alias is required');\r\n\r\n\t\tnew UmbExtensionApiInitializer<ManifestSearchProvider>(\r\n\t\t\tthis,\r\n\t\t\tumbExtensionsRegistry,\r\n\t\t\talias,\r\n\t\t\t[this],\r\n\t\t\t(permitted, ctrl) => {\r\n\t\t\t\tthis._searchProvider = permitted ? ctrl.api : undefined;\r\n\t\t\t\tthis.#checkIfInitialized();\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\tasync search(args: UmbSearchRequestArgs) {\r\n\t\tawait this._init;\r\n\r\n\t\tif (!this._searchProvider) {\r\n\t\t\tthrow new Error('Search provider is not available');\r\n\t\t}\r\n\r\n\t\treturn await this._searchProvider.search({ query: args.query });\r\n\t}\r\n}\r\n"],"names":["UmbGlobalSearchBase","UmbControllerBase","#initialized","resolve","#initResolver","#checkIfInitialized","manifest","#observeSearchProvider","alias","UmbExtensionApiInitializer","umbExtensionsRegistry","permitted","ctrl","args"],"mappings":";;;;;AAWO,MAAeA,UACbC,EAET;AAAA,EAHO,cAAA;AAAA,UAAA,GAAA,SAAA,GAOS,KAAAC,KAAA,IAEf,KAAU,QAAQ,IAAI,QAAc,CAACC,MAAY;AAChD,MAAI,KAAKD,KACAC,EAAA,IAER,KAAKC,KAAgBD;AAAA,IACtB,CACA;AAAA,EAAA;AAAA,EATDC;AAAA,EACAF;AAAA,EAUAG,KAAsB;AACrB,IAAI,KAAK,oBACR,KAAKH,KAAe,IACpB,KAAKE,KAAgB;AAAA,EACtB;AAAA,EAGD,IAAW,SAASE,GAA4C;AAC3D,IAAA,KAAK,cAAcA,MACvB,KAAK,YAAYA,GACjB,KAAKC,GAAuB,KAAK,WAAW,KAAK,mBAAmB;AAAA,EAAA;AAAA,EAErE,IAAW,WAAW;AACrB,WAAO,KAAK;AAAA,EAAA;AAAA,EAGbA,GAAuBC,GAAgB;AACtC,QAAI,CAACA,EAAa,OAAA,IAAI,MAAM,mCAAmC;AAE3D,QAAAC;AAAA,MACH;AAAA,MACAC;AAAA,MACAF;AAAA,MACA,CAAC,IAAI;AAAA,MACL,CAACG,GAAWC,MAAS;AACf,aAAA,kBAAkBD,IAAYC,EAAK,MAAM,QAC9C,KAAKP,GAAoB;AAAA,MAAA;AAAA,IAE3B;AAAA,EAAA;AAAA,EAGD,MAAM,OAAOQ,GAA4B;AAGpC,QAFJ,MAAM,KAAK,OAEP,CAAC,KAAK;AACH,YAAA,IAAI,MAAM,kCAAkC;AAG5C,WAAA,MAAM,KAAK,gBAAgB,OAAO,EAAE,OAAOA,EAAK,OAAO;AAAA,EAAA;AAEhE;"}