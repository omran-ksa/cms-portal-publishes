{"version":3,"file":"input-block-type.element-CMYE0OTx.js","sources":["../../../src/packages/block/block-type/components/block-type-card/block-type-card.element.ts","../../../src/packages/block/block-type/components/input-block-type/input-block-type.element.ts"],"sourcesContent":["import {\r\n\tUMB_DOCUMENT_TYPE_ITEM_REPOSITORY_ALIAS,\r\n\ttype UmbDocumentTypeItemModel,\r\n} from '@umbraco-cms/backoffice/document-type';\r\nimport { html, customElement, property, state, ifDefined } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbRepositoryItemsManager } from '@umbraco-cms/backoffice/repository';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { transformServerPathToClientPath } from '@umbraco-cms/backoffice/utils';\r\nimport { UUICardEvent } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UMB_SERVER_CONTEXT } from '@umbraco-cms/backoffice/server';\r\n\r\n@customElement('umb-block-type-card')\r\nexport class UmbBlockTypeCardElement extends UmbLitElement {\r\n\t//\r\n\t#init: Promise<unknown>;\r\n\t#serverUrl: string = '';\r\n\r\n\treadonly #itemManager = new UmbRepositoryItemsManager<UmbDocumentTypeItemModel>(\r\n\t\tthis,\r\n\t\tUMB_DOCUMENT_TYPE_ITEM_REPOSITORY_ALIAS,\r\n\t);\r\n\r\n\t@property({ type: String })\r\n\thref?: string;\r\n\r\n\t@property({ type: String, attribute: false })\r\n\tpublic set iconFile(value: string) {\r\n\t\tvalue = transformServerPathToClientPath(value);\r\n\t\tif (value) {\r\n\t\t\tthis.#init.then(() => {\r\n\t\t\t\tconst url = new URL(value, this.#serverUrl);\r\n\t\t\t\tthis._iconFile = url.href;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis._iconFile = undefined;\r\n\t\t}\r\n\t}\r\n\tpublic get iconFile(): string | undefined {\r\n\t\treturn this._iconFile;\r\n\t}\r\n\r\n\t@state()\r\n\tprivate _iconFile?: string | undefined;\r\n\r\n\t@property({ type: String, attribute: false })\r\n\ticonColor?: string;\r\n\r\n\t@property({ type: String, attribute: false })\r\n\tbackgroundColor?: string;\r\n\r\n\t// TODO: support custom icon/image file\r\n\r\n\t@property({ type: String, attribute: false })\r\n\tpublic set contentElementTypeKey(value: string | undefined) {\r\n\t\tthis._elementTypeKey = value;\r\n\t\tif (value) {\r\n\t\t\tthis.#itemManager.setUniques([value]);\r\n\t\t} else {\r\n\t\t\tthis.#itemManager.setUniques([]);\r\n\t\t}\r\n\t}\r\n\tpublic get contentElementTypeKey(): string | undefined {\r\n\t\treturn this._elementTypeKey;\r\n\t}\r\n\tprivate _elementTypeKey?: string;\r\n\r\n\t@state()\r\n\t_name = '';\r\n\r\n\t@state()\r\n\t_description?: string;\r\n\r\n\t@state()\r\n\t_fallbackIcon?: string | null;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.#init = this.consumeContext(UMB_SERVER_CONTEXT, (instance) => {\r\n\t\t\tthis.#serverUrl = instance?.getServerUrl() ?? '';\r\n\t\t}).asPromise({ preventTimeout: true });\r\n\r\n\t\tthis.observe(this.#itemManager.statuses, async (statuses) => {\r\n\t\t\tconst status = statuses[0];\r\n\t\t\tif (status?.state.type === 'success') {\r\n\t\t\t\tconst item = await this.#itemManager.getItemByUnique(status.unique);\r\n\t\t\t\tthis._fallbackIcon = item.icon;\r\n\t\t\t\tthis._name = item.name ? this.localize.string(item.name) : this.localize.term('general_unknown');\r\n\t\t\t\tthis._description = this.localize.string(item.description);\r\n\t\t\t} else if (status?.state.type === 'error') {\r\n\t\t\t\tthis._fallbackIcon = 'icon-alert';\r\n\t\t\t\tthis._name = this.localize.term('blockEditor_elementTypeDoesNotExistHeadline');\r\n\t\t\t\tthis._description = this.localize.term('blockEditor_elementTypeDoesNotExistDescription');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treadonly #onOpen = () => {\r\n\t\tthis.dispatchEvent(new UUICardEvent(UUICardEvent.OPEN));\r\n\t};\r\n\r\n\t// TODO: Support image files instead of icons.\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<uui-card-block-type\r\n\t\t\t\thref=${ifDefined(this.href)}\r\n\t\t\t\t@open=${this.#onOpen}\r\n\t\t\t\t.name=${this._name}\r\n\t\t\t\t.description=${this._description}\r\n\t\t\t\t.background=${this.backgroundColor}>\r\n\t\t\t\t${this._iconFile\r\n\t\t\t\t\t? html`<img src=${this._iconFile} alt=\"\" />`\r\n\t\t\t\t\t: html`<umb-icon name=${this._fallbackIcon ?? ''} color=${ifDefined(this.iconColor)}></umb-icon>`}\r\n\t\t\t\t<slot name=\"actions\" slot=\"actions\"> </slot>\r\n\t\t\t</uui-card-block-type>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport default UmbBlockTypeCardElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-block-type-card': UmbBlockTypeCardElement;\r\n\t}\r\n}\r\n","import type { UmbBlockTypeBaseModel, UmbBlockTypeWithGroupKey } from '../../types.js';\r\nimport type { UmbBlockTypeCardElement } from '../block-type-card/index.js';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbModalRouteRegistrationController } from '@umbraco-cms/backoffice/router';\r\nimport { css, html, customElement, property, state, repeat } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type { UmbPropertyDatasetContext } from '@umbraco-cms/backoffice/property';\r\nimport { UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport {\r\n\tUMB_DOCUMENT_TYPE_ITEM_STORE_CONTEXT,\r\n\tUMB_DOCUMENT_TYPE_PICKER_MODAL,\r\n\ttype UmbDocumentTypePickerModalData,\r\n\ttype UmbDocumentTypePickerModalValue,\r\n} from '@umbraco-cms/backoffice/document-type';\r\nimport { UmbSorterController, UmbSorterResolvePlacementAsGrid } from '@umbraco-cms/backoffice/sorter';\r\n\r\nimport '../block-type-card/index.js';\r\n\r\n/** TODO: Look into sending a \"change\" event when there is a change, rather than create, delete, and change event. Make sure it doesn't break move for RTE/List/Grid. [LI] */\r\n@customElement('umb-input-block-type')\r\nexport class UmbInputBlockTypeElement<\r\n\tBlockType extends UmbBlockTypeWithGroupKey = UmbBlockTypeWithGroupKey,\r\n> extends UmbLitElement {\r\n\t#sorter = new UmbSorterController<BlockType, UmbBlockTypeCardElement>(this, {\r\n\t\tgetUniqueOfElement: (element) => element.contentElementTypeKey,\r\n\t\tgetUniqueOfModel: (modelEntry) => modelEntry.contentElementTypeKey!,\r\n\t\titemSelector: 'umb-block-type-card',\r\n\t\tidentifier: 'umb-block-type-sorter',\r\n\t\tcontainerSelector: '#blocks',\r\n\t\tresolvePlacement: UmbSorterResolvePlacementAsGrid,\r\n\t\tonContainerChange: ({ item, model }) => {\r\n\t\t\tthis.dispatchEvent(new CustomEvent('container-change', { detail: { item, model } }));\r\n\t\t},\r\n\t\tonChange: ({ model }) => {\r\n\t\t\tthis._value = model;\r\n\t\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t\t},\r\n\t\t/*onEnd: () => {\r\n\t\t\t// TODO: Investigate if onEnd is called when a container move has been performed, if not then I would say it should be. [NL]\r\n\t\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t\t},*/\r\n\t});\r\n\t#elementPickerModal: UmbModalRouteRegistrationController<\r\n\t\tUmbDocumentTypePickerModalData,\r\n\t\tUmbDocumentTypePickerModalValue\r\n\t>;\r\n\r\n\t@property({ type: Array, attribute: false })\r\n\tpublic set value(items) {\r\n\t\tthis._value = items ?? [];\r\n\t\t// Make sure the block types are unique on contentTypeElementKey:\r\n\t\tthis._value = this._value.filter(\r\n\t\t\t(value, index, self) => self.findIndex((x) => x.contentElementTypeKey === value.contentElementTypeKey) === index,\r\n\t\t);\r\n\t\tthis.#sorter.setModel(this._value);\r\n\t}\r\n\tpublic get value() {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t@property({ type: String })\r\n\tpublic set propertyAlias(value: string | undefined) {\r\n\t\tthis.#elementPickerModal.setUniquePathValue('propertyAlias', value);\r\n\t}\r\n\tpublic get propertyAlias(): string | undefined {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t@property({ type: String })\r\n\tworkspacePath?: string;\r\n\r\n\t@state()\r\n\tprivate _pickerPath?: string;\r\n\r\n\t@state()\r\n\tprivate _value: Array<BlockType> = [];\r\n\r\n\t// TODO: Seems no need to have these initially, then can be retrieved inside the `create` method. [NL]\r\n\t#datasetContext?: UmbPropertyDatasetContext;\r\n\t#filter: Array<UmbBlockTypeBaseModel> = [];\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, async (instance) => {\r\n\t\t\tthis.#datasetContext = instance;\r\n\t\t\tthis.observe(\r\n\t\t\t\tawait this.#datasetContext?.propertyValueByAlias('blocks'),\r\n\t\t\t\t(value) => {\r\n\t\t\t\t\tthis.#filter = value as Array<UmbBlockTypeBaseModel>;\r\n\t\t\t\t},\r\n\t\t\t\t'observeBlocks',\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.#elementPickerModal = new UmbModalRouteRegistrationController(this, UMB_DOCUMENT_TYPE_PICKER_MODAL)\r\n\t\t\t.addUniquePaths(['propertyAlias'])\r\n\t\t\t.onSetup(() => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\thideTreeRoot: true,\r\n\t\t\t\t\t\tmultiple: false,\r\n\t\t\t\t\t\tcreateAction: {\r\n\t\t\t\t\t\t\textendWithPathParams: {\r\n\t\t\t\t\t\t\t\tparentUnique: null,\r\n\t\t\t\t\t\t\t\tpresetAlias: 'element',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t// TODO: hide the queryParams and filter config under a \"elementTypesOnly\" field. [MR]\r\n\t\t\t\t\t\tsearch: {\r\n\t\t\t\t\t\t\tqueryParams: {\r\n\t\t\t\t\t\t\t\tisElementType: true,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tpickableFilter: (docType) =>\r\n\t\t\t\t\t\t\t// Only pick elements:\r\n\t\t\t\t\t\t\tdocType.isElement &&\r\n\t\t\t\t\t\t\t// Prevent picking the an already used element type:\r\n\t\t\t\t\t\t\tthis.#filter?.find((x) => x.contentElementTypeKey === docType.unique) === undefined,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: {\r\n\t\t\t\t\t\tselection: [],\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.onSubmit((value) => {\r\n\t\t\t\tconst selectedElementType = value.selection[0];\r\n\r\n\t\t\t\tif (selectedElementType) {\r\n\t\t\t\t\tthis.dispatchEvent(new CustomEvent('create', { detail: { contentElementTypeKey: selectedElementType } }));\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.observeRouteBuilder((routeBuilder) => {\r\n\t\t\t\tconst oldPath = this._pickerPath;\r\n\t\t\t\tthis._pickerPath = routeBuilder({});\r\n\t\t\t\tthis.requestUpdate('_pickerPath', oldPath);\r\n\t\t\t});\r\n\t}\r\n\r\n\tdeleteItem(contentElementTypeKey: string) {\r\n\t\tthis._value = this.value.filter((x) => x.contentElementTypeKey !== contentElementTypeKey);\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\tasync #onRequestDelete(item: BlockType) {\r\n\t\tconst store = await this.getContext(UMB_DOCUMENT_TYPE_ITEM_STORE_CONTEXT);\r\n\t\tif (!store) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst contentType = store.getItems([item.contentElementTypeKey]);\r\n\t\tawait umbConfirmModal(this, {\r\n\t\t\tcolor: 'danger',\r\n\t\t\theadline: `Remove ${contentType[0]?.name}?`,\r\n\t\t\t// TODO: Translations: [NL]\r\n\t\t\tcontent: 'Are you sure you want to remove this Block Type Configuration?',\r\n\t\t\tconfirmLabel: 'Remove',\r\n\t\t});\r\n\t\tthis.deleteItem(item.contentElementTypeKey);\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`<div id=\"blocks\">\r\n\t\t\t${repeat(this.value, (block) => block.contentElementTypeKey, this.#renderItem)} ${this.#renderButton()}\r\n\t\t</div>`;\r\n\t}\r\n\r\n\t#renderItem = (block: BlockType) => {\r\n\t\treturn html`\r\n\t\t\t<umb-block-type-card\r\n\t\t\t\t.iconFile=${block.thumbnail}\r\n\t\t\t\t.iconColor=${block.iconColor}\r\n\t\t\t\t.backgroundColor=${block.backgroundColor}\r\n\t\t\t\t.href=\"${this.workspacePath}edit/${block.contentElementTypeKey}\"\r\n\t\t\t\t.contentElementTypeKey=${block.contentElementTypeKey}>\r\n\t\t\t\t<uui-action-bar slot=\"actions\">\r\n\t\t\t\t\t<uui-button @click=${() => this.#onRequestDelete(block)} label=\"Remove block\">\r\n\t\t\t\t\t\t<uui-icon name=\"icon-trash\"></uui-icon>\r\n\t\t\t\t\t</uui-button>\r\n\t\t\t\t</uui-action-bar>\r\n\t\t\t</umb-block-type-card>\r\n\t\t`;\r\n\t};\r\n\r\n\t#renderButton() {\r\n\t\treturn this._pickerPath\r\n\t\t\t? html`\r\n\t\t\t\t\t<uui-button id=\"add-button\" look=\"placeholder\" href=${this._pickerPath} label=\"open\">\r\n\t\t\t\t\t\t<uui-icon name=\"icon-add\"></uui-icon>\r\n\t\t\t\t\t\tAdd\r\n\t\t\t\t\t</uui-button>\r\n\t\t\t\t`\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\tdiv {\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t\tgap: var(--uui-size-space-3);\r\n\t\t\t\tgrid-template-columns: repeat(auto-fill, minmax(var(--umb-card-medium-min-width), 1fr));\r\n\t\t\t\tgrid-template-rows: repeat(auto-fill, minmax(var(--umb-card-medium-min-width), 1fr));\r\n\t\t\t}\r\n\r\n\t\t\t[drag-placeholder] {\r\n\t\t\t\topacity: 0.5;\r\n\t\t\t}\r\n\r\n\t\t\t#add-button {\r\n\t\t\t\ttext-align: center;\r\n\t\t\t\tmin-height: 150px;\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\r\n\t\t\tuui-icon {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tmargin: 0 auto;\r\n\t\t\t}\r\n\r\n\t\t\tuui-input {\r\n\t\t\t\tborder: none;\r\n\t\t\t\tmargin: var(--uui-size-space-6) 0 var(--uui-size-space-4);\r\n\t\t\t}\r\n\r\n\t\t\tuui-input:hover uui-button {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t\tuui-input uui-button {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbInputBlockTypeElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-input-block-type': UmbInputBlockTypeElement;\r\n\t}\r\n}\r\n"],"names":["_init","_serverUrl","_itemManager","_onOpen","UmbBlockTypeCardElement","UmbLitElement","__privateAdd","UmbRepositoryItemsManager","UMB_DOCUMENT_TYPE_ITEM_REPOSITORY_ALIAS","UUICardEvent","__privateSet","UMB_SERVER_CONTEXT","instance","__privateGet","statuses","status","item","value","transformServerPathToClientPath","url","html","ifDefined","__decorateClass","property","state","customElement","_sorter","_elementPickerModal","_datasetContext","_filter","_UmbInputBlockTypeElement_instances","onRequestDelete_fn","_renderItem","renderButton_fn","UmbInputBlockTypeElement","UmbSorterController","element","modelEntry","UmbSorterResolvePlacementAsGrid","model","UmbChangeEvent","block","__privateMethod","UMB_PROPERTY_DATASET_CONTEXT","UmbModalRouteRegistrationController","UMB_DOCUMENT_TYPE_PICKER_MODAL","docType","x","selectedElementType","routeBuilder","oldPath","items","index","self","contentElementTypeKey","repeat","store","UMB_DOCUMENT_TYPE_ITEM_STORE_CONTEXT","contentType","umbConfirmModal","css"],"mappings":"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"}