{"version":3,"file":"block-grid-paste-from-clipboard-VdFhdZrx.js","sources":["../../../src/packages/block/block-grid/property-editors/block-grid-editor/property-actions/block-grid-paste-from-clipboard.ts"],"sourcesContent":["import type { UmbBlockGridValueModel } from '../../../types.js';\r\nimport type { UmbBlockGridPropertyEditorConfig } from '../types.js';\r\nimport { UmbPasteFromClipboardPropertyAction } from '@umbraco-cms/backoffice/clipboard';\r\n\r\n/**\r\n * The Block Grid Paste From Clipboard Property Action.\r\n * @exports\r\n * @class UmbBlockGridPasteFromClipboardPropertyAction\r\n * @augments UmbPasteFromClipboardPropertyAction\r\n */\r\nexport class UmbBlockGridPasteFromClipboardPropertyAction extends UmbPasteFromClipboardPropertyAction {\r\n\t/**\r\n\t * Filters the picker based on the block grid property editor config.\r\n\t * @param {UmbBlockGridValueModel} propertyValue The property editor value.\r\n\t * @param {UmbBlockGridPropertyEditorConfig} config The property editor config.\r\n\t * @override\r\n\t * @protected\r\n\t * @memberof UmbBlockGridPasteFromClipboardPropertyAction\r\n\t */\r\n\tprotected override async _pickerFilter(\r\n\t\tpropertyValue: UmbBlockGridValueModel,\r\n\t\tconfig: UmbBlockGridPropertyEditorConfig,\r\n\t) {\r\n\t\t// The property action always paste in the root of the grid so\r\n\t\t// we need to check if the content types are allowed at the root\r\n\t\tconst blocksConfig = config.find((configValue) => configValue.alias === 'blocks');\r\n\r\n\t\tconst allowedRootContentTypeKeys =\r\n\t\t\tblocksConfig?.value\r\n\t\t\t\t.map((blockConfig) => {\r\n\t\t\t\t\tif (blockConfig.allowAtRoot) {\r\n\t\t\t\t\t\treturn blockConfig.contentElementTypeKey;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.filter((contentTypeKey) => contentTypeKey !== undefined) ?? [];\r\n\r\n\t\tconst rootContentKeys = propertyValue.layout['Umbraco.BlockGrid']?.map((block) => block.contentKey) ?? [];\r\n\t\tconst rootContentTypeKeys = propertyValue.contentData\r\n\t\t\t.filter((content) => rootContentKeys.includes(content.key))\r\n\t\t\t.map((content) => content.contentTypeKey);\r\n\r\n\t\t// ensure all content types in the paste value are allowed in the grid root\r\n\t\tconst allContentTypesAllowedAtRoot = rootContentTypeKeys.every((contentKey) =>\r\n\t\t\tallowedRootContentTypeKeys.includes(contentKey),\r\n\t\t);\r\n\r\n\t\treturn allContentTypesAllowedAtRoot;\r\n\t}\r\n}\r\nexport { UmbBlockGridPasteFromClipboardPropertyAction as api };\r\n"],"names":["UmbBlockGridPasteFromClipboardPropertyAction","UmbPasteFromClipboardPropertyAction","propertyValue","config","allowedRootContentTypeKeys","configValue","blockConfig","contentTypeKey","rootContentKeys","block","content","contentKey"],"mappings":";AAUO,MAAMA,UAAqDC,EAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrG,MAAyB,cACxBC,GACAC,GACC;AAKD,UAAMC,IAFeD,EAAO,KAAK,CAACE,MAAgBA,EAAY,UAAU,QAAQ,GAGjE,MACZ,IAAI,CAACC,MAAgB;AACrB,UAAIA,EAAY;AACf,eAAOA,EAAY;AAAA,IAGpB,CACA,EACA,OAAO,CAACC,MAAmBA,MAAmB,MAAS,KAAK,CAAC,GAE1DC,IAAkBN,EAAc,OAAO,mBAAmB,GAAG,IAAI,CAACO,MAAUA,EAAM,UAAU,KAAK,CAAC;AAUjG,WATqBP,EAAc,YACxC,OAAO,CAACQ,MAAYF,EAAgB,SAASE,EAAQ,GAAG,CAAC,EACzD,IAAI,CAACA,MAAYA,EAAQ,cAAc,EAGgB;AAAA,MAAM,CAACC,MAC/DP,EAA2B,SAASO,CAAU;AAAA,IAC/C;AAAA,EAEO;AAET;"}