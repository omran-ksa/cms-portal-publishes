{"version":3,"file":"block-entries.context-CdnpL0k5.js","sources":["../../../src/packages/block/block/context/block-entries.context.ts"],"sourcesContent":["import type { UmbBlockWorkspaceOriginData } from '../workspace/block-workspace.modal-token.js';\r\nimport type { UmbBlockDataModel, UmbBlockLayoutBaseModel, UmbBlockValueType } from '../types.js';\r\nimport type { UmbBlockDataObjectModel, UmbBlockManagerContext } from './block-manager.context.js';\r\nimport { UMB_BLOCK_ENTRIES_CONTEXT } from './block-entries.context-token.js';\r\nimport { type Observable, UmbArrayState, UmbBasicState, UmbStringState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbModalRouteBuilder } from '@umbraco-cms/backoffice/router';\r\nimport type { UmbBlockTypeBaseModel } from '@umbraco-cms/backoffice/block-type';\r\n\r\nexport abstract class UmbBlockEntriesContext<\r\n\tBlockManagerContextTokenType extends UmbContextToken<BlockManagerContextType, BlockManagerContextType>,\r\n\tBlockManagerContextType extends UmbBlockManagerContext<BlockType, BlockLayoutType, BlockOriginData>,\r\n\tBlockType extends UmbBlockTypeBaseModel,\r\n\tBlockLayoutType extends UmbBlockLayoutBaseModel,\r\n\tBlockOriginData extends UmbBlockWorkspaceOriginData,\r\n> extends UmbContextBase {\r\n\t//\r\n\t_manager?: BlockManagerContextType;\r\n\t_retrieveManager;\r\n\r\n\tprotected _catalogueRouteBuilderState = new UmbBasicState<UmbModalRouteBuilder | undefined>(undefined);\r\n\treadonly catalogueRouteBuilder = this._catalogueRouteBuilderState.asObservable();\r\n\r\n\tprotected _workspacePath = new UmbStringState(undefined);\r\n\tworkspacePath = this._workspacePath.asObservable();\r\n\r\n\tprotected _dataPath?: string;\r\n\r\n\tpublic abstract readonly canCreate: Observable<boolean>;\r\n\r\n\tprotected _layoutEntries = new UmbArrayState<BlockLayoutType>([], (x) => x.contentKey);\r\n\treadonly layoutEntries = this._layoutEntries.asObservable();\r\n\treadonly layoutEntriesLength = this._layoutEntries.asObservablePart((x) => x.length);\r\n\r\n\tgetLength() {\r\n\t\treturn this._layoutEntries.getValue().length;\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost, blockManagerContextToken: BlockManagerContextTokenType) {\r\n\t\tsuper(host, UMB_BLOCK_ENTRIES_CONTEXT.toString());\r\n\r\n\t\t// TODO: Observe Blocks of the layout entries of this component.\r\n\t\tthis._retrieveManager = this.consumeContext(blockManagerContextToken, (blockGridManager) => {\r\n\t\t\tthis._manager = blockGridManager;\r\n\t\t\tthis._gotBlockManager();\r\n\t\t}).asPromise({ preventTimeout: true });\r\n\t}\r\n\r\n\tasync getManager() {\r\n\t\tawait this._retrieveManager;\r\n\t\treturn this._manager!;\r\n\t}\r\n\r\n\tsetDataPath(path: string) {\r\n\t\tthis._dataPath = path;\r\n\t}\r\n\r\n\tprotected abstract _gotBlockManager(): void;\r\n\r\n\t// Public methods:\r\n\r\n\tlayoutOf(contentKey: string) {\r\n\t\treturn this._layoutEntries.asObservablePart((source) => source.find((x) => x.contentKey === contentKey));\r\n\t}\r\n\tgetLayoutOf(contentKey: string) {\r\n\t\treturn this._layoutEntries.getValue().find((x) => x.contentKey === contentKey);\r\n\t}\r\n\tsetLayouts(layouts: Array<BlockLayoutType>) {\r\n\t\treturn this._layoutEntries.setValue(layouts);\r\n\t}\r\n\tsetOneLayout(layoutData: BlockLayoutType) {\r\n\t\treturn this._layoutEntries.appendOne(layoutData);\r\n\t}\r\n\r\n\tpublic abstract getPathForCreateBlock(index: number): string | undefined;\r\n\tpublic abstract getPathForClipboard(index: number): string | undefined;\r\n\r\n\tpublic abstract create(\r\n\t\tcontentElementTypeKey: string,\r\n\t\tlayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t\toriginData?: BlockOriginData,\r\n\t): Promise<UmbBlockDataObjectModel<BlockLayoutType> | undefined>;\r\n\r\n\tabstract insert(\r\n\t\tlayoutEntry: BlockLayoutType,\r\n\t\tcontent: UmbBlockDataModel,\r\n\t\tsettings: UmbBlockDataModel | undefined,\r\n\t\toriginData: BlockOriginData,\r\n\t): Promise<boolean>;\r\n\r\n\tpublic async delete(contentKey: string) {\r\n\t\tawait this._retrieveManager;\r\n\t\tconst layout = this._layoutEntries.value.find((x) => x.contentKey === contentKey);\r\n\t\tif (!layout) {\r\n\t\t\tthrow new Error(`Cannot delete block, missing layout for ${contentKey}`);\r\n\t\t}\r\n\t\tthis._layoutEntries.removeOne(contentKey);\r\n\r\n\t\tthis._manager!.removeOneContent(contentKey);\r\n\t\tif (layout.settingsKey) {\r\n\t\t\tthis._manager!.removeOneSettings(layout.settingsKey);\r\n\t\t}\r\n\t\tthis._manager!.removeExposesOf(contentKey);\r\n\t}\r\n\r\n\t// insert/paste from property value methods:\r\n\r\n\tprotected async _insertFromPropertyValues(values: Array<UmbBlockValueType>, originData: BlockOriginData) {\r\n\t\tawait Promise.all(\r\n\t\t\tvalues.map(async (value) => {\r\n\t\t\t\toriginData = await this._insertFromPropertyValue(value, originData);\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n\r\n\tprotected abstract _insertFromPropertyValue(\r\n\t\tvalues: UmbBlockValueType,\r\n\t\toriginData: BlockOriginData,\r\n\t): Promise<BlockOriginData>;\r\n\r\n\tprotected async _insertBlockFromPropertyValue(\r\n\t\tlayoutEntry: BlockLayoutType,\r\n\t\tvalue: UmbBlockValueType,\r\n\t\toriginData: BlockOriginData,\r\n\t) {\r\n\t\tconst content = value.contentData.find((x) => x.key === layoutEntry.contentKey);\r\n\t\tif (!content) {\r\n\t\t\tthrow new Error('No content found for layout entry');\r\n\t\t}\r\n\t\tconst settings = value.settingsData.find((x) => x.key === layoutEntry.settingsKey);\r\n\t\tawait this.insert(layoutEntry, content, settings, originData);\r\n\t}\r\n}\r\n"],"names":["UmbBlockEntriesContext","UmbContextBase","host","blockManagerContextToken","UMB_BLOCK_ENTRIES_CONTEXT","UmbBasicState","UmbStringState","UmbArrayState","x","blockGridManager","path","contentKey","source","layouts","layoutData","layout","values","originData","value","layoutEntry","content","settings"],"mappings":";;;AAWO,MAAeA,UAMZC,EAAe;AAAA,EAuBxB,YAAYC,GAAyBC,GAAwD;AACtF,UAAAD,GAAME,EAA0B,UAAU,GAnBvC,KAAA,8BAA8B,IAAIC,EAAgD,MAAS,GAC5F,KAAA,wBAAwB,KAAK,4BAA4B,aAAa,GAErE,KAAA,iBAAiB,IAAIC,EAAe,MAAS,GACvC,KAAA,gBAAA,KAAK,eAAe,aAAa,GAMvC,KAAA,iBAAiB,IAAIC,EAA+B,IAAI,CAACC,MAAMA,EAAE,UAAU,GAC5E,KAAA,gBAAgB,KAAK,eAAe,aAAa,GAC1D,KAAS,sBAAsB,KAAK,eAAe,iBAAiB,CAACA,MAAMA,EAAE,MAAM,GAUlF,KAAK,mBAAmB,KAAK,eAAeL,GAA0B,CAACM,MAAqB;AAC3F,WAAK,WAAWA,GAChB,KAAK,iBAAiB;AAAA,IACtB,CAAA,EAAE,UAAU,EAAE,gBAAgB,IAAM;AAAA,EAAA;AAAA,EAXtC,YAAY;AACJ,WAAA,KAAK,eAAe,SAAA,EAAW;AAAA,EAAA;AAAA,EAavC,MAAM,aAAa;AAClB,iBAAM,KAAK,kBACJ,KAAK;AAAA,EAAA;AAAA,EAGb,YAAYC,GAAc;AACzB,SAAK,YAAYA;AAAA,EAAA;AAAA;AAAA,EAOlB,SAASC,GAAoB;AAC5B,WAAO,KAAK,eAAe,iBAAiB,CAACC,MAAWA,EAAO,KAAK,CAACJ,MAAMA,EAAE,eAAeG,CAAU,CAAC;AAAA,EAAA;AAAA,EAExG,YAAYA,GAAoB;AACxB,WAAA,KAAK,eAAe,WAAW,KAAK,CAACH,MAAMA,EAAE,eAAeG,CAAU;AAAA,EAAA;AAAA,EAE9E,WAAWE,GAAiC;AACpC,WAAA,KAAK,eAAe,SAASA,CAAO;AAAA,EAAA;AAAA,EAE5C,aAAaC,GAA6B;AAClC,WAAA,KAAK,eAAe,UAAUA,CAAU;AAAA,EAAA;AAAA,EAmBhD,MAAa,OAAOH,GAAoB;AACvC,UAAM,KAAK;AACL,UAAAI,IAAS,KAAK,eAAe,MAAM,KAAK,CAACP,MAAMA,EAAE,eAAeG,CAAU;AAChF,QAAI,CAACI;AACJ,YAAM,IAAI,MAAM,2CAA2CJ,CAAU,EAAE;AAEnE,SAAA,eAAe,UAAUA,CAAU,GAEnC,KAAA,SAAU,iBAAiBA,CAAU,GACtCI,EAAO,eACL,KAAA,SAAU,kBAAkBA,EAAO,WAAW,GAE/C,KAAA,SAAU,gBAAgBJ,CAAU;AAAA,EAAA;AAAA;AAAA,EAK1C,MAAgB,0BAA0BK,GAAkCC,GAA6B;AACxG,UAAM,QAAQ;AAAA,MACbD,EAAO,IAAI,OAAOE,MAAU;AAC3B,QAAAD,IAAa,MAAM,KAAK,yBAAyBC,GAAOD,CAAU;AAAA,MAClE,CAAA;AAAA,IACF;AAAA,EAAA;AAAA,EAQD,MAAgB,8BACfE,GACAD,GACAD,GACC;AACK,UAAAG,IAAUF,EAAM,YAAY,KAAK,CAACV,MAAMA,EAAE,QAAQW,EAAY,UAAU;AAC9E,QAAI,CAACC;AACE,YAAA,IAAI,MAAM,mCAAmC;AAE9C,UAAAC,IAAWH,EAAM,aAAa,KAAK,CAACV,MAAMA,EAAE,QAAQW,EAAY,WAAW;AACjF,UAAM,KAAK,OAAOA,GAAaC,GAASC,GAAUJ,CAAU;AAAA,EAAA;AAE9D;"}