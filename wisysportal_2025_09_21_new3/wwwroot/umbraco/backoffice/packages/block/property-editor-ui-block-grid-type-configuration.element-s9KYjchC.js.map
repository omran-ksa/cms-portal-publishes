{"version":3,"file":"property-editor-ui-block-grid-type-configuration.element-s9KYjchC.js","sources":["../../../src/packages/block/block-grid/property-editors/block-grid-type-configuration/property-editor-ui-block-grid-type-configuration.element.ts"],"sourcesContent":["import type { UmbBlockGridTypeGroupType } from '../../types.js';\r\nimport { UMB_BLOCK_GRID_TYPE_WORKSPACE_MODAL } from '../../workspace/index.js';\r\nimport { UMB_BLOCK_GRID_TYPE } from '../../constants.js';\r\nimport type { UmbBlockTypeWithGroupKey, UmbInputBlockTypeElement } from '@umbraco-cms/backoffice/block-type';\r\nimport type {\r\n\tUmbPropertyEditorUiElement,\r\n\tUmbPropertyEditorConfigCollection,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport {\r\n\thtml,\r\n\tcustomElement,\r\n\tproperty,\r\n\tstate,\r\n\trepeat,\r\n\tnothing,\r\n\tcss,\r\n\tifDefined,\r\n} from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type { UUIInputEvent } from '@umbraco-cms/backoffice/external/uui';\r\nimport {\r\n\tUMB_PROPERTY_CONTEXT,\r\n\tUMB_PROPERTY_DATASET_CONTEXT,\r\n\ttype UmbPropertyDatasetContext,\r\n} from '@umbraco-cms/backoffice/property';\r\nimport { UmbModalRouteRegistrationController } from '@umbraco-cms/backoffice/router';\r\nimport { UmbSorterController } from '@umbraco-cms/backoffice/sorter';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\n\r\ninterface MappedGroupWithBlockTypes extends UmbBlockGridTypeGroupType {\r\n\tblocks: Array<UmbBlockTypeWithGroupKey>;\r\n}\r\n\r\n/**\r\n * @element umb-property-editor-ui-block-grid-type-configuration\r\n */\r\n@customElement('umb-property-editor-ui-block-grid-type-configuration')\r\nexport class UmbPropertyEditorUIBlockGridTypeConfigurationElement\r\n\textends UmbLitElement\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t#sorter = new UmbSorterController<MappedGroupWithBlockTypes, HTMLElement>(this, {\r\n\t\tgetUniqueOfElement: (element) => element.getAttribute('data-umb-group-key'),\r\n\t\tgetUniqueOfModel: (modelEntry) => modelEntry.key!,\r\n\t\titemSelector: '.group',\r\n\t\thandleSelector: '.group-handle',\r\n\t\tcontainerSelector: '#groups',\r\n\t\tonChange: ({ model }) => {\r\n\t\t\tthis._groupsWithBlockTypes = model;\r\n\t\t},\r\n\t\tonEnd: () => {\r\n\t\t\t// TODO: make one method for updating the blockGroupsDataSetValue:\r\n\t\t\tthis.#datasetContext?.setPropertyValue(\r\n\t\t\t\t'blockGroups',\r\n\t\t\t\tthis._groupsWithBlockTypes.map((group) => ({ key: group.key, name: group.name })),\r\n\t\t\t);\r\n\t\t},\r\n\t});\r\n\r\n\t#datasetContext?: UmbPropertyDatasetContext;\r\n\t#blockTypeWorkspaceModalRegistration?: UmbModalRouteRegistrationController<\r\n\t\ttypeof UMB_BLOCK_GRID_TYPE_WORKSPACE_MODAL.DATA,\r\n\t\ttypeof UMB_BLOCK_GRID_TYPE_WORKSPACE_MODAL.VALUE\r\n\t>;\r\n\r\n\t#value: Array<UmbBlockTypeWithGroupKey> = [];\r\n\t@property({ attribute: false })\r\n\tget value() {\r\n\t\treturn this.#value;\r\n\t}\r\n\tset value(value: Array<UmbBlockTypeWithGroupKey>) {\r\n\t\tthis.#value = value ?? [];\r\n\t\tthis.#mapValuesToBlockGroups();\r\n\t}\r\n\r\n\t@state()\r\n\tpublic _alias?: string;\r\n\r\n\t@property({ type: Object, attribute: false })\r\n\tpublic config?: UmbPropertyEditorConfigCollection;\r\n\r\n\t#blockGroups?: Array<UmbBlockGridTypeGroupType>;\r\n\r\n\t@state()\r\n\tprivate _groupsWithBlockTypes: Array<MappedGroupWithBlockTypes> = [];\r\n\r\n\t@state()\r\n\tprivate _notGroupedBlockTypes: Array<UmbBlockTypeWithGroupKey> = [];\r\n\r\n\t@state()\r\n\tprivate _workspacePath?: string;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_CONTEXT, async (context) => {\r\n\t\t\tthis._alias = context?.getAlias();\r\n\t\t});\r\n\r\n\t\tthis.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, async (context) => {\r\n\t\t\tthis.#datasetContext = context;\r\n\t\t\tthis.observe(\r\n\t\t\t\tawait this.#datasetContext?.propertyValueByAlias('blockGroups'),\r\n\t\t\t\t(value) => {\r\n\t\t\t\t\tthis.#blockGroups = (value as Array<UmbBlockGridTypeGroupType>) ?? [];\r\n\t\t\t\t\tthis.#mapValuesToBlockGroups();\r\n\t\t\t\t},\r\n\t\t\t\t'_observeBlockGroups',\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.#blockTypeWorkspaceModalRegistration = new UmbModalRouteRegistrationController(\r\n\t\t\tthis,\r\n\t\t\tUMB_BLOCK_GRID_TYPE_WORKSPACE_MODAL,\r\n\t\t)\r\n\t\t\t.addAdditionalPath(UMB_BLOCK_GRID_TYPE)\r\n\t\t\t.observeRouteBuilder((routeBuilder) => {\r\n\t\t\t\tconst newpath = routeBuilder({});\r\n\t\t\t\tthis._workspacePath = newpath;\r\n\t\t\t});\r\n\t}\r\n\r\n\t#mapValuesToBlockGroups() {\r\n\t\tif (!this.#blockGroups) return;\r\n\t\t// Map blocks that are not in any group, or in a group that does not exist\r\n\t\tthis._notGroupedBlockTypes = this.#value.filter(\r\n\t\t\t(block) => !block.groupKey || !this.#blockGroups!.find((group) => group.key === block.groupKey),\r\n\t\t);\r\n\r\n\t\t// Map blocks to the group they belong to\r\n\t\tthis._groupsWithBlockTypes = this.#blockGroups.map((group) => {\r\n\t\t\treturn { name: group.name, key: group.key, blocks: this.#value.filter((value) => value.groupKey === group.key) };\r\n\t\t});\r\n\r\n\t\tthis.#sorter.setModel(this._groupsWithBlockTypes);\r\n\t}\r\n\r\n\tasync #onChange(e: Event, groupKey?: string) {\r\n\t\te.stopPropagation();\r\n\t\tconst element = e.target as UmbInputBlockTypeElement;\r\n\t\tconst value = element.value.map((x) => ({ ...x, groupKey }));\r\n\r\n\t\tif (groupKey) {\r\n\t\t\t// Update the specific group:\r\n\t\t\tthis._groupsWithBlockTypes = this._groupsWithBlockTypes.map((group) => {\r\n\t\t\t\tif (group.key === groupKey) {\r\n\t\t\t\t\treturn { ...group, blocks: value };\r\n\t\t\t\t}\r\n\t\t\t\treturn group;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Update the not grouped blocks:\r\n\t\t\tthis._notGroupedBlockTypes = value;\r\n\t\t}\r\n\r\n\t\tthis.#updateValue();\r\n\t}\r\n\r\n\t#updateValue() {\r\n\t\tthis.value = [...this._notGroupedBlockTypes, ...this._groupsWithBlockTypes.flatMap((group) => group.blocks)];\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\t#updateBlockGroupsValue(groups: Array<UmbBlockGridTypeGroupType>) {\r\n\t\tthis.#datasetContext?.setPropertyValue('blockGroups', groups);\r\n\t}\r\n\r\n\t#onCreate(e: CustomEvent, groupKey?: string) {\r\n\t\tconst selectedElementType = e.detail.contentElementTypeKey;\r\n\t\tif (selectedElementType) {\r\n\t\t\tthis.#blockTypeWorkspaceModalRegistration?.open({}, 'create/' + selectedElementType + '/' + (groupKey ?? 'null'));\r\n\t\t}\r\n\t}\r\n\r\n\t// TODO: Implement confirm dialog [NL]\r\n\tasync #deleteGroup(groupKey: string) {\r\n\t\tconst groupName = this.#blockGroups?.find((group) => group.key === groupKey)?.name ?? '';\r\n\t\tawait umbConfirmModal(this, {\r\n\t\t\theadline: '#blockEditor_confirmDeleteBlockGroupTitle',\r\n\t\t\tcontent: this.localize.term('#blockEditor_confirmDeleteBlockGroupMessage', [groupName]),\r\n\t\t\tcolor: 'danger',\r\n\t\t\tconfirmLabel: '#general_delete',\r\n\t\t});\r\n\t\t// If a group is deleted, Move the blocks to no group:\r\n\t\tthis.value = this.#value.map((block) => (block.groupKey === groupKey ? { ...block, groupKey: undefined } : block));\r\n\t\tif (this.#blockGroups) {\r\n\t\t\tthis.#updateBlockGroupsValue(this.#blockGroups.filter((group) => group.key !== groupKey));\r\n\t\t}\r\n\t}\r\n\r\n\t#onGroupNameChange(e: UUIInputEvent, groupKey: string) {\r\n\t\tconst groupName = e.target.value as string;\r\n\t\t// TODO: make one method for updating the blockGroupsDataSetValue: [NL]\r\n\t\tthis.#datasetContext?.setPropertyValue(\r\n\t\t\t'blockGroups',\r\n\t\t\tthis.#blockGroups?.map((group) => (group.key === groupKey ? { ...group, name: groupName } : group)),\r\n\t\t);\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`<div id=\"groups\">\r\n\t\t\t${this._notGroupedBlockTypes\r\n\t\t\t\t? html`<umb-input-block-type\r\n\t\t\t\t\t\t.propertyAlias=${this._alias}\r\n\t\t\t\t\t\t.value=${this._notGroupedBlockTypes}\r\n\t\t\t\t\t\t.workspacePath=${this._workspacePath}\r\n\t\t\t\t\t\t@change=${(e: Event) => this.#onChange(e, undefined)}\r\n\t\t\t\t\t\t@create=${(e: CustomEvent) => this.#onCreate(e, undefined)}></umb-input-block-type>`\r\n\t\t\t\t: ''}\r\n\t\t\t${repeat(\r\n\t\t\t\tthis._groupsWithBlockTypes,\r\n\t\t\t\t(group) => group.key,\r\n\t\t\t\t(group) =>\r\n\t\t\t\t\thtml`<div class=\"group\" data-umb-group-key=${ifDefined(group.key)}>\r\n\t\t\t\t\t\t${group.key ? this.#renderGroupInput(group.key, group.name) : nothing}\r\n\t\t\t\t\t\t<umb-input-block-type\r\n\t\t\t\t\t\t\tdata-umb-group-key=${group.key}\r\n\t\t\t\t\t\t\t.propertyAlias=${this._alias + '_' + group.key}\r\n\t\t\t\t\t\t\t.value=${group.blocks}\r\n\t\t\t\t\t\t\t.workspacePath=${this._workspacePath}\r\n\t\t\t\t\t\t\t@change=${(e: Event) => this.#onChange(e, group.key)}\r\n\t\t\t\t\t\t\t@create=${(e: CustomEvent) => this.#onCreate(e, group.key)}></umb-input-block-type>\r\n\t\t\t\t\t</div>`,\r\n\t\t\t)}\r\n\t\t</div>`;\r\n\t}\r\n\r\n\t#renderGroupInput(groupKey: string, groupName?: string) {\r\n\t\treturn html`<div class=\"group-handle\">\r\n\t\t\t<uui-input\r\n\t\t\t\tauto-width\r\n\t\t\t\tlabel=\"Group\"\r\n\t\t\t\t.value=${groupName ?? ''}\r\n\t\t\t\t@change=${(e: UUIInputEvent) => this.#onGroupNameChange(e, groupKey)}>\r\n\t\t\t\t<uui-button compact slot=\"append\" label=\"delete\" @click=${() => this.#deleteGroup(groupKey)}>\r\n\t\t\t\t\t<uui-icon name=\"icon-trash\"></uui-icon>\r\n\t\t\t\t</uui-button>\r\n\t\t\t</uui-input>\r\n\t\t</div>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\tuui-input:not(:hover, :focus) {\r\n\t\t\t\tborder: 1px solid transparent;\r\n\t\t\t}\r\n\t\t\tuui-input:not(:hover, :focus) uui-button {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\r\n\t\t\t.group-handle {\r\n\t\t\t\tpadding: var(--uui-size-1);\r\n\t\t\t\tmargin-top: var(--uui-size-6);\r\n\t\t\t\tmargin-bottom: var(--uui-size-4);\r\n\t\t\t\tcursor: grab;\r\n\t\t\t}\r\n\r\n\t\t\t.group-handle:hover {\r\n\t\t\t\tbackground-color: var(--uui-color-divider);\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t}\r\n\r\n\t\t\t.group:has([drag-placeholder]) {\r\n\t\t\t\topacity: 0.2;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbPropertyEditorUIBlockGridTypeConfigurationElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-block-grid-type-configuration': UmbPropertyEditorUIBlockGridTypeConfigurationElement;\r\n\t}\r\n}\r\n"],"names":["_sorter","_datasetContext","_blockTypeWorkspaceModalRegistration","_value","_blockGroups","_UmbPropertyEditorUIBlockGridTypeConfigurationElement_instances","mapValuesToBlockGroups_fn","onChange_fn","updateValue_fn","updateBlockGroupsValue_fn","onCreate_fn","deleteGroup_fn","onGroupNameChange_fn","renderGroupInput_fn","UmbPropertyEditorUIBlockGridTypeConfigurationElement","UmbLitElement","__privateAdd","UmbSorterController","element","modelEntry","model","__privateGet","group","UMB_PROPERTY_CONTEXT","context","UMB_PROPERTY_DATASET_CONTEXT","__privateSet","value","__privateMethod","UmbModalRouteRegistrationController","UMB_BLOCK_GRID_TYPE_WORKSPACE_MODAL","UMB_BLOCK_GRID_TYPE","routeBuilder","newpath","html","e","repeat","ifDefined","nothing","block","groupKey","x","UmbChangeEvent","groups","selectedElementType","groupName","umbConfirmModal","UmbTextStyles","css","__decorateClass","property","state","customElement","UmbPropertyEditorUIBlockGridTypeConfigurationElement$1"],"mappings":";;;;;;;;;;;;;;;wYAAAA,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC;AAuCa,IAAAC,IAAN,cACEC,EAET;AAAA,EAoDC,cAAc;AACP,UAAA,GAxDDC,EAAA,MAAAX,CAAA,GAIIW,EAAA,MAAAhB,GAAA,IAAIiB,EAA4D,MAAM;AAAA,MAC/E,oBAAoB,CAACC,MAAYA,EAAQ,aAAa,oBAAoB;AAAA,MAC1E,kBAAkB,CAACC,MAAeA,EAAW;AAAA,MAC7C,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,UAAU,CAAC,EAAE,OAAAC,QAAY;AACxB,aAAK,wBAAwBA;AAAA,MAC9B;AAAA,MACA,OAAO,MAAM;AAEZ,QAAAC,EAAA,MAAKpB,CAAiB,GAAA;AAAA,UACrB;AAAA,UACA,KAAK,sBAAsB,IAAI,CAACqB,OAAW,EAAE,KAAKA,EAAM,KAAK,MAAMA,EAAM,KAAA,EAAO;AAAA,QACjF;AAAA,MAAA;AAAA,IACD,CACA,CAAA,GAEDN,EAAA,MAAAf,CAAA,GACAe,EAAA,MAAAd,CAAA,GAKAc,EAAA,MAAAb,GAA0C,EAAC,GAgB3Ca,EAAA,MAAAZ,CAAA,GAGA,KAAQ,wBAA0D,CAAC,GAGnE,KAAQ,wBAAyD,CAAC,GAQ5D,KAAA,eAAemB,GAAsB,OAAOC,MAAY;AACvD,WAAA,SAASA,GAAS,SAAS;AAAA,IAAA,CAChC,GAEI,KAAA,eAAeC,GAA8B,OAAOD,MAAY;AACpE,MAAAE,EAAA,MAAKzB,GAAkBuB,CAAA,GAClB,KAAA;AAAA,QACJ,MAAMH,EAAA,MAAKpB,CAAiB,GAAA,qBAAqB,aAAa;AAAA,QAC9D,CAAC0B,MAAU;AACL,UAAAD,EAAA,MAAAtB,GAAgBuB,KAA8C,CAAA,CAAC,GACpEC,EAAA,MAAKvB,GAALC,CAAA,EAAA,KAAA,IAAA;AAAA,QACD;AAAA,QACA;AAAA,MACD;AAAA,IAAA,CACA,GAEDoB,EAAA,MAAKxB,GAAuC,IAAI2B;AAAA,MAC/C;AAAA,MACAC;AAAA,MAEC,kBAAkBC,CAAmB,EACrC,oBAAoB,CAACC,MAAiB;AAChC,YAAAC,IAAUD,EAAa,EAAE;AAC/B,WAAK,iBAAiBC;AAAA,IAAA,CACtB,CAAA;AAAA,EAAA;AAAA,EApDH,IAAI,QAAQ;AACX,WAAOZ,EAAK,MAAAlB,CAAA;AAAA,EAAA;AAAA,EAEb,IAAI,MAAMwB,GAAwC;AAC5C,IAAAD,EAAA,MAAAvB,GAASwB,KAAS,CAAA,CAAC,GACxBC,EAAA,MAAKvB,GAALC,CAAA,EAAA,KAAA,IAAA;AAAA,EAAA;AAAA,EA+HQ,SAAS;AACV,WAAA4B;AAAA,KACJ,KAAK,wBACJA;AAAA,uBACiB,KAAK,MAAM;AAAA,eACnB,KAAK,qBAAqB;AAAA,uBAClB,KAAK,cAAc;AAAA,gBAC1B,CAACC,MAAaP,EAAA,MAAKvB,GAALE,CAAA,EAAA,KAAA,MAAe4B,GAAG,MAAU,CAAA;AAAA,gBAC1C,CAACA,MAAmBP,EAAK,MAAAvB,GAAAK,CAAA,EAAL,WAAeyB,GAAG,MAAA,CAAU,6BAC1D,EAAE;AAAA,KACHC;AAAA,MACD,KAAK;AAAA,MACL,CAACd,MAAUA,EAAM;AAAA,MACjB,CAACA,MACAY,0CAA6CG,EAAUf,EAAM,GAAG,CAAC;AAAA,QAC9DA,EAAM,MAAMM,EAAK,MAAAvB,GAAAQ,CAAA,EAAL,WAAuBS,EAAM,KAAKA,EAAM,IAAA,IAAQgB,CAAO;AAAA;AAAA,4BAE/ChB,EAAM,GAAG;AAAA,wBACb,KAAK,SAAS,MAAMA,EAAM,GAAG;AAAA,gBACrCA,EAAM,MAAM;AAAA,wBACJ,KAAK,cAAc;AAAA,iBAC1B,CAAC,MAAaM,EAAA,MAAKvB,MAAL,KAAe,MAAA,GAAGiB,EAAM,GAAI,CAAA;AAAA,iBAC1C,CAAC,MAAmBM,EAAA,MAAKvB,MAAL,KAAe,MAAA,GAAGiB,EAAM,GAAI,CAAA;AAAA;AAAA,IAE7D,CAAA;AAAA;AAAA,EAAA;AA6CJ;AAnOCtB,IAAA,oBAAA,QAAA;AAkBAC,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AAKAC,IAAA,oBAAA,QAAA;AAgBAC,IAAA,oBAAA,QAAA;AA5CMC,IAAA,oBAAA,QAAA;AAqFNC,IAAuB,WAAG;AACrB,EAACe,QAAKjB,CAAc,MAEnB,KAAA,wBAAwBiB,QAAKlB,CAAO,EAAA;AAAA,IACxC,CAACoC,MAAU,CAACA,EAAM,YAAY,CAAClB,EAAA,MAAKjB,CAAc,EAAA,KAAK,CAACkB,MAAUA,EAAM,QAAQiB,EAAM,QAAQ;AAAA,EAC/F,GAGA,KAAK,wBAAwBlB,EAAA,MAAKjB,CAAa,EAAA,IAAI,CAACkB,OAC5C,EAAE,MAAMA,EAAM,MAAM,KAAKA,EAAM,KAAK,QAAQD,EAAK,MAAAlB,CAAA,EAAO,OAAO,CAACwB,MAAUA,EAAM,aAAaL,EAAM,GAAG,EAAE,EAC/G,GAEID,EAAA,MAAArB,CAAA,EAAQ,SAAS,KAAK,qBAAqB;AACjD;AAEMO,IAAS,eAAC4B,GAAUK,GAAmB;AAC5C,EAAAL,EAAE,gBAAgB;AAEZ,QAAAR,IADUQ,EAAE,OACI,MAAM,IAAI,CAACM,OAAO,EAAE,GAAGA,GAAG,UAAAD,EAAA,EAAW;AAE3D,EAAIA,IAEH,KAAK,wBAAwB,KAAK,sBAAsB,IAAI,CAAClB,MACxDA,EAAM,QAAQkB,IACV,EAAE,GAAGlB,GAAO,QAAQK,EAAM,IAE3BL,CACP,IAGD,KAAK,wBAAwBK,GAG9BC,EAAA,MAAKvB,GAALG,CAAA,EAAA,KAAA,IAAA;AACD;AAEAA,IAAY,WAAG;AACd,OAAK,QAAQ,CAAC,GAAG,KAAK,uBAAuB,GAAG,KAAK,sBAAsB,QAAQ,CAACc,MAAUA,EAAM,MAAM,CAAC,GACtG,KAAA,cAAc,IAAIoB,GAAgB;AACxC;AAEAjC,IAAuB,SAACkC,GAA0C;AAC5D,EAAAtB,EAAA,MAAApB,CAAA,GAAiB,iBAAiB,eAAe0C,CAAM;AAC7D;AAEAjC,IAAS,SAACyB,GAAgBK,GAAmB;AACtC,QAAAI,IAAsBT,EAAE,OAAO;AACrC,EAAIS,KACEvB,EAAA,MAAAnB,CAAA,GAAsC,KAAK,CAAA,GAAI,YAAY0C,IAAsB,OAAOJ,KAAY,OAAO;AAElH;AAGM7B,IAAY,eAAC6B,GAAkB;AAC9B,QAAAK,IAAYxB,EAAK,MAAAjB,CAAA,GAAc,KAAK,CAACkB,MAAUA,EAAM,QAAQkB,CAAQ,GAAG,QAAQ;AACtF,QAAMM,EAAgB,MAAM;AAAA,IAC3B,UAAU;AAAA,IACV,SAAS,KAAK,SAAS,KAAK,+CAA+C,CAACD,CAAS,CAAC;AAAA,IACtF,OAAO;AAAA,IACP,cAAc;AAAA,EAAA,CACd,GAED,KAAK,QAAQxB,EAAA,MAAKlB,CAAO,EAAA,IAAI,CAACoC,MAAWA,EAAM,aAAaC,IAAW,EAAE,GAAGD,GAAO,UAAU,WAAcA,CAAM,GAC7GlB,QAAKjB,CAAc,KACjBwB,EAAA,MAAAvB,GAAAI,CAAA,EAAL,WAA6BY,EAAK,MAAAjB,CAAA,EAAa,OAAO,CAACkB,MAAUA,EAAM,QAAQkB,CAAQ,CAAA;AAEzF;AAEA5B,IAAkB,SAACuB,GAAkBK,GAAkB;AAChD,QAAAK,IAAYV,EAAE,OAAO;AAE3B,EAAAd,EAAA,MAAKpB,CAAiB,GAAA;AAAA,IACrB;AAAA,IACAoB,EAAK,MAAAjB,CAAA,GAAc,IAAI,CAACkB,MAAWA,EAAM,QAAQkB,IAAW,EAAE,GAAGlB,GAAO,MAAMuB,MAAcvB,CAAM;AAAA,EACnG;AACD;AA8BAT,IAAiB,SAAC2B,GAAkBK,GAAoB;AAChD,SAAAX;AAAA;AAAA;AAAA;AAAA,aAIIW,KAAa,EAAE;AAAA,cACd,CAACV,MAAqBP,EAAA,MAAKvB,GAALO,CAAA,EAAA,KAAA,MAAwBuB,GAAGK,CAAS,CAAA;AAAA,8DACV,MAAMZ,EAAA,MAAKvB,GAALM,CAAA,EAAA,KAAA,MAAkB6B,CAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAK9F;AA1MY1B,EA4MI,SAAS;AAAA,EACxBiC;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBD;AAxMIC,EAAA;AAAA,EADHC,EAAS,EAAE,WAAW,GAAO,CAAA;AAAA,GA7BlBpC,EA8BR,WAAA,SAAA,CAAA;AASGmC,EAAA;AAAA,EADNE,EAAM;AAAA,GAtCKrC,EAuCL,WAAA,UAAA,CAAA;AAGAmC,EAAA;AAAA,EADNC,EAAS,EAAE,MAAM,QAAQ,WAAW,GAAO,CAAA;AAAA,GAzChCpC,EA0CL,WAAA,UAAA,CAAA;AAKCmC,EAAA;AAAA,EADPE,EAAM;AAAA,GA9CKrC,EA+CJ,WAAA,yBAAA,CAAA;AAGAmC,EAAA;AAAA,EADPE,EAAM;AAAA,GAjDKrC,EAkDJ,WAAA,yBAAA,CAAA;AAGAmC,EAAA;AAAA,EADPE,EAAM;AAAA,GApDKrC,EAqDJ,WAAA,kBAAA,CAAA;AArDIA,IAANmC,EAAA;AAAA,EADNG,EAAc,sDAAsD;AAAA,GACxDtC,CAAA;AAyOb,MAAAuC,KAAevC;"}