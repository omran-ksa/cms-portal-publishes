{"version":3,"file":"index.js","sources":["../../../../src/packages/block/block/clipboard/constants.ts","../../../../src/packages/block/block/context/block-entry.context.ts","../../../../src/packages/block/block/context/block-manager.context.ts","../../../../src/packages/block/block/property-value-cloner/block-property-value-cloner.api.ts","../../../../src/packages/block/block/property-value-cloner/flat-layout-block-property-value-cloner.api.ts","../../../../src/packages/block/block/property-value-resolver/block-value-resolver.api.ts","../../../../src/packages/block/block/property-value-resolver/standard-block-value-resolver.api.ts","../../../../src/packages/block/block/validation/block-element-values-validation-path-translator.controller.ts","../../../../src/packages/block/block/validation/data-path-element-data-query.function.ts","../../../../src/packages/block/block/validation/block-element-data-validation-path-translator.controller.ts","../../../../src/packages/block/block/validation/block-editor-validation-property-path-translator-base.api.ts"],"sourcesContent":["export const UMB_BLOCK_CLIPBOARD_ENTRY_VALUE_TYPE = 'block';\r\n","import type { UmbBlockManagerContext, UmbBlockWorkspaceOriginData } from '../index.js';\r\nimport type {\r\n\tUmbBlockLayoutBaseModel,\r\n\tUmbBlockDataModel,\r\n\tUmbBlockDataType,\r\n\tUmbBlockExposeModel,\r\n\tUmbBlockDataValueModel,\r\n} from '../types.js';\r\nimport type { UmbBlockEntriesContext } from './block-entries.context.js';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport {\r\n\tUmbBooleanState,\r\n\tUmbClassState,\r\n\tUmbNumberState,\r\n\tUmbObjectState,\r\n\tUmbStringState,\r\n\tmergeObservables,\r\n\tobserveMultiple,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport { encodeFilePath, UmbReadOnlyVariantGuardManager } from '@umbraco-cms/backoffice/utils';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\nimport { UmbRoutePathAddendumContext } from '@umbraco-cms/backoffice/router';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport { UmbUfmVirtualRenderController } from '@umbraco-cms/backoffice/ufm';\r\nimport type { Observable } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport type { UmbBlockTypeBaseModel } from '@umbraco-cms/backoffice/block-type';\r\nimport type { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport type {\r\n\tUmbContentTypeModel,\r\n\tUmbContentTypeStructureManager,\r\n\tUmbPropertyTypeModel,\r\n} from '@umbraco-cms/backoffice/content-type';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport abstract class UmbBlockEntryContext<\r\n\tBlockManagerContextTokenType extends UmbContextToken<BlockManagerContextType>,\r\n\tBlockManagerContextType extends UmbBlockManagerContext<BlockType, BlockLayoutType>,\r\n\tBlockEntriesContextTokenType extends UmbContextToken<BlockEntriesContextType>,\r\n\tBlockEntriesContextType extends UmbBlockEntriesContext<\r\n\t\tBlockManagerContextTokenType,\r\n\t\tBlockManagerContextType,\r\n\t\tBlockType,\r\n\t\tBlockLayoutType,\r\n\t\tBlockOriginData\r\n\t>,\r\n\tBlockType extends UmbBlockTypeBaseModel = UmbBlockTypeBaseModel,\r\n\tBlockLayoutType extends UmbBlockLayoutBaseModel = UmbBlockLayoutBaseModel,\r\n\tBlockOriginData extends UmbBlockWorkspaceOriginData = UmbBlockWorkspaceOriginData,\r\n> extends UmbContextBase {\r\n\t//\r\n\t_manager?: BlockManagerContextType;\r\n\t_entries?: BlockEntriesContextType;\r\n\r\n\t#contentKey?: string;\r\n\t#unsupported = new UmbBooleanState(undefined);\r\n\treadonly unsupported = this.#unsupported.asObservable();\r\n\r\n\treadonly #localize = new UmbLocalizationController(this);\r\n\r\n\t#pathAddendum = new UmbRoutePathAddendumContext(this);\r\n\t#variantId = new UmbClassState<UmbVariantId | undefined>(undefined);\r\n\tprotected readonly _variantId = this.#variantId.asObservable();\r\n\r\n\t#hasExpose = new UmbBooleanState(undefined);\r\n\treadonly hasExpose = this.#hasExpose.asObservable();\r\n\r\n\t#actionsVisibility = new UmbBooleanState(true);\r\n\treadonly actionsVisibility = this.#actionsVisibility.asObservable();\r\n\r\n\thideActions() {\r\n\t\tthis.#actionsVisibility.setValue(false);\r\n\t}\r\n\tshowActions() {\r\n\t\tthis.#actionsVisibility.setValue(true);\r\n\t}\r\n\r\n\tpublic readonly readOnlyGuard = new UmbReadOnlyVariantGuardManager(this);\r\n\r\n\t// Workspace alike methods, to enables editing of data without the need of a workspace (Custom views and block grid inline editing mode for example).\r\n\tgetEntityType() {\r\n\t\treturn 'block';\r\n\t}\r\n\tgetUnique() {\r\n\t\treturn this.getContentKey();\r\n\t}\r\n\r\n\t#index = new UmbNumberState(undefined);\r\n\treadonly index = this.#index.asObservable();\r\n\tgetIndex() {\r\n\t\treturn this.#index.value;\r\n\t}\r\n\tsetIndex(index: number | undefined) {\r\n\t\tthis.#index.setValue(index);\r\n\t}\r\n\r\n\t#createBeforePath = new UmbStringState(undefined);\r\n\treadonly createBeforePath = this.#createBeforePath.asObservable();\r\n\t#createAfterPath = new UmbStringState(undefined);\r\n\treadonly createAfterPath = this.#createAfterPath.asObservable();\r\n\r\n\t#contentElementType = new UmbObjectState<UmbContentTypeModel | undefined>(undefined);\r\n\t//public readonly contentElementType = this.#contentElementType.asObservable();\r\n\tpublic readonly contentElementTypeName = this.#contentElementType.asObservablePart((x) => x?.name);\r\n\tpublic readonly contentElementTypeAlias = this.#contentElementType.asObservablePart((x) => x?.alias);\r\n\tpublic readonly contentElementTypeIcon = this.#contentElementType.asObservablePart((x) => x?.icon);\r\n\r\n\t/**\r\n\t * Get the name of the content element type.\r\n\t * @returns {string | undefined} - the name of the content element type.\r\n\t */\r\n\tpublic getContentElementTypeName(): string | undefined {\r\n\t\treturn this.#contentElementType.getValue()?.name;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the alias of the content element type.\r\n\t * @returns {string | undefined} - the alias of the content element type.\r\n\t */\r\n\tpublic getContentElementTypeAlias(): string | undefined {\r\n\t\treturn this.#contentElementType.getValue()?.alias;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the icon of the content element type.\r\n\t * @returns {string | undefined} - the icon of the content element type.\r\n\t */\r\n\tpublic getContentElementTypeIcon(): string | undefined {\r\n\t\treturn this.#contentElementType.getValue()?.icon;\r\n\t}\r\n\r\n\t_blockType = new UmbObjectState<BlockType | undefined>(undefined);\r\n\tpublic readonly blockType = this._blockType.asObservable();\r\n\tpublic readonly contentElementTypeKey = this._blockType.asObservablePart((x) => x?.contentElementTypeKey);\r\n\tpublic readonly settingsElementTypeKey = this._blockType.asObservablePart((x) =>\r\n\t\tx ? (x.settingsElementTypeKey ?? undefined) : null,\r\n\t);\r\n\r\n\t_layout = new UmbObjectState<BlockLayoutType | undefined>(undefined);\r\n\tpublic readonly layout = this._layout.asObservable();\r\n\tpublic readonly contentKey = this._layout.asObservablePart((x) => x?.contentKey);\r\n\tpublic readonly settingsKey = this._layout.asObservablePart((x) => (x ? (x.settingsKey ?? null) : undefined));\r\n\tpublic readonly unique = this._layout.asObservablePart((x) => x?.contentKey);\r\n\r\n\t/**\r\n\t * Get the layout of the block.\r\n\t * @returns {BlockLayoutType | undefined} - the layout of the block.\r\n\t */\r\n\tpublic getLayout(): BlockLayoutType | undefined {\r\n\t\treturn this._layout.getValue();\r\n\t}\r\n\r\n\t#label = new UmbStringState('');\r\n\tpublic readonly label = this.#label.asObservable();\r\n\tpublic getLabel() {\r\n\t\treturn this.#label.getValue();\r\n\t}\r\n\r\n\t#labelRender = new UmbUfmVirtualRenderController(this);\r\n\r\n\t#generateWorkspaceEditContentPath = (path?: string, contentKey?: string) =>\r\n\t\tpath && contentKey ? path + 'edit/' + encodeFilePath(contentKey) + '/view/content' : '';\r\n\r\n\t#generateWorkspaceEditSettingsPath = (path?: string, contentKey?: string) =>\r\n\t\tpath && contentKey ? path + 'edit/' + encodeFilePath(contentKey) + '/view/settings' : '';\r\n\r\n\t#workspacePath = new UmbStringState(undefined);\r\n\tpublic readonly workspacePath = this.#workspacePath.asObservable();\r\n\tpublic readonly workspaceEditContentPath = mergeObservables(\r\n\t\t[this.contentKey, this.workspacePath],\r\n\t\t([contentKey, path]) => this.#generateWorkspaceEditContentPath(path, contentKey),\r\n\t);\r\n\tpublic readonly workspaceEditSettingsPath = mergeObservables(\r\n\t\t[this.contentKey, this.workspacePath],\r\n\t\t([contentKey, path]) => this.#generateWorkspaceEditSettingsPath(path, contentKey),\r\n\t);\r\n\r\n\t#contentStructure?: UmbContentTypeStructureManager;\r\n\t#contentStructurePromiseResolve?: () => void;\r\n\t#contentStructurePromise = new Promise((resolve) => {\r\n\t\tthis.#contentStructurePromiseResolve = () => {\r\n\t\t\tresolve(undefined);\r\n\t\t\tthis.#contentStructurePromiseResolve = undefined;\r\n\t\t};\r\n\t});\r\n\r\n\t#contentStructureHasProperties = new UmbBooleanState(undefined);\r\n\t_contentStructureHasProperties = this.#contentStructureHasProperties.asObservable();\r\n\r\n\t#settingsStructure?: UmbContentTypeStructureManager;\r\n\t#settingsStructurePromiseResolve?: () => void;\r\n\t#settingsStructurePromise = new Promise((resolve) => {\r\n\t\tthis.#settingsStructurePromiseResolve = () => {\r\n\t\t\tresolve(undefined);\r\n\t\t\tthis.#settingsStructurePromiseResolve = undefined;\r\n\t\t};\r\n\t});\r\n\r\n\t#createPropertyVariantId(property: UmbPropertyTypeModel, variantId: UmbVariantId) {\r\n\t\treturn UmbVariantId.Create({\r\n\t\t\tculture: property.variesByCulture ? variantId.culture : null,\r\n\t\t\tsegment: property.variesBySegment ? variantId.segment : null,\r\n\t\t});\r\n\t}\r\n\r\n\tasync propertyVariantId(structure: UmbContentTypeStructureManager, propertyAlias: string) {\r\n\t\treturn mergeObservables(\r\n\t\t\t[await structure.propertyStructureByAlias(propertyAlias), this._variantId],\r\n\t\t\t([property, variantId]) =>\r\n\t\t\t\tproperty && variantId ? this.#createPropertyVariantId(property, variantId) : undefined,\r\n\t\t);\r\n\t}\r\n\r\n\tsetContentPropertyValue(propertyAlias: string, value: unknown) {\r\n\t\tif (!this.#contentKey) throw new Error('No content key set.');\r\n\t\tthis._manager?.setOneContentProperty(this.#contentKey, propertyAlias, value);\r\n\t}\r\n\tsetSettingsPropertyValue(propertyAlias: string, value: unknown) {\r\n\t\tconst settingsKey = this._layout.getValue()?.settingsKey;\r\n\t\tif (!settingsKey) throw new Error('Settings key was not available.');\r\n\t\tthis._manager?.setOneSettingsProperty(settingsKey, propertyAlias, value);\r\n\t}\r\n\r\n\tasync contentPropertyValueByAlias<PropertyValueType = unknown>(propertyAlias: string) {\r\n\t\tawait this.#contentStructurePromise;\r\n\t\treturn mergeObservables(\r\n\t\t\t[\r\n\t\t\t\tthis.#content.asObservablePart((data) => data?.values?.filter((x) => x?.alias === propertyAlias)),\r\n\t\t\t\tawait this.propertyVariantId(this.#contentStructure!, propertyAlias),\r\n\t\t\t],\r\n\t\t\t([propertyValues, propertyVariantId]) => {\r\n\t\t\t\tif (!propertyValues || !propertyVariantId) return;\r\n\r\n\t\t\t\treturn propertyValues.find((x) => propertyVariantId.compare(x))?.value as PropertyValueType;\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\tasync settingsPropertyValueByAlias<PropertyValueType = unknown>(propertyAlias: string) {\r\n\t\tawait this.#settingsStructurePromise;\r\n\t\treturn mergeObservables(\r\n\t\t\t[\r\n\t\t\t\tthis.#content.asObservablePart((data) => data?.values?.filter((x) => x?.alias === propertyAlias)),\r\n\t\t\t\tawait this.propertyVariantId(this.#settingsStructure!, propertyAlias),\r\n\t\t\t],\r\n\t\t\t([propertyValues, propertyVariantId]) => {\r\n\t\t\t\tif (!propertyValues || !propertyVariantId) return;\r\n\r\n\t\t\t\treturn propertyValues.find((x) => propertyVariantId.compare(x))?.value as PropertyValueType;\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t#content = new UmbObjectState<UmbBlockDataModel | undefined>(undefined);\r\n\tprotected readonly _contentValueArray = this.#content.asObservablePart((x) => x?.values);\r\n\tpublic readonly contentTypeKey = this.#content.asObservablePart((x) => x?.contentTypeKey);\r\n\t#contentValuesObservable?: Observable<UmbBlockDataType | undefined>;\r\n\tpublic async contentValues() {\r\n\t\tawait this.#contentStructurePromise;\r\n\t\tif (!this.#contentValuesObservable) {\r\n\t\t\tthis.#contentValuesObservable = mergeObservables(\r\n\t\t\t\t[this._contentValueArray, this.#contentStructure!.contentTypeProperties, this._variantId],\r\n\t\t\t\tthis.#propertyValuesToObjectCallback,\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn this.#contentValuesObservable;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the content of the block.\r\n\t * @returns {UmbBlockDataModel | undefined} - the content of the block.\r\n\t */\r\n\tpublic getContent(): UmbBlockDataModel | undefined {\r\n\t\treturn this.#content.getValue();\r\n\t}\r\n\r\n\t#settings = new UmbObjectState<UmbBlockDataModel | undefined>(undefined);\r\n\t//public readonly settings = this.#settings.asObservable();\r\n\tprotected readonly _settingsValueArray = this.#settings.asObservablePart((x) => x?.values);\r\n\tprivate readonly settingsDataContentTypeKey = this.#settings.asObservablePart((x) =>\r\n\t\tx ? (x.contentTypeKey ?? undefined) : null,\r\n\t);\r\n\t#settingsValuesObservable?: Observable<UmbBlockDataType | undefined>;\r\n\tpublic async settingsValues() {\r\n\t\tawait this.#settingsStructurePromise;\r\n\t\tif (!this.#settingsValuesObservable) {\r\n\t\t\tthis.#settingsValuesObservable = mergeObservables(\r\n\t\t\t\t[this._settingsValueArray, this.#settingsStructure!.contentTypeProperties, this._variantId],\r\n\t\t\t\tthis.#propertyValuesToObjectCallback,\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn this.#settingsValuesObservable;\r\n\t}\r\n\r\n\t#propertyValuesToObjectCallback = ([propertyValues, properties, variantId]: [\r\n\t\tUmbBlockDataValueModel<unknown>[] | undefined,\r\n\t\tUmbPropertyTypeModel[],\r\n\t\tUmbVariantId | undefined,\r\n\t]) => {\r\n\t\tif (!propertyValues || !properties || !variantId) return;\r\n\r\n\t\treturn properties.reduce((acc, property) => {\r\n\t\t\tconst propertyVariantId = this.#createPropertyVariantId(property, variantId);\r\n\t\t\tacc[property.alias] = propertyValues.find(\r\n\t\t\t\t(x) => x.alias === property.alias && propertyVariantId.compare(x),\r\n\t\t\t)?.value;\r\n\t\t\treturn acc;\r\n\t\t}, {} as UmbBlockDataType);\r\n\t};\r\n\r\n\t/**\r\n\t * Get the settings of the block.\r\n\t * @returns {UmbBlockDataModel | undefined} - the settings of the block.\r\n\t */\r\n\tpublic getSettings(): UmbBlockDataModel | undefined {\r\n\t\treturn this.#settings.getValue();\r\n\t}\r\n\r\n\tabstract readonly showContentEdit: Observable<boolean>;\r\n\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\tblockManagerContextToken: BlockManagerContextTokenType,\r\n\t\tblockEntriesContextToken: BlockEntriesContextTokenType,\r\n\t) {\r\n\t\tsuper(host, 'UmbBlockEntryContext');\r\n\r\n\t\tthis.observe(this.label, (label) => {\r\n\t\t\tthis.#labelRender.markdown = label;\r\n\t\t});\r\n\t\tthis.#watchContentForLabelRender();\r\n\r\n\t\t// Consume block manager:\r\n\t\tthis.consumeContext(blockManagerContextToken, (manager) => {\r\n\t\t\tthis._manager = manager;\r\n\t\t\tthis._gotManager();\r\n\t\t\tthis.#gotManager();\r\n\t\t});\r\n\r\n\t\t// Consume block entries:\r\n\t\tthis.consumeContext(blockEntriesContextToken, (entries) => {\r\n\t\t\tthis._entries = entries;\r\n\t\t\tthis._gotEntries();\r\n\t\t\tthis.#gotEntries();\r\n\t\t});\r\n\r\n\t\t// Observe key:\r\n\t\tthis.observe(\r\n\t\t\tthis.unique,\r\n\t\t\t(contentKey) => {\r\n\t\t\t\tthis.#pathAddendum.setAddendum(contentKey);\r\n\t\t\t\tif (!contentKey) return;\r\n\t\t\t\tthis.#observeContentData();\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\t// Observe contentElementTypeKey:\r\n\t\tthis.observe(\r\n\t\t\tthis.contentTypeKey,\r\n\t\t\t(contentElementTypeKey) => {\r\n\t\t\t\tif (!contentElementTypeKey) return;\r\n\r\n\t\t\t\tthis.#getContentStructure();\r\n\t\t\t\tthis.#observeBlockType();\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.settingsDataContentTypeKey,\r\n\t\t\t(settingsElementTypeKey) => {\r\n\t\t\t\tif (!settingsElementTypeKey) return;\r\n\t\t\t\tthis.#getSettingsStructure(settingsElementTypeKey);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\t// Observe blockType:\r\n\t\tthis.observe(\r\n\t\t\tthis.blockType,\r\n\t\t\t(blockType) => {\r\n\t\t\t\tif (!blockType) return;\r\n\t\t\t\tthis.#observeBlockTypeLabel();\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\t// Correct settings data, accordingly to configuration of the BlockType: [NL]\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.settingsElementTypeKey, this.settingsDataContentTypeKey]),\r\n\t\t\t([settingsElementTypeKey, settingsDataContentTypeKey]) => {\r\n\t\t\t\t// Notice the values are only undefined while we are missing the source of these observables. [NL]\r\n\t\t\t\tif (settingsElementTypeKey === undefined || settingsDataContentTypeKey === undefined) return;\r\n\t\t\t\t// Is there a difference between configuration and actual data key:\r\n\t\t\t\tif (settingsElementTypeKey !== settingsDataContentTypeKey) {\r\n\t\t\t\t\t// We need to update our key for the settings data [NL]\r\n\t\t\t\t\tif (settingsElementTypeKey != null) {\r\n\t\t\t\t\t\t// Update the settings model with latest elementTypeKey, so data is up to date with configuration: [NL]\r\n\t\t\t\t\t\tconst currentSettings = this.#settings.getValue();\r\n\t\t\t\t\t\tif (currentSettings) {\r\n\t\t\t\t\t\t\tthis._manager?.setOneSettings({ ...currentSettings, contentTypeKey: settingsElementTypeKey });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// We do not need to remove the settings if configuration is gone, cause another observation handles this. [NL]\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([this.settingsKey, this.blockType]),\r\n\t\t\tasync ([settingsKey, blockType]) => {\r\n\t\t\t\tif (!this.#contentKey || settingsKey === undefined || !blockType) return;\r\n\t\t\t\tif (settingsKey == null && blockType.settingsElementTypeKey) {\r\n\t\t\t\t\t// We have a settings ElementType in config but not in data, so lets create the scaffold for that: [NL]\r\n\t\t\t\t\tconst settingsData = await this._manager!.createBlockSettingsData(blockType.contentElementTypeKey); // Yes its on purpose we use the contentElementTypeKey here, as this is our identifier for a BlockType. [NL]\r\n\t\t\t\t\tthis._manager?.setOneSettings(settingsData);\r\n\t\t\t\t\tthis._layout.update({ settingsKey: settingsData.key } as Partial<BlockLayoutType>);\r\n\t\t\t\t} else if (settingsKey && blockType.settingsElementTypeKey === undefined) {\r\n\t\t\t\t\t// We no longer have settings ElementType in config. So we remove the settingsData and settings key from the layout. [NL]\r\n\t\t\t\t\tthis._manager?.removeOneSettings(settingsKey);\r\n\t\t\t\t\tthis._layout.update({ settingsKey: undefined } as Partial<BlockLayoutType>);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t}\r\n\r\n\tasync #watchContentForLabelRender() {\r\n\t\tthis.observe(await this.contentValues(), (content) => {\r\n\t\t\tthis.#labelRender.value = content;\r\n\t\t});\r\n\t}\r\n\r\n\tgetContentKey() {\r\n\t\treturn this._layout.value?.contentKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the contentKey of this entry.\r\n\t * @function setContentKey\r\n\t * @param {string} contentKey the entry content key.\r\n\t * @returns {void}\r\n\t */\r\n\tsetContentKey(contentKey: string) {\r\n\t\tthis.#contentKey = contentKey;\r\n\t\tthis.#observeLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value of this Blocks label.\r\n\t * @function getName\r\n\t * @returns {string} - the value of the label.\r\n\t */\r\n\tgetName() {\r\n\t\treturn this.#labelRender.toString();\r\n\t}\r\n\r\n\t#updateCreatePaths() {\r\n\t\tif (this._entries) {\r\n\t\t\tthis.observe(\r\n\t\t\t\tobserveMultiple([this.index, this._entries.catalogueRouteBuilder, this._entries.canCreate]),\r\n\t\t\t\t([index, catalogueRouteBuilder, canCreate]) => {\r\n\t\t\t\t\tif (index === undefined) return;\r\n\t\t\t\t\tif (catalogueRouteBuilder && canCreate) {\r\n\t\t\t\t\t\tthis.#createBeforePath.setValue(this._entries!.getPathForCreateBlock(index));\r\n\t\t\t\t\t\tthis.#createAfterPath.setValue(this._entries!.getPathForCreateBlock(index + 1));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.#createBeforePath.setValue(undefined);\r\n\t\t\t\t\t\tthis.#createAfterPath.setValue(undefined);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'observeRouteBuilderCreate',\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t#observeLayout() {\r\n\t\tif (!this._entries || !this.#contentKey) return;\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis._entries.layoutOf(this.#contentKey),\r\n\t\t\t(layout) => {\r\n\t\t\t\tthis._layout.setValue(layout);\r\n\t\t\t},\r\n\t\t\t'observeParentLayout',\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.layout,\r\n\t\t\t(layout) => {\r\n\t\t\t\tif (layout) {\r\n\t\t\t\t\tthis._entries?.setOneLayout(layout);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeThisLayout',\r\n\t\t);\r\n\t}\r\n\r\n\t#gotManager() {\r\n\t\tthis.#observeVariantId();\r\n\t\tthis.#observeBlockType();\r\n\t\tthis.#observeContentData();\r\n\t\tthis.#observeSettingsData();\r\n\t\tthis.#observeReadOnlyState();\r\n\t}\r\n\r\n\tabstract _gotManager(): void;\r\n\r\n\t#gotEntries() {\r\n\t\tthis.#updateCreatePaths();\r\n\t\tthis.#observeLayout();\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis._entries?.workspacePath,\r\n\t\t\t(workspacePath) => {\r\n\t\t\t\tthis.#workspacePath.setValue(workspacePath);\r\n\t\t\t},\r\n\t\t\t'observeWorkspacePath',\r\n\t\t);\r\n\t}\r\n\r\n\tabstract _gotEntries(): void;\r\n\r\n\t#observeContentData() {\r\n\t\tif (!this._manager || !this.#contentKey) return;\r\n\r\n\t\t// observe content:\r\n\t\tthis.observe(\r\n\t\t\tthis._manager.contentOf(this.#contentKey),\r\n\t\t\t(content) => {\r\n\t\t\t\tif (this.#unsupported.getValue() !== true) {\r\n\t\t\t\t\t// If we could not find content, then we do not know the contentTypeKey and then the content is broken. [NL]\r\n\t\t\t\t\tthis.#unsupported.setValue(!content);\r\n\t\t\t\t}\r\n\t\t\t\tthis.#content.setValue(content);\r\n\t\t\t},\r\n\t\t\t'observeContent',\r\n\t\t);\r\n\t}\r\n\t#observeSettingsData() {\r\n\t\t// observe settings:\r\n\t\tthis.observe(\r\n\t\t\tthis._manager ? this.settingsKey : undefined,\r\n\t\t\t(settingsKey) => {\r\n\t\t\t\tif (settingsKey) {\r\n\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\tthis._manager?.settingsOf(settingsKey),\r\n\t\t\t\t\t\t(settings) => {\r\n\t\t\t\t\t\t\tthis.#settings.setValue(settings);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t'observeSettings',\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeSettingsKey',\r\n\t\t);\r\n\t}\r\n\r\n\tabstract _gotContentType(contentType: UmbContentTypeModel | undefined): void;\r\n\r\n\tasync #observeVariantId() {\r\n\t\tif (!this._manager) {\r\n\t\t\tthis.removeUmbControllerByAlias('observeVariantId');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tawait this.#contentStructurePromise;\r\n\t\tif (!this.#contentStructure) {\r\n\t\t\tthrow new Error('No contentStructure found');\r\n\t\t}\r\n\r\n\t\tif (!this._manager) {\r\n\t\t\t// The manager maybe got removed while we awaited the promise above.\r\n\t\t\tthis.removeUmbControllerByAlias('observeVariantId');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// observe variantId:\r\n\t\tthis.observe(\r\n\t\t\tobserveMultiple([\r\n\t\t\t\tthis._manager.variantId,\r\n\t\t\t\tthis.#contentStructure.ownerContentTypeObservablePart((x) => x?.variesByCulture),\r\n\t\t\t\tthis.#contentStructure.ownerContentTypeObservablePart((x) => x?.variesBySegment),\r\n\t\t\t]),\r\n\t\t\t([variantId, variesByCulture, variesBySegment]) => {\r\n\t\t\t\tif (!variantId || variesByCulture === undefined || variesBySegment === undefined) return;\r\n\t\t\t\tthis.#variantId.setValue(variantId.toVariant(variesByCulture, variesBySegment));\r\n\t\t\t\tthis.#gotVariantId();\r\n\t\t\t},\r\n\t\t\t'observeVariantId',\r\n\t\t);\r\n\t}\r\n\r\n\t#observeReadOnlyState() {\r\n\t\tif (!this._manager) return;\r\n\r\n\t\t// TODO: Here is a potential future issue. This is parsing on the read only state of the variant that this is opened from, that is problematic when we enable switching variant within a Block. [NL]\r\n\t\t// TODO: This could benefit from a more dynamic approach, where we inherit all non-variant and variant scoped states. [NL]\r\n\t\tthis.observe(\r\n\t\t\t// TODO: Instead transfer all variant states.\r\n\t\t\tthis._manager.readOnlyState.isPermittedForObservableVariant(this._variantId),\r\n\t\t\t(isReadOnly) => {\r\n\t\t\t\tconst unique = 'UMB_BLOCK_MANAGER_CONTEXT';\r\n\r\n\t\t\t\tif (isReadOnly) {\r\n\t\t\t\t\tconst rule = {\r\n\t\t\t\t\t\tunique,\r\n\t\t\t\t\t\tvariantId: this.#variantId.getValue(),\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tthis.readOnlyGuard?.addRule(rule);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.readOnlyGuard?.removeRule(unique);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeIsReadOnly',\r\n\t\t);\r\n\t}\r\n\r\n\t#getContentStructure() {\r\n\t\tif (!this._manager) return;\r\n\r\n\t\tconst contentTypeKey = this.#content.getValue()?.contentTypeKey;\r\n\t\tif (!contentTypeKey) return;\r\n\r\n\t\t// observe blockType:\r\n\t\tthis.#contentStructure = this._manager.getStructure(contentTypeKey);\r\n\t\tthis.#contentStructurePromiseResolve?.();\r\n\r\n\t\tif (!this.#contentStructure) {\r\n\t\t\t// If we got no content structure, then this is element type did not load and there for it is not supported any longer.\r\n\t\t\tthis.#unsupported.setValue(true);\r\n\t\t}\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#contentStructure?.ownerContentType,\r\n\t\t\t(contentType) => {\r\n\t\t\t\t/**\r\n\t\t\t\t * currently only using:\r\n\t\t\t\t * Name, Alias, Icon\r\n\t\t\t\t */\r\n\t\t\t\tthis.#contentElementType.setValue(contentType);\r\n\t\t\t\tthis._gotContentType(contentType);\r\n\t\t\t},\r\n\t\t\t'observeContentElementType',\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#contentStructure?.contentTypeHasProperties,\r\n\t\t\t(has) => {\r\n\t\t\t\tthis.#contentStructureHasProperties.setValue(has);\r\n\t\t\t},\r\n\t\t\t'observeContentTypeHasProperties',\r\n\t\t);\r\n\t}\r\n\r\n\t#getSettingsStructure(contentTypeKey: string | undefined) {\r\n\t\tif (!this._manager || !contentTypeKey) return;\r\n\r\n\t\t// observe blockType:\r\n\t\tthis.#settingsStructure = this._manager.getStructure(contentTypeKey);\r\n\t\tthis.#settingsStructurePromiseResolve?.();\r\n\t}\r\n\r\n\t#observeBlockType() {\r\n\t\tif (!this._manager) return;\r\n\t\tconst contentTypeKey = this.#content.getValue()?.contentTypeKey;\r\n\t\tif (!contentTypeKey) return;\r\n\r\n\t\t// observe blockType:\r\n\t\tthis.observe(\r\n\t\t\tthis._manager.blockTypeOf(contentTypeKey),\r\n\t\t\t(blockType) => {\r\n\t\t\t\tthis._blockType.setValue(blockType as BlockType);\r\n\t\t\t\tif (!blockType) {\r\n\t\t\t\t\t// If the block type is undefined, then we do not have this Block Type and the Block is then unsupported. [NL]\r\n\t\t\t\t\tthis.#unsupported.setValue(true);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'observeBlockType',\r\n\t\t);\r\n\t}\r\n\r\n\t#observeBlockTypeLabel() {\r\n\t\tif (!this._manager) return;\r\n\t\tconst blockType = this._blockType.getValue();\r\n\t\tif (!blockType) return;\r\n\r\n\t\tif (blockType.label) {\r\n\t\t\tthis.removeUmbControllerByAlias('observeContentTypeName');\r\n\t\t\t// Missing part for label syntax, as we need to store the syntax, interpretive it and then set the label: (here we are just parsing the label syntax)\r\n\t\t\tthis.#label.setValue(blockType.label);\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\t// TODO: Maybe this could be skipped if we had a fallback label which was set to get the content element type name?\r\n\t\t\t// Get the name of the content element type for label:\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.contentElementTypeName,\r\n\t\t\t\t(contentTypeName) => {\r\n\t\t\t\t\tthis.#label.setValue(this.#localize.string(contentTypeName) || 'no name');\r\n\t\t\t\t},\r\n\t\t\t\t'observeContentTypeName',\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t#gotVariantId() {\r\n\t\tconst variantId = this.#variantId.getValue();\r\n\t\tif (!variantId || !this.#contentKey) return;\r\n\t\tthis.observe(\r\n\t\t\tthis._manager?.hasExposeOf(this.#contentKey, variantId),\r\n\t\t\t(hasExpose) => {\r\n\t\t\t\tthis.#hasExpose.setValue(hasExpose);\r\n\t\t\t},\r\n\t\t\t'observeExpose',\r\n\t\t);\r\n\t}\r\n\r\n\t// Public methods:\r\n\r\n\t//activate\r\n\tpublic edit() {\r\n\t\twindow.history.pushState(\r\n\t\t\t{},\r\n\t\t\t'',\r\n\t\t\tthis.#generateWorkspaceEditContentPath(this.#workspacePath.value, this.getContentKey()),\r\n\t\t);\r\n\t}\r\n\tpublic editSettings() {\r\n\t\twindow.history.pushState(\r\n\t\t\t{},\r\n\t\t\t'',\r\n\t\t\tthis.#generateWorkspaceEditSettingsPath(this.#workspacePath.value, this.getContentKey()),\r\n\t\t);\r\n\t}\r\n\r\n\tasync requestDelete() {\r\n\t\tconst blockName = this.getName();\r\n\t\tawait umbConfirmModal(this, {\r\n\t\t\theadline: this.#localize.term('blockEditor_confirmDeleteBlockTitle', blockName),\r\n\t\t\tcontent: this.#localize.term('blockEditor_confirmDeleteBlockMessage', blockName),\r\n\t\t\tconfirmLabel: this.#localize.term('general_delete'),\r\n\t\t\tcolor: 'danger',\r\n\t\t});\r\n\t\tthis.delete();\r\n\t}\r\n\r\n\tpublic delete() {\r\n\t\tif (!this._entries) return;\r\n\t\tconst contentKey = this._layout.value?.contentKey;\r\n\t\tif (!contentKey) return;\r\n\t\tthis._entries.delete(contentKey);\r\n\t}\r\n\r\n\tpublic expose() {\r\n\t\tconst variantId = this.#variantId.getValue();\r\n\t\tif (!variantId || !this.#contentKey) return;\r\n\t\tthis._manager?.setOneExpose(this.#contentKey, variantId);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the expose of the block.\r\n\t * @returns {UmbBlockExposeModel | undefined} - the expose of the block.\r\n\t */\r\n\tpublic getExpose(): UmbBlockExposeModel | undefined {\r\n\t\tconst exposes = this._manager?.getExposes();\r\n\t\treturn exposes?.find((x) => x.contentKey === this.#contentKey);\r\n\t}\r\n}\r\n","import type { UmbBlockWorkspaceOriginData } from '../workspace/index.js';\r\nimport type { UmbBlockLayoutBaseModel, UmbBlockDataModel, UmbBlockExposeModel } from '../types.js';\r\nimport { UMB_BLOCK_MANAGER_CONTEXT } from './block-manager.context-token.js';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport {\r\n\tUmbArrayState,\r\n\tUmbBooleanState,\r\n\tUmbClassState,\r\n\tUmbStringState,\r\n\ttype MappingFunction,\r\n\tmergeObservables,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbDocumentTypeDetailRepository } from '@umbraco-cms/backoffice/document-type';\r\nimport { UmbContentTypeStructureManager, type UmbContentTypeModel } from '@umbraco-cms/backoffice/content-type';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbPropertyEditorConfigCollection } from '@umbraco-cms/backoffice/property-editor';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UmbBlockTypeBaseModel } from '@umbraco-cms/backoffice/block-type';\r\nimport { UmbReadOnlyVariantGuardManager } from '@umbraco-cms/backoffice/utils';\r\nimport {\r\n\tUmbPropertyValuePresetVariantBuilderController,\r\n\ttype UmbPropertyTypePresetModel,\r\n\ttype UmbPropertyTypePresetModelTypeModel,\r\n} from '@umbraco-cms/backoffice/property';\r\nimport { UMB_APP_LANGUAGE_CONTEXT } from '@umbraco-cms/backoffice/language';\r\nimport { UmbDataTypeDetailRepository } from '@umbraco-cms/backoffice/data-type';\r\n\r\nexport type UmbBlockDataObjectModel<LayoutEntryType extends UmbBlockLayoutBaseModel> = {\r\n\tlayout: LayoutEntryType;\r\n\tcontent: UmbBlockDataModel;\r\n\tsettings?: UmbBlockDataModel;\r\n};\r\nexport abstract class UmbBlockManagerContext<\r\n\tBlockType extends UmbBlockTypeBaseModel = UmbBlockTypeBaseModel,\r\n\tBlockLayoutType extends UmbBlockLayoutBaseModel = UmbBlockLayoutBaseModel,\r\n\tBlockOriginDataType extends UmbBlockWorkspaceOriginData = UmbBlockWorkspaceOriginData,\r\n> extends UmbContextBase {\r\n\tget contentTypesLoaded() {\r\n\t\treturn Promise.all(this.#contentTypeRequests);\r\n\t}\r\n\t#contentTypeRequests: Array<Promise<unknown>> = [];\r\n\t#contentTypeRepository = new UmbDocumentTypeDetailRepository(this);\r\n\r\n\t#propertyAlias = new UmbStringState(undefined);\r\n\tpropertyAlias = this.#propertyAlias.asObservable();\r\n\tsetPropertyAlias(propertyAlias: string | undefined) {\r\n\t\tthis.#propertyAlias.setValue(propertyAlias);\r\n\t}\r\n\r\n\t#variantId = new UmbClassState<UmbVariantId | undefined>(undefined);\r\n\tvariantId = this.#variantId.asObservable();\r\n\tsetVariantId(variantId: UmbVariantId | undefined) {\r\n\t\tthis.#variantId.setValue(variantId);\r\n\t}\r\n\tgetVariantId(): UmbVariantId | undefined {\r\n\t\treturn this.#variantId.getValue();\r\n\t}\r\n\r\n\treadonly #structures: Array<UmbContentTypeStructureManager> = [];\r\n\r\n\t#blockTypes = new UmbArrayState(<Array<BlockType>>[], (x) => x.contentElementTypeKey);\r\n\tpublic readonly blockTypes = this.#blockTypes.asObservable();\r\n\r\n\tprotected _editorConfiguration = new UmbClassState<UmbPropertyEditorConfigCollection | undefined>(undefined);\r\n\tpublic readonly editorConfiguration = this._editorConfiguration.asObservable();\r\n\r\n\tprotected _liveEditingMode = new UmbBooleanState(undefined);\r\n\tpublic readonly liveEditingMode = this._liveEditingMode.asObservable();\r\n\r\n\tprotected _layouts = new UmbArrayState(<Array<BlockLayoutType>>[], (x) => x.contentKey);\r\n\tpublic readonly layouts = this._layouts.asObservable();\r\n\r\n\treadonly #contents = new UmbArrayState(<Array<UmbBlockDataModel>>[], (x) => x.key);\r\n\tpublic readonly contents = this.#contents.asObservable();\r\n\r\n\treadonly #settings = new UmbArrayState(<Array<UmbBlockDataModel>>[], (x) => x.key);\r\n\tpublic readonly settings = this.#settings.asObservable();\r\n\r\n\t// TODO: This is a bad seperation of concerns, this should be self initializing, not defined from the outside. [NL]\r\n\tpublic readonly readOnlyState = new UmbReadOnlyVariantGuardManager(this);\r\n\r\n\treadonly #exposes = new UmbArrayState(\r\n\t\t<Array<UmbBlockExposeModel>>[],\r\n\t\t(x) => x.contentKey + '_' + x.culture + '_' + x.segment,\r\n\t);\r\n\tpublic readonly exposes = this.#exposes.asObservable();\r\n\r\n\tsetEditorConfiguration(configs: UmbPropertyEditorConfigCollection) {\r\n\t\tthis._editorConfiguration.setValue(configs);\r\n\t\tif (this._liveEditingMode.getValue() === undefined) {\r\n\t\t\tthis._liveEditingMode.setValue(configs.getValueByAlias<boolean>('useLiveEditing'));\r\n\t\t}\r\n\t}\r\n\tgetEditorConfiguration(): UmbPropertyEditorConfigCollection | undefined {\r\n\t\treturn this._editorConfiguration.getValue();\r\n\t}\r\n\teditorConfigurationPart(method: MappingFunction<UmbPropertyEditorConfigCollection | undefined, unknown>) {\r\n\t\treturn this._editorConfiguration.asObservablePart(method);\r\n\t}\r\n\r\n\tsetBlockTypes(blockTypes: Array<BlockType>) {\r\n\t\tthis.#blockTypes.setValue(blockTypes);\r\n\t}\r\n\tgetBlockTypes() {\r\n\t\treturn this.#blockTypes.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Set all layouts.\r\n\t * @param {Array<BlockLayoutType>} layouts - All layouts.\r\n\t */\r\n\tsetLayouts(layouts: Array<BlockLayoutType>) {\r\n\t\tthis._layouts.setValue(layouts);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all layouts.\r\n\t * @returns {Array<BlockLayoutType>} - All layouts.\r\n\t */\r\n\tgetLayouts(): Array<BlockLayoutType> {\r\n\t\treturn this._layouts.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Set all contents.\r\n\t * @param {Array<UmbBlockDataModel>} contents - All contents.\r\n\t */\r\n\tsetContents(contents: Array<UmbBlockDataModel>) {\r\n\t\tthis.#contents.setValue(contents);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all contents.\r\n\t * @returns {Array<UmbBlockDataModel>} - All contents.\r\n\t */\r\n\tgetContents(): Array<UmbBlockDataModel> {\r\n\t\treturn this.#contents.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Set all settings.\r\n\t * @param {Array<UmbBlockDataModel>} settings - All settings.\r\n\t */\r\n\tsetSettings(settings: Array<UmbBlockDataModel>) {\r\n\t\tthis.#settings.setValue(settings);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all settings.\r\n\t * @returns {Array<UmbBlockDataModel>} - All settings.\r\n\t */\r\n\tgetSettings(): Array<UmbBlockDataModel> {\r\n\t\treturn this.#settings.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Set all exposes.\r\n\t * @param {Array<UmbBlockExposeModel>} exposes - All exposes.\r\n\t */\r\n\tsetExposes(exposes: Array<UmbBlockExposeModel>) {\r\n\t\tthis.#exposes.setValue(exposes);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all exposes.\r\n\t * @returns {Array<UmbBlockExposeModel>} - All exposes.\r\n\t */\r\n\tgetExposes(): Array<UmbBlockExposeModel> {\r\n\t\treturn this.#exposes.value;\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_BLOCK_MANAGER_CONTEXT);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.blockTypes,\r\n\t\t\t(blockTypes) => {\r\n\t\t\t\tblockTypes.forEach((x) => {\r\n\t\t\t\t\tthis.#ensureContentType(x.contentElementTypeKey);\r\n\t\t\t\t\tif (x.settingsElementTypeKey) {\r\n\t\t\t\t\t\tthis.#ensureContentType(x.settingsElementTypeKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t}\r\n\r\n\tasync #ensureContentType(unique: string) {\r\n\t\tif (this.#structures.find((x) => x.getOwnerContentTypeUnique() === unique)) return;\r\n\r\n\t\t// Lets try to go with the UmbContentTypeModel, to make this as compatible with other ContentTypes as possible, but maybe if off with this as Blocks are always based on ElementTypes.. [NL]\r\n\t\tconst structure = new UmbContentTypeStructureManager<UmbContentTypeModel>(this, this.#contentTypeRepository);\r\n\t\tconst initialRequest = structure.loadType(unique);\r\n\t\tthis.#contentTypeRequests.push(initialRequest);\r\n\t\tthis.#structures.push(structure);\r\n\t}\r\n\r\n\tgetStructure(unique: string) {\r\n\t\treturn this.#structures.find((x) => x.getOwnerContentTypeUnique() === unique);\r\n\t}\r\n\r\n\tgetContentTypeKeyOfContentKey(contentKey: string) {\r\n\t\treturn this.getContentOf(contentKey)?.contentTypeKey;\r\n\t}\r\n\tcontentTypeOf(contentTypeKey: string) {\r\n\t\tconst structure = this.#structures.find((x) => x.getOwnerContentTypeUnique() === contentTypeKey);\r\n\t\tif (!structure) return undefined;\r\n\r\n\t\treturn structure.ownerContentType;\r\n\t}\r\n\tcontentTypeNameOf(contentTypeKey: string) {\r\n\t\tconst structure = this.#structures.find((x) => x.getOwnerContentTypeUnique() === contentTypeKey);\r\n\t\tif (!structure) return undefined;\r\n\r\n\t\treturn structure.ownerContentTypeObservablePart((x) => x?.name);\r\n\t}\r\n\tgetContentTypeNameOf(contentTypeKey: string) {\r\n\t\tconst structure = this.#structures.find((x) => x.getOwnerContentTypeUnique() === contentTypeKey);\r\n\t\tif (!structure) return undefined;\r\n\r\n\t\treturn structure.getOwnerContentType()?.name;\r\n\t}\r\n\tgetContentTypeHasProperties(contentTypeKey: string) {\r\n\t\tconst structure = this.#structures.find((x) => x.getOwnerContentTypeUnique() === contentTypeKey);\r\n\t\tif (!structure) return undefined;\r\n\r\n\t\treturn structure.getHasProperties();\r\n\t}\r\n\tblockTypeOf(contentTypeKey: string) {\r\n\t\treturn this.#blockTypes.asObservablePart((source) =>\r\n\t\t\tsource.find((x) => x.contentElementTypeKey === contentTypeKey),\r\n\t\t);\r\n\t}\r\n\r\n\tlayoutOf(contentKey: string) {\r\n\t\treturn this._layouts.asObservablePart((source) => source.find((x) => x.contentKey === contentKey));\r\n\t}\r\n\tcontentOf(key: string) {\r\n\t\treturn this.#contents.asObservablePart((source) => source.find((x) => x.key === key));\r\n\t}\r\n\tsettingsOf(key: string) {\r\n\t\treturn this.#settings.asObservablePart((source) => source.find((x) => x.key === key));\r\n\t}\r\n\tcurrentExposeOf(contentKey: string) {\r\n\t\tconst variantId = this.getVariantId();\r\n\t\tif (!variantId) return;\r\n\t\treturn mergeObservables(\r\n\t\t\t[this.#exposes.asObservablePart((source) => source.filter((x) => x.contentKey === contentKey)), this.variantId],\r\n\t\t\t([exposes, variantId]) => (variantId ? exposes.find((x) => variantId.compare(x)) : undefined),\r\n\t\t);\r\n\t}\r\n\r\n\thasExposeOf(contentKey: string, variantId: UmbVariantId) {\r\n\t\tif (!variantId) return;\r\n\t\treturn this.#exposes.asObservablePart((source) =>\r\n\t\t\tsource.some((x) => x.contentKey === contentKey && variantId.compare(x)),\r\n\t\t);\r\n\t}\r\n\r\n\tgetBlockTypeOf(contentTypeKey: string) {\r\n\t\treturn this.#blockTypes.value.find((x) => x.contentElementTypeKey === contentTypeKey);\r\n\t}\r\n\tgetContentOf(contentKey: string) {\r\n\t\treturn this.#contents.value.find((x) => x.key === contentKey);\r\n\t}\r\n\tgetSettingsOf(settingsKey: string) {\r\n\t\treturn this.#settings.value.find((x) => x.key === settingsKey);\r\n\t}\r\n\t// originData param is used by some implementations. [NL] should be here, do not remove it.\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tsetOneLayout(layoutData: BlockLayoutType, _originData?: BlockOriginDataType) {\r\n\t\tthis._layouts.appendOne(layoutData);\r\n\t}\r\n\tsetOneContent(contentData: UmbBlockDataModel) {\r\n\t\tthis.#contents.appendOne(contentData);\r\n\t}\r\n\tsetOneSettings(settingsData: UmbBlockDataModel) {\r\n\t\tthis.#settings.appendOne(settingsData);\r\n\t}\r\n\tsetOneExpose(contentKey: string, variantId: UmbVariantId) {\r\n\t\tif (!variantId) return;\r\n\t\tthis.#exposes.appendOne({ contentKey, ...variantId.toObject() });\r\n\t}\r\n\r\n\tremoveOneContent(contentKey: string) {\r\n\t\tthis.#contents.removeOne(contentKey);\r\n\t}\r\n\tremoveOneSettings(settingsKey: string) {\r\n\t\tthis.#settings.removeOne(settingsKey);\r\n\t}\r\n\r\n\tremoveManyContent(contentKeys: Array<string>) {\r\n\t\tthis.#contents.remove(contentKeys);\r\n\t}\r\n\tremoveManySettings(settingsKeys: Array<string>) {\r\n\t\tthis.#settings.remove(settingsKeys);\r\n\t}\r\n\r\n\tremoveExposesOf(contentKey: string) {\r\n\t\tthis.#exposes.filter((x) => x.contentKey !== contentKey);\r\n\t}\r\n\tremoveCurrentExpose(contentKey: string) {\r\n\t\tconst variantId = this.getVariantId();\r\n\t\tif (!variantId) return;\r\n\t\tthis.#exposes.filter((x) => !(x.contentKey === contentKey && variantId.compare(x)));\r\n\t}\r\n\r\n\tsetOneContentProperty(key: string, propertyAlias: string, value: unknown) {\r\n\t\tthis.#contents.updateOne(key, { [propertyAlias]: value });\r\n\t}\r\n\tsetOneSettingsProperty(key: string, propertyAlias: string, value: unknown) {\r\n\t\tthis.#settings.updateOne(key, { [propertyAlias]: value });\r\n\t}\r\n\r\n\tcontentProperty(key: string, propertyAlias: string) {\r\n\t\tthis.#contents.asObservablePart(\r\n\t\t\t(source) => source.find((x) => x.key === key)?.values?.find((values) => values.alias === propertyAlias)?.value,\r\n\t\t);\r\n\t}\r\n\tsettingsProperty(key: string, propertyAlias: string) {\r\n\t\tthis.#settings.asObservablePart(\r\n\t\t\t(source) => source.find((x) => x.key === key)?.values?.find((values) => values.alias === propertyAlias)?.value,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated Use `createWithPresets` instead. Which is Async. Will be removed in v.17\r\n\t * @param contentElementTypeKey\r\n\t * @param partialLayoutEntry\r\n\t * @param originData\r\n\t */\r\n\tabstract create(\r\n\t\tcontentElementTypeKey: string,\r\n\t\tpartialLayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t\toriginData?: BlockOriginDataType,\r\n\t): never;\r\n\r\n\tabstract createWithPresets(\r\n\t\tcontentElementTypeKey: string,\r\n\t\tpartialLayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t\toriginData?: BlockOriginDataType,\r\n\t): Promise<UmbBlockDataObjectModel<BlockLayoutType> | undefined>;\r\n\r\n\tpublic async createBlockSettingsData(contentElementTypeKey: string) {\r\n\t\tconst blockType = this.#blockTypes.value.find((x) => x.contentElementTypeKey === contentElementTypeKey);\r\n\t\tif (!blockType) {\r\n\t\t\tthrow new Error(`Cannot create block settings, missing block type for ${contentElementTypeKey}`);\r\n\t\t}\r\n\t\tif (!blockType.settingsElementTypeKey) {\r\n\t\t\tthrow new Error(`Cannot create block settings, missing settings element type for ${contentElementTypeKey}`);\r\n\t\t}\r\n\r\n\t\t// TODO: Handle presets here [NL]\r\n\r\n\t\treturn {\r\n\t\t\tkey: UmbId.new(),\r\n\t\t\tcontentTypeKey: blockType.settingsElementTypeKey,\r\n\t\t\tvalues: [],\r\n\t\t};\r\n\t}\r\n\r\n\tprotected async _createBlockElementData(key: string, contentTypeKey: string) {\r\n\t\t//\r\n\t\tconst appLanguage = await this.getContext(UMB_APP_LANGUAGE_CONTEXT);\r\n\t\tif (!appLanguage) {\r\n\t\t\tthrow new Error('Could not retrieve app language context.');\r\n\t\t}\r\n\r\n\t\tconst contentStructure = this.getStructure(contentTypeKey);\r\n\t\tif (!contentStructure) {\r\n\t\t\tthrow new Error(`Cannot create Preset for Block, missing content structure for ${contentTypeKey}`);\r\n\t\t}\r\n\r\n\t\t// Set culture and segment for all values:\r\n\t\tconst cutlures = contentStructure.variesByCulture ? await appLanguage.getCultures() : [];\r\n\t\tif (cutlures.length === 0) {\r\n\t\t\tthrow new Error('Could not retrieve app cultures.');\r\n\t\t}\r\n\t\t// TODO: Receive the segments from somewhere. [NL]\r\n\t\tconst segments: Array<string> | undefined = contentStructure.variesBySegment ? [] : undefined;\r\n\r\n\t\tconst repo = new UmbDataTypeDetailRepository(this);\r\n\r\n\t\tconst propertyTypes = await contentStructure.getContentTypeProperties();\r\n\t\tconst valueDefinitions = await Promise.all(\r\n\t\t\tpropertyTypes.map(async (property) => {\r\n\t\t\t\t// TODO: Implement caching for data-type requests. [NL]\r\n\t\t\t\tconst dataType = (await repo.requestByUnique(property.dataType.unique)).data;\r\n\t\t\t\t// This means if its not loaded this will never resolve and the error below will never happen.\r\n\t\t\t\tif (!dataType) {\r\n\t\t\t\t\tthrow new Error(`DataType of \"${property.dataType.unique}\" not found.`);\r\n\t\t\t\t}\r\n\t\t\t\tif (!dataType.editorUiAlias) {\r\n\t\t\t\t\tthrow new Error(`DataType of \"${property.dataType.unique}\" did not have a editorUiAlias.`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\talias: property.alias,\r\n\t\t\t\t\tpropertyEditorUiAlias: dataType.editorUiAlias,\r\n\t\t\t\t\tpropertyEditorSchemaAlias: dataType.editorAlias,\r\n\t\t\t\t\tconfig: dataType.values,\r\n\t\t\t\t\ttypeArgs: {\r\n\t\t\t\t\t\tvariesByCulture: property.variesByCulture,\r\n\t\t\t\t\t\tvariesBySegment: property.variesBySegment,\r\n\t\t\t\t\t} as UmbPropertyTypePresetModelTypeModel,\r\n\t\t\t\t} as UmbPropertyTypePresetModel;\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tconst controller = new UmbPropertyValuePresetVariantBuilderController(this);\r\n\t\tcontroller.setCultures(cutlures);\r\n\t\tif (segments) {\r\n\t\t\tcontroller.setSegments(segments);\r\n\t\t}\r\n\t\tconst values = await controller.create(valueDefinitions);\r\n\r\n\t\t// Set culture and segment for all values:\r\n\r\n\t\treturn {\r\n\t\t\tkey,\r\n\t\t\tcontentTypeKey,\r\n\t\t\tvalues,\r\n\t\t};\r\n\t}\r\n\r\n\tprotected async _createBlockData(\r\n\t\tcontentElementTypeKey: string,\r\n\t\tpartialLayoutEntry?: Omit<BlockLayoutType, 'contentKey'>,\r\n\t) {\r\n\t\t// Find block type.\r\n\t\tconst blockType = this.#blockTypes.value.find((x) => x.contentElementTypeKey === contentElementTypeKey);\r\n\t\tif (!blockType) {\r\n\t\t\tthrow new Error(`Cannot create block, missing block type for ${contentElementTypeKey}`);\r\n\t\t}\r\n\r\n\t\t// Create layout entry:\r\n\t\tconst layout: BlockLayoutType = {\r\n\t\t\tcontentKey: UmbId.new(),\r\n\t\t\t...(partialLayoutEntry as Partial<BlockLayoutType>),\r\n\t\t} as BlockLayoutType;\r\n\r\n\t\tconst content = await this._createBlockElementData(layout.contentKey, contentElementTypeKey);\r\n\t\tlet settings: UmbBlockDataModel | undefined = undefined;\r\n\r\n\t\tif (blockType.settingsElementTypeKey) {\r\n\t\t\tlayout.settingsKey = UmbId.new();\r\n\t\t\tsettings = await this._createBlockElementData(layout.settingsKey, blockType.settingsElementTypeKey);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlayout,\r\n\t\t\tcontent,\r\n\t\t\tsettings,\r\n\t\t};\r\n\t}\r\n\r\n\tabstract insert(\r\n\t\tlayoutEntry: BlockLayoutType,\r\n\t\tcontent: UmbBlockDataModel,\r\n\t\tsettings: UmbBlockDataModel | undefined,\r\n\t\toriginData: BlockOriginDataType,\r\n\t): boolean;\r\n\r\n\tprotected insertBlockData(\r\n\t\tlayoutEntry: BlockLayoutType,\r\n\t\tcontent: UmbBlockDataModel,\r\n\t\tsettings: UmbBlockDataModel | undefined,\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\t_originData: BlockOriginDataType,\r\n\t) {\r\n\t\t// Create content entry:\r\n\t\tif (layoutEntry.contentKey) {\r\n\t\t\tthis.#contents.appendOne(content);\r\n\t\t} else {\r\n\t\t\tthrow new Error('Cannot create block, missing contentKey');\r\n\t\t}\r\n\r\n\t\t//Create settings entry:\r\n\t\tif (settings && layoutEntry.settingsKey) {\r\n\t\t\tthis.#settings.appendOne(settings);\r\n\t\t}\r\n\r\n\t\t// Expose inserted block:\r\n\t\tthis.#setInitialBlockExpose(content);\r\n\t}\r\n\r\n\tasync #setInitialBlockExpose(content: UmbBlockDataModel) {\r\n\t\tawait this.contentTypesLoaded;\r\n\t\tconst contentStructure = this.getStructure(content.contentTypeKey);\r\n\t\tif (!contentStructure) {\r\n\t\t\tthrow new Error(`Cannot expose block, missing content structure for ${content.contentTypeKey}`);\r\n\t\t}\r\n\t\tconst variantId = this.getVariantId();\r\n\t\tif (!variantId) {\r\n\t\t\tthrow new Error(`Cannot expose block, missing variantId`);\r\n\t\t}\r\n\r\n\t\tconst varyByCulture = contentStructure.getVariesByCulture();\r\n\t\tconst varyBySegment = contentStructure.getVariesBySegment();\r\n\t\tconst blockVariantId = variantId.toVariant(varyByCulture, varyBySegment);\r\n\t\tthis.setOneExpose(content.key, blockVariantId);\r\n\r\n\t\tif (varyByCulture) {\r\n\t\t\t// get all mandatory cultures:\r\n\t\t\tconst appLanguageContext = await this.getContext(UMB_APP_LANGUAGE_CONTEXT);\r\n\t\t\tif (!appLanguageContext) {\r\n\t\t\t\tthrow new Error('Could not retrieve app language context.');\r\n\t\t\t}\r\n\t\t\tconst mandatoryLanguages = await appLanguageContext.getMandatoryLanguages();\r\n\t\t\tmandatoryLanguages.forEach((x) => {\r\n\t\t\t\t// No need to insert the same expose twice:\r\n\t\t\t\tif (blockVariantId.culture !== x.unique) {\r\n\t\t\t\t\tthis.setOneExpose(content.key, new UmbVariantId(x.unique));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected removeBlockKey(contentKey: string) {\r\n\t\tthis.#contents.removeOne(contentKey);\r\n\t}\r\n}\r\n","import type { UmbBlockLayoutBaseModel, UmbBlockValueType } from '../types.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbPropertyValueCloner } from '@umbraco-cms/backoffice/property';\r\n\r\nexport type UmbBlockPropertyValueClonerArgs = {\r\n\tcontentIdUpdatedCallback?: (oldContentKey: string, newContentKey: string) => void;\r\n};\r\n\r\nexport abstract class UmbBlockPropertyValueCloner<\r\n\tValueType extends UmbBlockValueType,\r\n\tLayoutEntryType extends UmbBlockLayoutBaseModel = UmbBlockLayoutBaseModel,\r\n> implements UmbPropertyValueCloner<ValueType>\r\n{\r\n\t#contentIdUpdatedCallback?: UmbBlockPropertyValueClonerArgs['contentIdUpdatedCallback'];\r\n\r\n\t#propertyEditorAlias: string;\r\n\t#contentData?: ValueType['contentData'];\r\n\t#settingsData?: ValueType['settingsData'];\r\n\t#expose?: ValueType['expose'];\r\n\r\n\tconstructor(propertyEditorAlias: string, args?: UmbBlockPropertyValueClonerArgs) {\r\n\t\tthis.#propertyEditorAlias = propertyEditorAlias;\r\n\t\tthis.#contentIdUpdatedCallback = args?.contentIdUpdatedCallback;\r\n\t}\r\n\r\n\tasync cloneValue(value: ValueType) {\r\n\t\tif (value) {\r\n\t\t\tthis.#contentData = value.contentData;\r\n\t\t\tthis.#settingsData = value.settingsData;\r\n\t\t\tthis.#expose = value.expose;\r\n\r\n\t\t\tconst result = {\r\n\t\t\t\t...value,\r\n\t\t\t\tlayout: {\r\n\t\t\t\t\t[this.#propertyEditorAlias]: await this._cloneLayout(\r\n\t\t\t\t\t\tvalue.layout[this.#propertyEditorAlias] as unknown as Array<LayoutEntryType>,\r\n\t\t\t\t\t),\r\n\t\t\t\t},\r\n\t\t\t\tcontentData: this.#contentData,\r\n\t\t\t\tsettingsData: this.#settingsData,\r\n\t\t\t\texpose: this.#expose,\r\n\t\t\t};\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tprotected abstract _cloneLayout(\r\n\t\tlayouts: Array<LayoutEntryType> | undefined,\r\n\t): Promise<Array<LayoutEntryType> | undefined> | undefined;\r\n\r\n\tprotected async _cloneBlock(layoutEntry: LayoutEntryType): Promise<LayoutEntryType> {\r\n\t\tconst clonedLayoutEntry = { ...layoutEntry };\r\n\r\n\t\tconst contentKey = layoutEntry.contentKey;\r\n\t\tconst settingsKey = layoutEntry.settingsKey;\r\n\r\n\t\t// Generate new contentKey and settingsKey:\r\n\t\tconst newContentKey = UmbId.new();\r\n\t\tclonedLayoutEntry.contentKey = newContentKey;\r\n\r\n\t\t// Replace contentKeys in contentData\r\n\t\tthis.#contentData = this.#contentData?.map((contentData) => {\r\n\t\t\tif (contentData.key === contentKey) {\r\n\t\t\t\treturn { ...contentData, key: newContentKey };\r\n\t\t\t}\r\n\t\t\treturn contentData;\r\n\t\t});\r\n\r\n\t\t// Replace contentKey in expose:\r\n\t\tthis.#expose = this.#expose?.map((expose) => {\r\n\t\t\tif (expose.contentKey === contentKey) {\r\n\t\t\t\treturn { ...expose, contentKey: newContentKey };\r\n\t\t\t}\r\n\t\t\treturn expose;\r\n\t\t});\r\n\r\n\t\tthis.#contentIdUpdatedCallback?.(contentKey, newContentKey);\r\n\r\n\t\tif (settingsKey) {\r\n\t\t\tconst newSettingsKey = UmbId.new();\r\n\t\t\tclonedLayoutEntry.settingsKey = newSettingsKey;\r\n\t\t\t// Replace settingsKeys in settingsData\r\n\t\t\tthis.#settingsData = this.#settingsData?.map((settingsData) => {\r\n\t\t\t\tif (settingsData.key === settingsKey) {\r\n\t\t\t\t\treturn { ...settingsData, key: newSettingsKey };\r\n\t\t\t\t}\r\n\t\t\t\treturn settingsData;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn clonedLayoutEntry;\r\n\t}\r\n\r\n\tdestroy(): void {}\r\n}\r\n","import type { UmbBlockLayoutBaseModel, UmbBlockValueType } from '../types.js';\r\nimport { UmbBlockPropertyValueCloner } from './block-property-value-cloner.api.js';\r\nexport class UmbFlatLayoutBlockPropertyValueCloner<\r\n\tValueType extends UmbBlockValueType = UmbBlockValueType,\r\n> extends UmbBlockPropertyValueCloner<ValueType> {\r\n\t//\r\n\t_cloneLayout(\r\n\t\tlayouts: Array<UmbBlockLayoutBaseModel> | undefined,\r\n\t): Promise<Array<UmbBlockLayoutBaseModel> | undefined> | undefined {\r\n\t\treturn layouts ? Promise.all(layouts.map((layout) => this._cloneBlock(layout))) : undefined;\r\n\t}\r\n}\r\n","import type { UmbBlockDataValueModel, UmbBlockExposeModel, UmbBlockValueDataPropertiesBaseType } from '../types.js';\r\nimport type { UmbElementValueModel } from '@umbraco-cms/backoffice/content';\r\nimport type { UmbPropertyValueResolver } from '@umbraco-cms/backoffice/property';\r\n\r\nexport abstract class UmbBlockValueResolver<ValueType>\r\n\timplements UmbPropertyValueResolver<UmbElementValueModel<ValueType>, UmbBlockDataValueModel, UmbBlockExposeModel>\r\n{\r\n\tabstract processValues(\r\n\t\tproperty: UmbElementValueModel<ValueType>,\r\n\t\tvaluesCallback: (values: Array<UmbBlockDataValueModel>) => Promise<Array<UmbBlockDataValueModel> | undefined>,\r\n\t): Promise<UmbElementValueModel<ValueType>>;\r\n\r\n\tprotected async _processValueBlockData<ValueType extends UmbBlockValueDataPropertiesBaseType>(\r\n\t\tvalue: ValueType,\r\n\t\tvaluesCallback: (values: Array<UmbBlockDataValueModel>) => Promise<Array<UmbBlockDataValueModel> | undefined>,\r\n\t) {\r\n\t\tconst contentData = await Promise.all(\r\n\t\t\tvalue.contentData?.map(async (entry) => ({\r\n\t\t\t\t...entry,\r\n\t\t\t\tvalues: (await valuesCallback(entry.values)) ?? [],\r\n\t\t\t})),\r\n\t\t);\r\n\t\tconst settingsData = await Promise.all(\r\n\t\t\tvalue.settingsData?.map(async (entry) => ({\r\n\t\t\t\t...entry,\r\n\t\t\t\tvalues: (await valuesCallback(entry.values)) ?? [],\r\n\t\t\t})),\r\n\t\t);\r\n\t\treturn { ...value, contentData, settingsData };\r\n\t}\r\n\r\n\tabstract processVariants(\r\n\t\tproperty: UmbElementValueModel<ValueType>,\r\n\t\tvariantsCallback: (values: Array<UmbBlockExposeModel>) => Promise<Array<UmbBlockExposeModel> | undefined>,\r\n\t): Promise<UmbElementValueModel<ValueType>>;\r\n\r\n\tprotected async _processVariantBlockData<ValueType extends UmbBlockValueDataPropertiesBaseType>(\r\n\t\tvalue: ValueType,\r\n\t\tvariantsCallback: (values: Array<UmbBlockExposeModel>) => Promise<Array<UmbBlockExposeModel> | undefined>,\r\n\t) {\r\n\t\tconst expose = (await variantsCallback(value.expose ?? [])) ?? [];\r\n\t\treturn { ...value, expose };\r\n\t}\r\n\r\n\tcompareVariants(a: UmbBlockExposeModel, b: UmbBlockExposeModel) {\r\n\t\treturn a.contentKey === b.contentKey && a.culture === b.culture && a.segment === b.segment;\r\n\t}\r\n\r\n\tdestroy(): void {}\r\n}\r\n","import type { UmbBlockDataValueModel, UmbBlockExposeModel, UmbBlockValueType } from '../types.js';\r\nimport { UmbBlockValueResolver } from './block-value-resolver.api.js';\r\nimport type { UmbElementValueModel } from '@umbraco-cms/backoffice/content';\r\n\r\nexport class UmbStandardBlockValueResolver extends UmbBlockValueResolver<UmbBlockValueType> {\r\n\tasync processValues(\r\n\t\tproperty: UmbElementValueModel<UmbBlockValueType>,\r\n\t\tvaluesCallback: (values: Array<UmbBlockDataValueModel>) => Promise<Array<UmbBlockDataValueModel> | undefined>,\r\n\t) {\r\n\t\tif (property.value) {\r\n\t\t\treturn {\r\n\t\t\t\t...property,\r\n\t\t\t\tvalue: await this._processValueBlockData(property.value, valuesCallback),\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn property;\r\n\t}\r\n\r\n\tasync processVariants(\r\n\t\tproperty: UmbElementValueModel<UmbBlockValueType>,\r\n\t\tvariantsCallback: (values: Array<UmbBlockExposeModel>) => Promise<Array<UmbBlockExposeModel> | undefined>,\r\n\t) {\r\n\t\tif (property.value) {\r\n\t\t\treturn {\r\n\t\t\t\t...property,\r\n\t\t\t\tvalue: await this._processVariantBlockData(property.value, variantsCallback),\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn property;\r\n\t}\r\n}\r\n","import type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDeprecation } from '@umbraco-cms/backoffice/utils';\r\nimport {\r\n\tUmbAbstractArrayValidationPathTranslator,\r\n\tUmbDataPathPropertyValueQuery,\r\n} from '@umbraco-cms/backoffice/validation';\r\n\r\nconst ctrlAlias = Symbol();\r\n\r\nexport class UmbBlockElementValuesDataValidationPathTranslator extends UmbAbstractArrayValidationPathTranslator {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, '$.values[', UmbDataPathPropertyValueQuery, ctrlAlias);\r\n\r\n\t\tnew UmbDeprecation({\r\n\t\t\tremoveInVersion: '17',\r\n\t\t\tdeprecated: 'UmbBlockElementValuesDataValidationPathTranslator',\r\n\t\t\tsolution: 'UmbBlockElementValuesDataValidationPathTranslator is deprecated.',\r\n\t\t}).warn();\r\n\t}\r\n\r\n\tgetDataFromIndex(index: number) {\r\n\t\tif (!this._context) return;\r\n\t\tconst data = this._context.getTranslationData();\r\n\t\treturn data.values[index];\r\n\t}\r\n}\r\n","import type { UmbBlockDataModel } from '../types.js';\r\n\r\n/**\r\n * Validation Data Path Query generator for Block Element Data.\r\n * write a JSON-Path filter similar to `?(@.key == 'my-key://1234')`\r\n * @param key {string} - The key of the block Element data.\r\n * @param data {{key: string}} - A data object with the key property.\r\n * @returns\r\n */\r\nexport function UmbDataPathBlockElementDataQuery(data: Pick<UmbBlockDataModel, 'key'>): string {\r\n\t// write a array of strings for each property, where alias must be present and culture and segment are optional\r\n\t//const filters: Array<string> = [`@.key == '${key}'`];\r\n\t//return `?(${filters.join(' && ')})`;\r\n\treturn `?(@.key == '${data.key}')`;\r\n}\r\n","import { UmbDataPathBlockElementDataQuery } from './data-path-element-data-query.function.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDeprecation } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbAbstractArrayValidationPathTranslator } from '@umbraco-cms/backoffice/validation';\r\n\r\nexport class UmbBlockElementDataValidationPathTranslator extends UmbAbstractArrayValidationPathTranslator {\r\n\t#propertyName: string;\r\n\r\n\tconstructor(host: UmbControllerHost, propertyName: 'contentData' | 'settingsData') {\r\n\t\tsuper(host, '$.' + propertyName + '[', UmbDataPathBlockElementDataQuery);\r\n\t\tthis.#propertyName = propertyName;\r\n\r\n\t\tnew UmbDeprecation({\r\n\t\t\tremoveInVersion: '17',\r\n\t\t\tdeprecated: 'UmbBlockElementDataValidationPathTranslator',\r\n\t\t\tsolution: 'UmbBlockElementDataValidationPathTranslator is deprecated.',\r\n\t\t}).warn();\r\n\t}\r\n\r\n\tgetDataFromIndex(index: number) {\r\n\t\tif (!this._context) return;\r\n\t\tconst data = this._context.getTranslationData();\r\n\t\tconst entry = data[this.#propertyName][index];\r\n\t\tif (!entry || !entry.key) {\r\n\t\t\tconsole.error('block did not have key', `${this.#propertyName}[${index}]`, entry);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn entry;\r\n\t}\r\n}\r\n","import type { UmbBlockDataModel } from '../types.js';\r\nimport { UmbDataPathBlockElementDataQuery } from './data-path-element-data-query.function.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbPropertyValueDataPotentiallyWithEditorAlias } from '@umbraco-cms/backoffice/property';\r\nimport {\r\n\tUmbDataPathPropertyValueQuery,\r\n\tUmbValidationPropertyPathTranslationController,\r\n\tumbQueryMapperForJsonPaths,\r\n\tumbScopeMapperForJsonPaths,\r\n\ttype UmbPropertyValidationPathTranslator,\r\n} from '@umbraco-cms/backoffice/validation';\r\n\r\nexport abstract class UmbBlockEditorValidationPropertyPathTranslatorBase<PropertyValueType>\r\n\textends UmbControllerBase\r\n\timplements UmbPropertyValidationPathTranslator<PropertyValueType>\r\n{\r\n\tabstract translate(\r\n\t\tpaths: Array<string>,\r\n\t\tdata: UmbPropertyValueDataPotentiallyWithEditorAlias<PropertyValueType>,\r\n\t): Promise<Array<string>>;\r\n\r\n\tprotected async _translateBlockData(paths: Array<string>, values: Array<UmbBlockDataModel>, dataPath: string) {\r\n\t\treturn await umbScopeMapperForJsonPaths(paths, dataPath, async (paths) => {\r\n\t\t\tif (values.length === 0) {\r\n\t\t\t\treturn paths;\r\n\t\t\t}\r\n\t\t\tconst ctrl = new UmbValidationPropertyPathTranslationController(this);\r\n\r\n\t\t\tpaths = await umbQueryMapperForJsonPaths(\r\n\t\t\t\tpaths,\r\n\t\t\t\tvalues,\r\n\t\t\t\t(block) => {\r\n\t\t\t\t\treturn UmbDataPathBlockElementDataQuery(block);\r\n\t\t\t\t},\r\n\t\t\t\tasync (paths: string[], block: UmbBlockDataModel | undefined) => {\r\n\t\t\t\t\tif (!block || block.values.length === 0) {\r\n\t\t\t\t\t\treturn paths;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn await umbScopeMapperForJsonPaths(paths, '$.values', async (paths) => {\r\n\t\t\t\t\t\t// then translate the values of these properties:\r\n\t\t\t\t\t\treturn await ctrl.translateProperties(paths, block.values, UmbDataPathPropertyValueQuery);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t\tctrl.destroy();\r\n\t\t\treturn paths;\r\n\t\t});\r\n\t}\r\n}\r\n"],"names":["UMB_BLOCK_CLIPBOARD_ENTRY_VALUE_TYPE","UmbBlockEntryContext","UmbContextBase","host","blockManagerContextToken","blockEntriesContextToken","#unsupported","UmbBooleanState","#localize","UmbLocalizationController","#pathAddendum","UmbRoutePathAddendumContext","#variantId","UmbClassState","#hasExpose","#actionsVisibility","UmbReadOnlyVariantGuardManager","#index","UmbNumberState","#createBeforePath","UmbStringState","#createAfterPath","#contentElementType","UmbObjectState","x","#label","#labelRender","UmbUfmVirtualRenderController","#generateWorkspaceEditContentPath","path","contentKey","encodeFilePath","#generateWorkspaceEditSettingsPath","#workspacePath","mergeObservables","#contentStructurePromise","resolve","#contentStructurePromiseResolve","#contentStructureHasProperties","#settingsStructurePromise","#settingsStructurePromiseResolve","#content","#settings","#propertyValuesToObjectCallback","propertyValues","properties","variantId","acc","property","propertyVariantId","#createPropertyVariantId","label","#watchContentForLabelRender","manager","#gotManager","entries","#gotEntries","#observeContentData","contentElementTypeKey","#getContentStructure","#observeBlockType","settingsElementTypeKey","#getSettingsStructure","blockType","#observeBlockTypeLabel","observeMultiple","settingsDataContentTypeKey","currentSettings","settingsKey","#contentKey","settingsData","index","#contentStructure","#settingsStructure","UmbVariantId","structure","propertyAlias","value","data","#contentValuesObservable","#settingsValuesObservable","content","#observeLayout","#updateCreatePaths","catalogueRouteBuilder","canCreate","layout","#observeVariantId","#observeSettingsData","#observeReadOnlyState","workspacePath","settings","variesByCulture","variesBySegment","#gotVariantId","isReadOnly","unique","rule","contentTypeKey","contentType","has","contentTypeName","hasExpose","blockName","umbConfirmModal","UmbBlockManagerContext","UMB_BLOCK_MANAGER_CONTEXT","#contentTypeRequests","#contentTypeRepository","UmbDocumentTypeDetailRepository","#propertyAlias","#structures","#blockTypes","UmbArrayState","#contents","#exposes","blockTypes","#ensureContentType","configs","method","layouts","contents","exposes","UmbContentTypeStructureManager","initialRequest","source","key","layoutData","_originData","contentData","contentKeys","settingsKeys","values","UmbId","appLanguage","UMB_APP_LANGUAGE_CONTEXT","contentStructure","cutlures","segments","repo","UmbDataTypeDetailRepository","propertyTypes","valueDefinitions","dataType","controller","UmbPropertyValuePresetVariantBuilderController","partialLayoutEntry","layoutEntry","#setInitialBlockExpose","varyByCulture","varyBySegment","blockVariantId","appLanguageContext","UmbBlockPropertyValueCloner","#contentIdUpdatedCallback","#propertyEditorAlias","#contentData","#settingsData","#expose","propertyEditorAlias","args","clonedLayoutEntry","newContentKey","expose","newSettingsKey","UmbFlatLayoutBlockPropertyValueCloner","UmbBlockValueResolver","valuesCallback","entry","variantsCallback","a","b","UmbStandardBlockValueResolver","ctrlAlias","UmbBlockElementValuesDataValidationPathTranslator","UmbAbstractArrayValidationPathTranslator","UmbDataPathPropertyValueQuery","UmbDeprecation","UmbDataPathBlockElementDataQuery","UmbBlockElementDataValidationPathTranslator","#propertyName","propertyName","UmbBlockEditorValidationPropertyPathTranslatorBase","UmbControllerBase","paths","dataPath","umbScopeMapperForJsonPaths","ctrl","UmbValidationPropertyPathTranslationController","umbQueryMapperForJsonPaths","block"],"mappings":"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"}