{"version":3,"file":"member-validation.repository-B788UaUx.js","sources":["../../../src/packages/members/member/repository/validation/member-validation.server.data-source.ts","../../../src/packages/members/member/repository/validation/member-validation.repository.ts"],"sourcesContent":["import type { UmbMemberDetailModel } from '../../types.js';\r\nimport {\r\n\ttype CreateMemberRequestModel,\r\n\tMemberService,\r\n\ttype UpdateMemberRequestModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UmbEntityUnique } from '@umbraco-cms/backoffice/entity';\r\nimport type { UmbDataSourceResponse } from '@umbraco-cms/backoffice/repository';\r\n\r\n/**\r\n * A server data source for Member Validation\r\n */\r\nexport class UmbMemberValidationServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Validate a new Member on the server\r\n\t * @param {UmbMemberDetailModel} model - Member Model\r\n\t * @param {UmbEntityUnique} parentUnique - Parent Unique\r\n\t * @returns {*} - The response from the server\r\n\t */\r\n\tasync validateCreate(\r\n\t\tmodel: UmbMemberDetailModel,\r\n\t\tparentUnique: UmbEntityUnique = null,\r\n\t): Promise<UmbDataSourceResponse<string>> {\r\n\t\tif (!model) throw new Error('Member is missing');\r\n\t\tif (!model.unique) throw new Error('Member unique is missing');\r\n\t\tif (!model.newPassword) throw new Error('Member newPassword is missing');\r\n\t\tif (parentUnique === undefined) throw new Error('Parent unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: CreateMemberRequestModel = {\r\n\t\t\temail: model.email,\r\n\t\t\tusername: model.username,\r\n\t\t\tpassword: model.newPassword,\r\n\t\t\tisApproved: model.isApproved,\r\n\t\t\tid: model.unique,\r\n\t\t\tmemberType: { id: model.memberType.unique },\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tMemberService.postMemberValidate({\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t\t{ disableNotifications: true },\r\n\t\t);\r\n\r\n\t\tif (data && typeof data === 'string') {\r\n\t\t\treturn { data };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Validate a existing Member\r\n\t * @param {UmbMemberDetailModel} model - Member Model\r\n\t * @param {Array<UmbVariantId>} variantIds - Variant Ids\r\n\t * @returns {Promise<*>} - The response from the server\r\n\t */\r\n\tasync validateUpdate(\r\n\t\tmodel: UmbMemberDetailModel,\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t\tvariantIds: Array<UmbVariantId>,\r\n\t): Promise<UmbDataSourceResponse<string>> {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t//const cultures = variantIds.map((id) => id.culture).filter((culture) => culture !== null) as Array<string>;\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: UpdateMemberRequestModel = {\r\n\t\t\temail: model.email,\r\n\t\t\tusername: model.username,\r\n\t\t\tisApproved: model.isApproved,\r\n\t\t\tisLockedOut: model.isLockedOut,\r\n\t\t\tisTwoFactorEnabled: model.isTwoFactorEnabled,\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\t// Maybe use: tryExecuteAndNotify\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tMemberService.putMemberByIdValidate({\r\n\t\t\t\tpath: { id: model.unique },\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t\t{ disableNotifications: true },\r\n\t\t);\r\n\r\n\t\tif (data && typeof data === 'string') {\r\n\t\t\treturn { data };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n}\r\n","import type { UmbMemberDetailModel } from '../../types.js';\r\nimport { UmbMemberValidationServerDataSource } from './member-validation.server.data-source.js';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbContentValidationRepository } from '@umbraco-cms/backoffice/content';\r\n\r\ntype DetailModelType = UmbMemberDetailModel;\r\n\r\nexport class UmbMemberValidationRepository\r\n\textends UmbRepositoryBase\r\n\timplements UmbContentValidationRepository<DetailModelType>\r\n{\r\n\t#validationDataSource: UmbMemberValidationServerDataSource;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#validationDataSource = new UmbMemberValidationServerDataSource(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with an observable of the detail for the given unique\r\n\t * @param {DetailModelType} model - The model to validate\r\n\t * @param {string | null} [parentUnique] - The parent unique\r\n\t * @returns {*}\r\n\t */\r\n\tasync validateCreate(model: DetailModelType, parentUnique: string | null) {\r\n\t\tif (!model) throw new Error('Data is missing');\r\n\r\n\t\treturn this.#validationDataSource.validateCreate(model, parentUnique);\r\n\t}\r\n\r\n\t/**\r\n\t * Saves the given data\r\n\t * @param {DetailModelType} model - The model to save\r\n\t * @param {Array<UmbVariantId>} variantIds - The variant ids to save\r\n\t * @returns {*}\r\n\t */\r\n\tasync validateSave(model: DetailModelType, variantIds: Array<UmbVariantId>) {\r\n\t\tif (!model) throw new Error('Data is missing');\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn this.#validationDataSource.validateUpdate(model, variantIds);\r\n\t}\r\n}\r\n\r\nexport { UmbMemberValidationRepository as api };\r\n"],"names":["UmbMemberValidationServerDataSource","#host","host","model","parentUnique","body","data","error","tryExecute","MemberService","variantIds","UmbMemberValidationRepository","UmbRepositoryBase","#validationDataSource"],"mappings":";;;AAeO,MAAMA,EAAoC;AAAA,EAChDC;AAAA,EAEA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,eACLC,GACAC,IAAgC,MACS;AACzC,QAAI,CAACD,EAAa,OAAA,IAAI,MAAM,mBAAmB;AAC/C,QAAI,CAACA,EAAM,OAAc,OAAA,IAAI,MAAM,0BAA0B;AAC7D,QAAI,CAACA,EAAM,YAAmB,OAAA,IAAI,MAAM,+BAA+B;AACvE,QAAIC,MAAiB,OAAiB,OAAA,IAAI,MAAM,0BAA0B;AAG1E,UAAMC,IAAiC;AAAA,MACtC,OAAOF,EAAM;AAAA,MACb,UAAUA,EAAM;AAAA,MAChB,UAAUA,EAAM;AAAA,MAChB,YAAYA,EAAM;AAAA,MAClB,IAAIA,EAAM;AAAA,MACV,YAAY,EAAE,IAAIA,EAAM,WAAW,OAAO;AAAA,MAC1C,QAAQA,EAAM;AAAA,MACd,UAAUA,EAAM;AAAA,IACjB,GAEM,EAAE,MAAAG,GAAM,OAAAC,EAAM,IAAI,MAAMC;AAAA,MAC7B,KAAKP;AAAA,MACLQ,EAAc,mBAAmB;AAAA,QAChC,MAAAJ;AAAA,MAAA,CACA;AAAA,MACD,EAAE,sBAAsB,GAAK;AAAA,IAC9B;AAEI,WAAAC,KAAQ,OAAOA,KAAS,WACpB,EAAE,MAAAA,EAAK,IAGR,EAAE,OAAAC,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,MAAM,eACLJ,GAEAO,GACyC;AACzC,QAAI,CAACP,EAAM,OAAc,OAAA,IAAI,MAAM,mBAAmB;AAKtD,UAAME,IAAiC;AAAA,MACtC,OAAOF,EAAM;AAAA,MACb,UAAUA,EAAM;AAAA,MAChB,YAAYA,EAAM;AAAA,MAClB,aAAaA,EAAM;AAAA,MACnB,oBAAoBA,EAAM;AAAA,MAC1B,QAAQA,EAAM;AAAA,MACd,UAAUA,EAAM;AAAA,IACjB,GAGM,EAAE,MAAAG,GAAM,OAAAC,EAAM,IAAI,MAAMC;AAAA,MAC7B,KAAKP;AAAA,MACLQ,EAAc,sBAAsB;AAAA,QACnC,MAAM,EAAE,IAAIN,EAAM,OAAO;AAAA,QACzB,MAAAE;AAAA,MAAA,CACA;AAAA,MACD,EAAE,sBAAsB,GAAK;AAAA,IAC9B;AAEI,WAAAC,KAAQ,OAAOA,KAAS,WACpB,EAAE,MAAAA,EAAK,IAGR,EAAE,OAAAC,EAAM;AAAA,EAAA;AAEjB;ACjGO,MAAMI,UACJC,EAET;AAAA,EACCC;AAAA,EAEA,YAAYX,GAAyB;AACpC,UAAMA,CAAI,GAEL,KAAAW,KAAwB,IAAIb,EAAoC,IAAI;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS1E,MAAM,eAAeG,GAAwBC,GAA6B;AACzE,QAAI,CAACD,EAAa,OAAA,IAAI,MAAM,iBAAiB;AAE7C,WAAO,KAAKU,GAAsB,eAAeV,GAAOC,CAAY;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrE,MAAM,aAAaD,GAAwBO,GAAiC;AAC3E,QAAI,CAACP,EAAa,OAAA,IAAI,MAAM,iBAAiB;AAC7C,QAAI,CAACA,EAAM,OAAc,OAAA,IAAI,MAAM,mBAAmB;AAEtD,WAAO,KAAKU,GAAsB,eAAeV,GAAOO,CAAU;AAAA,EAAA;AAEpE;"}