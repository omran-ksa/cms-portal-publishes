{"version":3,"file":"create-member-collection-action.element-Bj4aP19J.js","sources":["../../../src/packages/members/member/collection/action/create-member-collection-action.element.ts"],"sourcesContent":["import { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { html, customElement, state, repeat, css, until, nothing } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UmbMemberTypeTreeRepository } from '@umbraco-cms/backoffice/member-type';\r\n\r\n@customElement('umb-create-member-collection-action')\r\nexport class UmbCreateDocumentCollectionActionElement extends UmbLitElement {\r\n\t@state()\r\n\tprivate _options: Array<{ label: string; unique: string; icon: string }> = [];\r\n\r\n\t#memberTypeTreeRepository = new UmbMemberTypeTreeRepository(this);\r\n\t#optionRequestPromise?: Promise<void>;\r\n\r\n\tasync #getOptions() {\r\n\t\t//TODO: Should we use the tree repository or make a collection repository?\r\n\t\t//TODO: And how would we get all the member types?\r\n\t\t//TODO: This only works because member types can't have folders.\r\n\t\tconst { data } = await this.#memberTypeTreeRepository.requestTreeRootItems({});\r\n\t\tif (!data) return;\r\n\r\n\t\tthis._options = data.items.map((item) => {\r\n\t\t\treturn {\r\n\t\t\t\tlabel: item.name,\r\n\t\t\t\tunique: item.unique,\r\n\t\t\t\ticon: item.icon || '',\r\n\t\t\t};\r\n\t\t});\r\n\t\tthis.requestUpdate();\r\n\t}\r\n\r\n\t#onButtonClick = async () => {\r\n\t\tif (this._options.length > 0) return;\r\n\r\n\t\tawait this.#getOptions();\r\n\r\n\t\tif (this._options.length === 1) {\r\n\t\t\thistory.pushState({}, '', `section/member-management/workspace/member/create/${this._options[0].unique}`);\r\n\t\t}\r\n\t};\r\n\r\n\tasync #renderOptions() {\r\n\t\tawait this.#optionRequestPromise;\r\n\r\n\t\t// If we only have one option, we don't need to render the popover. We will go directly to it on click.\r\n\t\tif (this._options.length === 1) return nothing;\r\n\r\n\t\treturn html`\r\n\t\t\t${repeat(\r\n\t\t\t\tthis._options,\r\n\t\t\t\t(option) => option.unique,\r\n\t\t\t\t(option) =>\r\n\t\t\t\t\thtml`<uui-button\r\n\t\t\t\t\t\tclass=\"create-member-type\"\r\n\t\t\t\t\t\tcompact\r\n\t\t\t\t\t\tlabel=${option.label}\r\n\t\t\t\t\t\thref=\"section/member-management/workspace/member/create/${option.unique}\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<umb-icon name=${option.icon}></umb-icon>\r\n\t\t\t\t\t\t\t<span>${option.label}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</uui-button>`,\r\n\t\t\t)}\r\n\t\t`;\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<uui-button\r\n\t\t\t\tlabel=${this.localize.term('general_create')}\r\n\t\t\t\t@click=${this.#onButtonClick}\r\n\t\t\t\tlook=\"outline\"\r\n\t\t\t\tpopovertarget=\"create-popover\"></uui-button>\r\n\t\t\t<uui-popover-container id=\"create-popover\">\r\n\t\t\t\t<div id=\"popover-content\">${until(this.#renderOptions(), html`<uui-loader></uui-loader>`)}</div>\r\n\t\t\t</uui-popover-container>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t#popover-content {\r\n\t\t\t\tbackground-color: var(--uui-color-surface);\r\n\t\t\t\tbox-shadow: var(--uui-shadow-depth-3);\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\t--uui-button-content-align: left;\r\n\t\t\t}\r\n\r\n\t\t\tuui-button.create-member-type > div {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tgap: 5px;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbCreateDocumentCollectionActionElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-create-member-collection-action': UmbCreateDocumentCollectionActionElement;\r\n\t}\r\n}\r\n"],"names":["_memberTypeTreeRepository","_optionRequestPromise","_UmbCreateDocumentCollectionActionElement_instances","getOptions_fn","_onButtonClick","renderOptions_fn","UmbCreateDocumentCollectionActionElement","UmbLitElement","__privateAdd","UmbMemberTypeTreeRepository","__privateMethod","html","__privateGet","until","data","item","nothing","repeat","option","UmbTextStyles","css","__decorateClass","state","customElement","UmbCreateDocumentCollectionActionElement$1"],"mappings":";;;;;;;;;;+TAAAA,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC;AAMa,IAAAC,IAAN,cAAuDC,EAAc;AAAA,EAArE,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAN,CAAA,GAEN,KAAQ,WAAmE,CAAC,GAEhDM,EAAA,MAAAR,GAAA,IAAIS,EAA4B,IAAI,CAAA,GAChED,EAAA,MAAAP,CAAA,GAmBAO,EAAA,MAAAJ,GAAiB,YAAY;AACxB,MAAA,KAAK,SAAS,SAAS,MAE3B,MAAMM,QAAKR,GAALC,CAAA,EAAA,KAAA,IAAA,GAEF,KAAK,SAAS,WAAW,KACpB,QAAA,UAAU,IAAI,IAAI,qDAAqD,KAAK,SAAS,CAAC,EAAE,MAAM,EAAE;AAAA,IACzG,CACD;AAAA,EAAA;AAAA,EA2BS,SAAS;AACV,WAAAQ;AAAA;AAAA,YAEG,KAAK,SAAS,KAAK,gBAAgB,CAAC;AAAA,aACnCC,QAAKR,CAAc,CAAA;AAAA;AAAA;AAAA;AAAA,gCAIAS,EAAMH,EAAA,MAAKR,GAALG,CAAA,EAAA,KAAA,IAAA,GAAuBM,4BAA+B,CAAC;AAAA;AAAA;AAAA,EAAA;AAwB7F;AAvFCX,IAAA,oBAAA,QAAA;AACAC,IAAA,oBAAA,QAAA;AALMC,IAAA,oBAAA,QAAA;AAOAC,IAAW,iBAAG;AAIb,QAAA,EAAE,MAAAW,EAAS,IAAA,MAAMF,QAAKZ,CAA0B,EAAA,qBAAqB,EAAE;AAC7E,EAAKc,MAEL,KAAK,WAAWA,EAAK,MAAM,IAAI,CAACC,OACxB;AAAA,IACN,OAAOA,EAAK;AAAA,IACZ,QAAQA,EAAK;AAAA,IACb,MAAMA,EAAK,QAAQ;AAAA,EACpB,EACA,GACD,KAAK,cAAc;AACpB;AAEAX,IAAA,oBAAA,QAAA;AAUMC,IAAc,iBAAG;AAItB,SAHA,MAAMO,EAAK,MAAAX,CAAA,GAGP,KAAK,SAAS,WAAW,IAAUe,IAEhCL;AAAA,KACJM;AAAA,IACD,KAAK;AAAA,IACL,CAACC,MAAWA,EAAO;AAAA,IACnB,CAACA,MACAP;AAAA;AAAA;AAAA,cAGSO,EAAO,KAAK;AAAA,gEACsCA,EAAO,MAAM;AAAA;AAAA,wBAErDA,EAAO,IAAI;AAAA,eACpBA,EAAO,KAAK;AAAA;AAAA;AAAA,EAGvB,CAAA;AAAA;AAEH;AAzDYZ,EAwEI,SAAS;AAAA,EACxBa;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBD;AAxFQC,EAAA;AAAA,EADPC,EAAM;AAAA,GADKhB,EAEJ,WAAA,YAAA,CAAA;AAFIA,IAANe,EAAA;AAAA,EADNE,EAAc,qCAAqC;AAAA,GACvCjB,CAAA;AA6Fb,MAAAkB,IAAelB;"}