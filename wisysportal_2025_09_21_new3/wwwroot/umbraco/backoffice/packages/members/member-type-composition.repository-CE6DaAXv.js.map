{"version":3,"file":"member-type-composition.repository-CE6DaAXv.js","sources":["../../../src/packages/members/member-type/repository/composition/member-type-composition.server.data-source.ts","../../../src/packages/members/member-type/repository/composition/member-type-composition.repository.ts"],"sourcesContent":["import type {\r\n\tUmbMemberTypeCompositionCompatibleModel,\r\n\tUmbMemberTypeCompositionReferenceModel,\r\n\tUmbMemberTypeAvailableCompositionRequestModel,\r\n} from '../../types.js';\r\nimport {\r\n\ttype MemberTypeCompositionRequestModel,\r\n\tMemberTypeService,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport type { UmbContentTypeCompositionDataSource } from '@umbraco-cms/backoffice/content-type';\r\n\r\n/**\r\n * A data source for the Member Type Composition that fetches data from the server\r\n * @class UmbMemberTypeCompositionServerDataSource\r\n */\r\nexport class UmbMemberTypeCompositionServerDataSource\r\n\timplements\r\n\t\tUmbContentTypeCompositionDataSource<\r\n\t\t\tUmbMemberTypeCompositionReferenceModel,\r\n\t\t\tUmbMemberTypeCompositionCompatibleModel,\r\n\t\t\tUmbMemberTypeAvailableCompositionRequestModel\r\n\t\t>\r\n{\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbMemberTypeCompositionServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbMemberTypeCompositionServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\t/**\r\n\t * Fetches the compatible compositions for a document type from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbMemberTypeCompositionServerDataSource\r\n\t */\r\n\tasync getReferences(unique: string) {\r\n\t\tconst response = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tMemberTypeService.getMemberTypeByIdCompositionReferences({ path: { id: unique } }),\r\n\t\t);\r\n\t\tconst error = response.error;\r\n\t\tconst data: Array<UmbMemberTypeCompositionReferenceModel> | undefined = response.data?.map((reference) => {\r\n\t\t\treturn {\r\n\t\t\t\tunique: reference.id,\r\n\t\t\t\ticon: reference.icon,\r\n\t\t\t\tname: reference.name,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn { data, error };\r\n\t}\r\n\t/**\r\n\t * Updates the compositions for a document type on the server\r\n\t * @param {MemberTypeCompositionRequestModel} body\r\n\t * @param args\r\n\t * @returns {*}\r\n\t * @memberof UmbMemberTypeCompositionServerDataSource\r\n\t */\r\n\tasync availableCompositions(args: UmbMemberTypeAvailableCompositionRequestModel) {\r\n\t\tconst body: MemberTypeCompositionRequestModel = {\r\n\t\t\tid: args.unique,\r\n\t\t\tcurrentCompositeIds: args.currentCompositeUniques,\r\n\t\t\tcurrentPropertyAliases: args.currentPropertyAliases,\r\n\t\t};\r\n\r\n\t\tconst response = await tryExecute(this.#host, MemberTypeService.postMemberTypeAvailableCompositions({ body }));\r\n\t\tconst error = response.error;\r\n\t\tconst data: Array<UmbMemberTypeCompositionCompatibleModel> | undefined = response.data?.map((composition) => {\r\n\t\t\treturn {\r\n\t\t\t\tunique: composition.id,\r\n\t\t\t\tname: composition.name,\r\n\t\t\t\ticon: composition.icon,\r\n\t\t\t\tfolderPath: composition.folderPath,\r\n\t\t\t\tisCompatible: composition.isCompatible,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn { data, error };\r\n\t}\r\n}\r\n","import type {\r\n\tUmbMemberTypeAvailableCompositionRequestModel,\r\n\tUmbMemberTypeCompositionCompatibleModel,\r\n\tUmbMemberTypeCompositionReferenceModel,\r\n} from '../../types.js';\r\nimport { UmbMemberTypeCompositionServerDataSource } from './member-type-composition.server.data-source.js';\r\nimport type { UmbContentTypeCompositionRepository } from '@umbraco-cms/backoffice/content-type';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbMemberTypeCompositionRepository\r\n\textends UmbRepositoryBase\r\n\timplements\r\n\t\tUmbContentTypeCompositionRepository<\r\n\t\t\tUmbMemberTypeCompositionReferenceModel,\r\n\t\t\tUmbMemberTypeCompositionCompatibleModel,\r\n\t\t\tUmbMemberTypeAvailableCompositionRequestModel\r\n\t\t>\r\n{\r\n\t#compositionSource: UmbMemberTypeCompositionServerDataSource;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.#compositionSource = new UmbMemberTypeCompositionServerDataSource(this);\r\n\t}\r\n\r\n\tasync getReferences(unique: string) {\r\n\t\treturn this.#compositionSource.getReferences(unique);\r\n\t}\r\n\r\n\tasync availableCompositions(args: UmbMemberTypeAvailableCompositionRequestModel) {\r\n\t\treturn this.#compositionSource.availableCompositions(args);\r\n\t}\r\n}\r\n\r\nexport { UmbMemberTypeCompositionRepository as api };\r\n"],"names":["UmbMemberTypeCompositionServerDataSource","#host","host","unique","response","tryExecute","MemberTypeService","error","reference","args","body","composition","UmbMemberTypeCompositionRepository","UmbRepositoryBase","#compositionSource"],"mappings":";;;AAiBO,MAAMA,EAOb;AAAA,EACCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,MAAM,cAAcC,GAAgB;AACnC,UAAMC,IAAW,MAAMC;AAAA,MACtB,KAAKJ;AAAA,MACLK,EAAkB,uCAAuC,EAAE,MAAM,EAAE,IAAIH,EAAA,EAAU,CAAA;AAAA,IAClF,GACMI,IAAQH,EAAS;AAShB,WAAA,EAAE,MAR+DA,EAAS,MAAM,IAAI,CAACI,OACpF;AAAA,MACN,QAAQA,EAAU;AAAA,MAClB,MAAMA,EAAU;AAAA,MAChB,MAAMA,EAAU;AAAA,IACjB,EACA,GAEc,OAAAD,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAStB,MAAM,sBAAsBE,GAAqD;AAChF,UAAMC,IAA0C;AAAA,MAC/C,IAAID,EAAK;AAAA,MACT,qBAAqBA,EAAK;AAAA,MAC1B,wBAAwBA,EAAK;AAAA,IAC9B,GAEML,IAAW,MAAMC,EAAW,KAAKJ,IAAOK,EAAkB,oCAAoC,EAAE,MAAAI,EAAK,CAAC,CAAC,GACvGH,IAAQH,EAAS;AAWhB,WAAA,EAAE,MAVgEA,EAAS,MAAM,IAAI,CAACO,OACrF;AAAA,MACN,QAAQA,EAAY;AAAA,MACpB,MAAMA,EAAY;AAAA,MAClB,MAAMA,EAAY;AAAA,MAClB,YAAYA,EAAY;AAAA,MACxB,cAAcA,EAAY;AAAA,IAC3B,EACA,GAEc,OAAAJ,EAAM;AAAA,EAAA;AAEvB;AC3EO,MAAMK,UACJC,EAOT;AAAA,EACCC;AAAA,EAEA,YAAYZ,GAAyB;AACpC,UAAMA,CAAI,GACL,KAAAY,KAAqB,IAAId,EAAyC,IAAI;AAAA,EAAA;AAAA,EAG5E,MAAM,cAAcG,GAAgB;AAC5B,WAAA,KAAKW,GAAmB,cAAcX,CAAM;AAAA,EAAA;AAAA,EAGpD,MAAM,sBAAsBM,GAAqD;AACzE,WAAA,KAAKK,GAAmB,sBAAsBL,CAAI;AAAA,EAAA;AAE3D;"}