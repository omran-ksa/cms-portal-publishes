{"version":3,"file":"public-access-modal.element-DSE5mlVF.js","sources":["../../../src/packages/members/member-public-access/repository/public-access.server.data.ts","../../../src/packages/members/member-public-access/repository/public-access.repository.ts","../../../src/packages/members/member-public-access/modal/public-access-modal.element.ts"],"sourcesContent":["import { DocumentService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { PublicAccessRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the Document Public Access that fetches data from the server\r\n * @class UmbDocumentPublicAccessServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbDocumentPublicAccessServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbDocumentPublicAccessServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbDocumentPublicAccessServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates the Public Access for the given Document unique\r\n\t * @param {string} unique\r\n\t * @param {PublicAccessRequestModel} data\r\n\t * @memberof UmbDocumentPublicAccessServerDataSource\r\n\t */\r\n\tasync create(unique: string, data: PublicAccessRequestModel) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\t\treturn tryExecute(this.#host, DocumentService.postDocumentByIdPublicAccess({ path: { id: unique }, body: data }));\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches the Public Access for the given Document unique\r\n\t * @param {string} unique\r\n\t * @memberof UmbDocumentPublicAccessServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\t\t// NOTE: The entity will not be present, when fetching Public Access for a descendant of a protected Document.\r\n\t\t//       This is a perfectly valid scenario, which is handled in the view. In other words, just use tryExecute here.\r\n\t\treturn tryExecute(this.#host, DocumentService.getDocumentByIdPublicAccess({ path: { id: unique } }));\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Public Access for the given Document unique\r\n\t * @param {string} unique\r\n\t * @param {PublicAccessRequestModel} data\r\n\t * @param body\r\n\t * @memberof UmbDocumentPublicAccessServerDataSource\r\n\t */\r\n\tasync update(unique: string, body: PublicAccessRequestModel) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\t\treturn tryExecute(this.#host, DocumentService.putDocumentByIdPublicAccess({ path: { id: unique }, body }));\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes Public Access for the given Document unique\r\n\t * @param {string} unique\r\n\t * @memberof UmbDocumentPublicAccessServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\t\treturn tryExecute(this.#host, DocumentService.deleteDocumentByIdPublicAccess({ path: { id: unique } }));\r\n\t}\r\n}\r\n","import { UmbDocumentPublicAccessServerDataSource } from './public-access.server.data.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbNotificationContext } from '@umbraco-cms/backoffice/notification';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport type { PublicAccessRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\n\r\nexport class UmbDocumentPublicAccessRepository extends UmbControllerBase implements UmbApi {\r\n\t#dataSource = new UmbDocumentPublicAccessServerDataSource(this);\r\n\r\n\t#notificationContext?: UmbNotificationContext;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\r\n\t\t\tthis.#notificationContext = instance as UmbNotificationContext;\r\n\t\t});\r\n\t}\r\n\r\n\tasync create(unique: string, data: PublicAccessRequestModel) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\t\tif (!data) throw new Error('Data is missing');\r\n\r\n\t\tconst { error } = await this.#dataSource.create(unique, data);\r\n\t\tif (!error) {\r\n\t\t\tconst notification = { data: { message: `Public access setting created` } };\r\n\t\t\tthis.#notificationContext?.peek('positive', notification);\r\n\t\t}\r\n\t\treturn { error };\r\n\t}\r\n\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\r\n\t\tconst { data, error } = await this.#dataSource.read(unique);\r\n\t\treturn { data, error };\r\n\t}\r\n\r\n\tasync update(unique: string, data: PublicAccessRequestModel) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\t\tif (!data) throw new Error('Data is missing');\r\n\r\n\t\tconst { error } = await this.#dataSource.update(unique, data);\r\n\t\tif (!error) {\r\n\t\t\tconst notification = { data: { message: `Public access setting updated` } };\r\n\t\t\tthis.#notificationContext?.peek('positive', notification);\r\n\t\t}\r\n\t\treturn { error };\r\n\t}\r\n\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('unique is missing');\r\n\r\n\t\tconst { error } = await this.#dataSource.delete(unique);\r\n\t\tif (!error) {\r\n\t\t\tconst notification = { data: { message: `Public access setting deleted` } };\r\n\t\t\tthis.#notificationContext?.peek('positive', notification);\r\n\t\t}\r\n\t\treturn { error };\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentPublicAccessRepository as api };\r\n","import { UmbDocumentPublicAccessRepository } from '../repository/public-access.repository.js';\r\nimport type { UmbPublicAccessModalData, UmbPublicAccessModalValue } from './types.js';\r\nimport { css, customElement, html, nothing, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbModalBaseElement } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { UmbMemberDetailRepository, type UmbInputMemberElement } from '@umbraco-cms/backoffice/member';\r\nimport { UmbMemberGroupItemRepository, type UmbInputMemberGroupElement } from '@umbraco-cms/backoffice/member-group';\r\nimport type { PublicAccessRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UUIRadioEvent } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UmbDocumentItemRepository, type UmbInputDocumentElement } from '@umbraco-cms/backoffice/document';\r\n\r\n@customElement('umb-public-access-modal')\r\nexport class UmbPublicAccessModalElement extends UmbModalBaseElement<\r\n\tUmbPublicAccessModalData,\r\n\tUmbPublicAccessModalValue\r\n> {\r\n\t#publicAccessRepository = new UmbDocumentPublicAccessRepository(this);\r\n\t#unique?: string;\r\n\t#isNew: boolean = true;\r\n\r\n\t@state()\r\n\tprivate _documentName = '';\r\n\r\n\t@state()\r\n\tprivate _specific?: boolean;\r\n\r\n\t@state()\r\n\tprivate _startPage = true;\r\n\r\n\t@state()\r\n\tprivate _selection: Array<string> = [];\r\n\r\n\t@state()\r\n\tprivate _loginDocumentId?: string;\r\n\r\n\t@state()\r\n\tprivate _errorDocumentId?: string;\r\n\r\n\t// Init\r\n\r\n\toverride firstUpdated() {\r\n\t\tthis.#unique = this.data?.unique;\r\n\t\tthis.#getDocumentName();\r\n\t}\r\n\r\n\tasync #getDocumentName() {\r\n\t\tif (!this.#unique) return;\r\n\t\t// Should this be done here or in the action file?\r\n\t\tconst { data } = await new UmbDocumentItemRepository(this).requestItems([this.#unique]);\r\n\t\tif (!data) return;\r\n\t\tconst item = data[0];\r\n\t\t//TODO How do we ensure we get the correct variant?\r\n\t\tthis._documentName = item.variants[0]?.name;\r\n\r\n\t\tif (item.isProtected) {\r\n\t\t\tthis.#getPublicAccessModel();\r\n\t\t}\r\n\t}\r\n\r\n\tasync #getPublicAccessModel() {\r\n\t\tif (!this.#unique) return;\r\n\t\tconst { data } = await this.#publicAccessRepository.read(this.#unique);\r\n\r\n\t\tif (!data) return;\r\n\t\tthis.#isNew = false;\r\n\t\tthis._startPage = false;\r\n\r\n\t\t// Specific or Groups\r\n\t\tthis._specific = data.members.length > 0;\r\n\r\n\t\t//selection\r\n\t\tif (data.members.length > 0) {\r\n\t\t\tthis._selection = data.members.map((m) => m.id);\r\n\t\t} else if (data.groups.length > 0) {\r\n\t\t\tthis._selection = data.groups.map((g) => g.id);\r\n\t\t}\r\n\r\n\t\tthis._loginDocumentId = data.loginDocument.id;\r\n\t\tthis._errorDocumentId = data.errorDocument.id;\r\n\t}\r\n\r\n\t// Modal events\r\n\r\n\t#handleNext() {\r\n\t\tthis._startPage = false;\r\n\t}\r\n\r\n\tasync #handleSave() {\r\n\t\tif (!this._loginDocumentId || !this._errorDocumentId || !this.#unique) return;\r\n\r\n\t\t// TODO: [v15] Currently the Management API doesn't support passing the member/group ids, only the userNames/names.\r\n\t\t// This is a temporary solution where we have to look them up until the API is updated to support this.\r\n\t\tconst body: PublicAccessRequestModel = {\r\n\t\t\tmemberGroupNames: [],\r\n\t\t\tmemberUserNames: [],\r\n\t\t\tloginDocument: { id: this._loginDocumentId },\r\n\t\t\terrorDocument: { id: this._errorDocumentId },\r\n\t\t};\r\n\r\n\t\tif (this._specific) {\r\n\t\t\t// Members\r\n\t\t\t// user name is not part of the item model, so we need to look it up from the member detail repository\r\n\t\t\t// be aware that the detail repository requires access to the member section.\r\n\t\t\tconst repo = new UmbMemberDetailRepository(this);\r\n\t\t\tconst promises = this._selection.map((memberId) => repo.requestByUnique(memberId));\r\n\t\t\tconst responses = await Promise.all(promises);\r\n\t\t\tconst memberUserNames = responses\r\n\t\t\t\t.filter((response) => response.data)\r\n\t\t\t\t.map((response) => response.data?.username) as string[];\r\n\r\n\t\t\tbody.memberUserNames = memberUserNames;\r\n\t\t} else {\r\n\t\t\t// Groups\r\n\t\t\tconst repo = new UmbMemberGroupItemRepository(this);\r\n\t\t\tconst { data } = await repo.requestItems(this._selection);\r\n\t\t\tif (!data) throw new Error('No Member groups returned');\r\n\r\n\t\t\tconst groupNames = data\r\n\t\t\t\t.filter((groupItem) => this._selection.includes(groupItem.unique))\r\n\t\t\t\t.map((groupItem) => groupItem.name);\r\n\r\n\t\t\tbody.memberGroupNames = groupNames;\r\n\t\t}\r\n\r\n\t\tconst createOrUpdate = this.#isNew\r\n\t\t\t? this.#publicAccessRepository.create(this.#unique, body)\r\n\t\t\t: this.#publicAccessRepository.update(this.#unique, body);\r\n\r\n\t\tconst { error } = await createOrUpdate;\r\n\t\tif (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tthis.modalContext?.submit();\r\n\t}\r\n\r\n\tasync #handleDelete() {\r\n\t\tif (!this.#unique) return;\r\n\t\tawait this.#publicAccessRepository.delete(this.#unique);\r\n\t\tthis.modalContext?.submit();\r\n\t}\r\n\r\n\t#handleCancel() {\r\n\t\tthis.modalContext?.reject();\r\n\t}\r\n\r\n\t// Change Events\r\n\r\n\t#onChangeLoginPage(e: CustomEvent) {\r\n\t\tthis._loginDocumentId = (e.target as UmbInputDocumentElement).selection[0];\r\n\t}\r\n\r\n\t#onChangeErrorPage(e: CustomEvent) {\r\n\t\tthis._errorDocumentId = (e.target as UmbInputDocumentElement).selection[0];\r\n\t}\r\n\r\n\t#onChangeGroup(e: CustomEvent) {\r\n\t\tthis._selection = (e.target as UmbInputMemberGroupElement).selection;\r\n\t}\r\n\r\n\t#onChangeMember(e: CustomEvent) {\r\n\t\tthis._selection = (e.target as UmbInputMemberElement).selection;\r\n\t}\r\n\r\n\t// Renders\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-body-layout headline=${this.localize.term('actions_protect')}>\r\n\t\t\t\t<uui-box>${this._startPage ? this.renderSelectGroup() : this.renderEditPage()}</uui-box> ${this.renderActions()}\r\n\t\t\t</umb-body-layout>\r\n\t\t`;\r\n\t}\r\n\r\n\t// First page when no Restricting Public Access is set.\r\n\trenderSelectGroup() {\r\n\t\treturn html`<umb-localize key=\"publicAccess_paHowWould\" .args=${[this._documentName]}>\r\n\t\t\t\tChoose how you want to restrict public access to the page '${this._documentName}'.\r\n\t\t\t</umb-localize>\r\n\t\t\t<uui-radio-group\r\n\t\t\t\t@change=${(e: UUIRadioEvent) =>\r\n\t\t\t\t\te.target.value === 'members' ? (this._specific = true) : (this._specific = false)}>\r\n\t\t\t\t<uui-radio label=${this.localize.term('publicAccess_paMembers')} value=\"members\">\r\n\t\t\t\t\t<strong>${this.localize.term('publicAccess_paMembers')}</strong><br />\r\n\t\t\t\t\t${this.localize.term('publicAccess_paMembersHelp')}\r\n\t\t\t\t</uui-radio>\r\n\t\t\t\t<uui-radio label=${this.localize.term('publicAccess_paGroups')} value=\"groups\">\r\n\t\t\t\t\t<strong>${this.localize.term('publicAccess_paGroups')}</strong><br />\r\n\t\t\t\t\t${this.localize.term('publicAccess_paGroupsHelp')}\r\n\t\t\t\t</uui-radio>\r\n\t\t\t</uui-radio-group>`;\r\n\t}\r\n\r\n\t// Second page when editing Restricting Public Access\r\n\trenderEditPage() {\r\n\t\treturn html`${this.renderMemberType()}\r\n\t\t\t<p>\r\n\t\t\t\t<umb-localize key=\"publicAccess_paSelectPages\">\r\n\t\t\t\t\tSelect the pages that contain login form and error messages\r\n\t\t\t\t</umb-localize>\r\n\t\t\t</p>\r\n\t\t\t<div class=\"select-item\">\r\n\t\t\t\t<strong><umb-localize key=\"publicAccess_paLoginPage\">Login Page</umb-localize></strong>\r\n\t\t\t\t<small>\r\n\t\t\t\t\t<umb-localize key=\"publicAccess_paLoginPageHelp\"> Choose the page that contains the login form </umb-localize>\r\n\t\t\t\t</small>\r\n\t\t\t\t<umb-input-document\r\n\t\t\t\t\t.value=${this._loginDocumentId}\r\n\t\t\t\t\tmax=\"1\"\r\n\t\t\t\t\t@change=${this.#onChangeLoginPage}></umb-input-document>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<div class=\"select-item\">\r\n\t\t\t\t<strong><umb-localize key=\"publicAccess_paErrorPage\">Error Page</umb-localize></strong>\r\n\t\t\t\t<small>\r\n\t\t\t\t\t<umb-localize key=\"publicAccess_paErrorPageHelp\">\r\n\t\t\t\t\t\tUsed when people are logged on, but do not have access\r\n\t\t\t\t\t</umb-localize>\r\n\t\t\t\t</small>\r\n\t\t\t\t<umb-input-document\r\n\t\t\t\t\t.value=${this._errorDocumentId}\r\n\t\t\t\t\tmax=\"1\"\r\n\t\t\t\t\t@change=${this.#onChangeErrorPage}></umb-input-document>\r\n\t\t\t</div>`;\r\n\t}\r\n\r\n\trenderMemberType() {\r\n\t\treturn this._specific\r\n\t\t\t? html`<umb-localize key=\"publicAccess_paSelectMembers\" .args=${[this._documentName]}>\r\n\t\t\t\t\t\tSelect the members who have access to the page <strong>${this._documentName}</strong>\r\n\t\t\t\t\t</umb-localize>\r\n\t\t\t\t\t<umb-input-member .selection=${this._selection} @change=${this.#onChangeMember}></umb-input-member>`\r\n\t\t\t: html`<umb-localize key=\"publicAccess_paSelectGroups\" .args=${[this._documentName]}>\r\n\t\t\t\t\t\tSelect the groups who have access to the page <strong>${this._documentName}</strong>\r\n\t\t\t\t\t</umb-localize>\r\n\t\t\t\t\t<umb-input-member-group\r\n\t\t\t\t\t\t.selection=${this._selection}\r\n\t\t\t\t\t\t@change=${this.#onChangeGroup}></umb-input-member-group>`;\r\n\t}\r\n\r\n\t// Action buttons\r\n\trenderActions() {\r\n\t\t// Check for Save or Next button\r\n\t\tconst confirm = !this._startPage\r\n\t\t\t? html`<uui-button\r\n\t\t\t\t\tslot=\"actions\"\r\n\t\t\t\t\tid=\"save\"\r\n\t\t\t\t\tlook=\"primary\"\r\n\t\t\t\t\tcolor=\"positive\"\r\n\t\t\t\t\tlabel=${this.localize.term('buttons_save')}\r\n\t\t\t\t\t?disabled=${!this._loginDocumentId || !this._errorDocumentId || this._selection.length === 0}\r\n\t\t\t\t\t@click=\"${this.#handleSave}\"></uui-button>`\r\n\t\t\t: html`<uui-button\r\n\t\t\t\t\tslot=\"actions\"\r\n\t\t\t\t\tid=\"save\"\r\n\t\t\t\t\tlook=\"primary\"\r\n\t\t\t\t\tlabel=${this.localize.term('general_next')}\r\n\t\t\t\t\t?disabled=${this._specific === undefined}\r\n\t\t\t\t\t@click=\"${this.#handleNext}\"></uui-button>`;\r\n\t\t// Check for Remove button\r\n\t\tconst remove = !this.#isNew\r\n\t\t\t? html`<uui-button\r\n\t\t\t\t\tslot=\"actions\"\r\n\t\t\t\t\tid=\"save\"\r\n\t\t\t\t\tlook=\"primary\"\r\n\t\t\t\t\tcolor=\"warning\"\r\n\t\t\t\t\t@click=\"${this.#handleDelete}\"\r\n\t\t\t\t\tlabel=${this.localize.term('publicAccess_paRemoveProtection')}></uui-button>`\r\n\t\t\t: nothing;\r\n\t\t//Render the buttons\r\n\t\treturn html` <uui-button\r\n\t\t\t\tslot=\"actions\"\r\n\t\t\t\tid=\"cancel\"\r\n\t\t\t\tlabel=${this.localize.term('buttons_confirmActionCancel')}\r\n\t\t\t\t@click=\"${this.#handleCancel}\"></uui-button\r\n\t\t\t>${remove}${confirm}`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\tuui-box,\r\n\t\t\tuui-radio-group {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\tgap: var(--uui-size-4);\r\n\t\t\t}\r\n\t\t\tuui-radio-group {\r\n\t\t\t\tmargin-top: var(--uui-size-4);\r\n\t\t\t}\r\n\r\n\t\t\tp {\r\n\t\t\t\tmargin: var(--uui-size-6) 0 var(--uui-size-2);\r\n\t\t\t}\r\n\t\t\tsmall {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbPublicAccessModalElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-public-access-modal': UmbPublicAccessModalElement;\r\n\t}\r\n}\r\n"],"names":["UmbDocumentPublicAccessServerDataSource","#host","host","unique","data","tryExecute","DocumentService","body","UmbDocumentPublicAccessRepository","UmbControllerBase","#dataSource","#notificationContext","UMB_NOTIFICATION_CONTEXT","instance","error","notification","_publicAccessRepository","_unique","_isNew","_UmbPublicAccessModalElement_instances","getDocumentName_fn","getPublicAccessModel_fn","handleNext_fn","handleSave_fn","handleDelete_fn","handleCancel_fn","onChangeLoginPage_fn","onChangeErrorPage_fn","onChangeGroup_fn","onChangeMember_fn","UmbPublicAccessModalElement","UmbModalBaseElement","__privateAdd","__privateSet","__privateMethod","html","e","confirm","remove","__privateGet","nothing","UmbDocumentItemRepository","item","m","g","repo","UmbMemberDetailRepository","promises","memberId","memberUserNames","response","UmbMemberGroupItemRepository","groupNames","groupItem","createOrUpdate","UmbTextStyles","css","__decorateClass","state","customElement","UmbPublicAccessModalElement$1"],"mappings":"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"}