{"version":3,"file":"member-detail.repository-CvhkhLhZ.js","sources":["../../../src/packages/members/member/repository/detail/member-detail.server.data-source.ts","../../../src/packages/members/member/repository/detail/member-detail.repository.ts"],"sourcesContent":["import type { UmbMemberDetailModel } from '../../types.js';\r\nimport { UMB_MEMBER_ENTITY_TYPE, UMB_MEMBER_PROPERTY_VALUE_ENTITY_TYPE } from '../../entity.js';\r\nimport { UmbMemberKind } from '../../utils/index.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\nimport type { CreateMemberRequestModel, UpdateMemberRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { MemberService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport {umbDeepMerge, type UmbDeepPartialObject} from '@umbraco-cms/backoffice/utils';\r\nimport { UmbMemberTypeDetailServerDataSource } from '@umbraco-cms/backoffice/member-type';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\n\r\n/**\r\n * A data source for the Member that fetches data from the server\r\n * @class UmbMemberServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbMemberServerDataSource extends UmbControllerBase implements UmbDetailDataSource<UmbMemberDetailModel> {\r\n\t/**\r\n\t * Creates a new Member scaffold\r\n\t * @param {Partial<UmbMemberDetailModel>} [preset]\r\n\t * @returns { CreateMemberRequestModel }\r\n\t * @memberof UmbMemberServerDataSource\r\n\t */\r\n\tasync createScaffold(preset: UmbDeepPartialObject<UmbMemberDetailModel> = {}) {\r\n\t\tlet memberTypeIcon = '';\r\n\r\n\t\tconst memberTypeUnique = preset.memberType?.unique;\r\n\r\n\t\tif (!memberTypeUnique) {\r\n\t\t\tthrow new Error('Document type unique is missing');\r\n\t\t}\r\n\r\n\t\tconst { data } = await new UmbMemberTypeDetailServerDataSource(this).read(memberTypeUnique);\r\n\t\tmemberTypeIcon = data?.icon ?? '';\r\n\r\n\t\tconst defaultData: UmbMemberDetailModel = {\r\n\t\t\tentityType: UMB_MEMBER_ENTITY_TYPE,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\temail: '',\r\n\t\t\tusername: '',\r\n\t\t\tmemberType: {\r\n\t\t\t\tunique: memberTypeUnique,\r\n\t\t\t\ticon: memberTypeIcon,\r\n\t\t\t},\r\n\t\t\tisApproved: false,\r\n\t\t\tisLockedOut: false,\r\n\t\t\tisTwoFactorEnabled: false,\r\n\t\t\tkind: UmbMemberKind.DEFAULT,\r\n\t\t\tfailedPasswordAttempts: 0,\r\n\t\t\tlastLoginDate: null,\r\n\t\t\tlastLockoutDate: null,\r\n\t\t\tlastPasswordChangeDate: null,\r\n\t\t\tgroups: [],\r\n\t\t\tvalues: [],\r\n\t\t\tvariants: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: '',\r\n\t\t\t\t\tculture: null,\r\n\t\t\t\t\tsegment: null,\r\n\t\t\t\t\tcreateDate: new Date().toISOString(),\r\n\t\t\t\t\tupdateDate: new Date().toISOString(),\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t};\r\n\r\n\t\tconst scaffold = umbDeepMerge(preset, defaultData);\r\n\r\n\t\treturn { data: scaffold };\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a Member with the given id from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbMemberServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(this, MemberService.getMemberById({ path: { id: unique } }));\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst Member: UmbMemberDetailModel = {\r\n\t\t\tentityType: UMB_MEMBER_ENTITY_TYPE,\r\n\t\t\tunique: data.id,\r\n\t\t\temail: data.email,\r\n\t\t\tusername: data.username,\r\n\t\t\tmemberType: {\r\n\t\t\t\tunique: data.memberType.id,\r\n\t\t\t\ticon: data.memberType.icon,\r\n\t\t\t},\r\n\t\t\tisApproved: data.isApproved,\r\n\t\t\tisLockedOut: data.isLockedOut,\r\n\t\t\tisTwoFactorEnabled: data.isTwoFactorEnabled,\r\n\t\t\tkind: data.kind,\r\n\t\t\tfailedPasswordAttempts: data.failedPasswordAttempts,\r\n\t\t\tlastLoginDate: data.lastLoginDate || null,\r\n\t\t\tlastLockoutDate: data.lastLockoutDate || null,\r\n\t\t\tlastPasswordChangeDate: data.lastPasswordChangeDate || null,\r\n\t\t\tgroups: data.groups,\r\n\t\t\tvalues: data.values.map((value) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\talias: value.alias,\r\n\t\t\t\t\tculture: value.culture || null,\r\n\t\t\t\t\teditorAlias: value.editorAlias,\r\n\t\t\t\t\tentityType: UMB_MEMBER_PROPERTY_VALUE_ENTITY_TYPE,\r\n\t\t\t\t\tsegment: value.segment || null,\r\n\t\t\t\t\tvalue: value.value,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\tvariants: data.variants.map((variant) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tculture: variant.culture || null,\r\n\t\t\t\t\tsegment: variant.segment || null,\r\n\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\tcreateDate: variant.createDate,\r\n\t\t\t\t\tupdateDate: variant.updateDate,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t};\r\n\r\n\t\treturn { data: Member };\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a new Member on the server\r\n\t * @param {UmbMemberDetailModel} model\r\n\t * @returns {*}\r\n\t * @memberof UmbMemberServerDataSource\r\n\t */\r\n\tasync create(model: UmbMemberDetailModel) {\r\n\t\tif (!model) throw new Error('Member is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: CreateMemberRequestModel = {\r\n\t\t\tid: model.unique,\r\n\t\t\temail: model.email,\r\n\t\t\tusername: model.username,\r\n\t\t\tpassword: model.newPassword || '',\r\n\t\t\tmemberType: { id: model.memberType.unique },\r\n\t\t\tgroups: model.groups,\r\n\t\t\tisApproved: model.isApproved,\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis,\r\n\t\t\tMemberService.postMember({\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data && typeof data === 'string') {\r\n\t\t\treturn this.read(data);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a Member on the server\r\n\t * @param {UmbMemberDetailModel} Member\r\n\t * @param model\r\n\t * @returns {*}\r\n\t * @memberof UmbMemberServerDataSource\r\n\t */\r\n\tasync update(model: UmbMemberDetailModel) {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: UpdateMemberRequestModel = {\r\n\t\t\temail: model.email,\r\n\t\t\tgroups: model.groups,\r\n\t\t\tisApproved: model.isApproved,\r\n\t\t\tisLockedOut: model.isLockedOut,\r\n\t\t\tisTwoFactorEnabled: model.isTwoFactorEnabled,\r\n\t\t\tnewPassword: model.newPassword,\r\n\t\t\toldPassword: model.oldPassword,\r\n\t\t\tusername: model.username,\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis,\r\n\t\t\tMemberService.putMemberById({\r\n\t\t\t\tpath: { id: model.unique },\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn this.read(model.unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a Member on the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbMemberServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn tryExecute(\r\n\t\t\tthis,\r\n\t\t\tMemberService.deleteMemberById({\r\n\t\t\t\tpath: { id: unique },\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbMemberDetailModel } from '../../types.js';\r\nimport { UmbMemberServerDataSource } from './member-detail.server.data-source.js';\r\nimport { UMB_MEMBER_DETAIL_STORE_CONTEXT } from './member-detail.store.context-token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\n/**\r\n * A repository for Member details\r\n * @class UmbMemberDetailRepository\r\n * @augments {UmbDetailRepositoryBase<UmbMemberDetailModel>}\r\n */\r\nexport class UmbMemberDetailRepository extends UmbDetailRepositoryBase<UmbMemberDetailModel> {\r\n\t/**\r\n\t * Creates an instance of UmbMemberDetailRepository.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbMemberDetailRepository\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbMemberServerDataSource, UMB_MEMBER_DETAIL_STORE_CONTEXT);\r\n\t}\r\n\r\n\toverride async create(model: UmbMemberDetailModel) {\r\n\t\treturn super.create(model, null);\r\n\t}\r\n}\r\n\r\nexport default UmbMemberDetailRepository;\r\n"],"names":["UmbMemberServerDataSource","UmbControllerBase","preset","memberTypeIcon","memberTypeUnique","data","UmbMemberTypeDetailServerDataSource","defaultData","UMB_MEMBER_ENTITY_TYPE","UmbId","UmbMemberKind","umbDeepMerge","unique","error","tryExecute","MemberService","value","UMB_MEMBER_PROPERTY_VALUE_ENTITY_TYPE","variant","model","body","UmbMemberDetailRepository","UmbDetailRepositoryBase","host","UMB_MEMBER_DETAIL_STORE_CONTEXT"],"mappings":"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"}