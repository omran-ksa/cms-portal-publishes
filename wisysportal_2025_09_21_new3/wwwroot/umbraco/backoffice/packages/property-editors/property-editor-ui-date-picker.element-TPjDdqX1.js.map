{"version":3,"file":"property-editor-ui-date-picker.element-TPjDdqX1.js","sources":["../../../src/packages/property-editors/date-picker/property-editor-ui-date-picker.element.ts"],"sourcesContent":["import type {\r\n\tUmbPropertyEditorConfigCollection,\r\n\tUmbPropertyEditorUiElement,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport { html, customElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type { UmbInputDateElement } from '@umbraco-cms/backoffice/components';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\n\r\n/**\r\n * This property editor allows the user to pick a date, datetime-local, or time.\r\n * It uses raw datetime strings back and forth, and therefore it has no knowledge\r\n * of timezones. It uses a regular HTML input element underneath, which supports the known\r\n * definitions of \"date\", \"datetime-local\", and \"time\".\r\n *\r\n * The underlying input element reports the value differently depending on the type configuration. Here\r\n * are some examples from the change event:\r\n *\r\n * date: 2024-05-03\r\n * datetime-local: 2024-05-03T10:44\r\n * time: 10:44\r\n *\r\n * These values are approximately similar to what Umbraco expects for the Umbraco.DateTime\r\n * data editor with one exception: the \"T\" character in \"datetime-local\". To be backwards compatible, we are\r\n * replacing the T character with a whitespace, which also happens to work just fine\r\n * with the \"datetime-local\" type.\r\n * @element umb-property-editor-ui-date-picker\r\n */\r\n@customElement('umb-property-editor-ui-date-picker')\r\nexport class UmbPropertyEditorUIDatePickerElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly: boolean = false;\r\n\r\n\t@state()\r\n\tprivate _inputType: UmbInputDateElement['type'] = 'datetime-local';\r\n\r\n\t@state()\r\n\tprivate _min?: string;\r\n\r\n\t@state()\r\n\tprivate _max?: string;\r\n\r\n\t@state()\r\n\tprivate _step?: number;\r\n\r\n\t@property()\r\n\tvalue?: string;\r\n\r\n\t@state()\r\n\tprivate _inputValue?: string;\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\r\n\t\t// Format string prevalue/config\r\n\t\tconst format = config.getValueByAlias<string>('format');\r\n\t\tconst hasTime = (format?.includes('H') || format?.includes('m')) ?? false;\r\n\t\tconst hasSeconds = format?.includes('s') ?? false;\r\n\t\tthis._inputType = hasTime ? 'datetime-local' : 'date';\r\n\r\n\t\t// Based on the type of format string change the UUI-input type\r\n\t\t// Note: The format string is not validated, so it's possible to have an invalid format string,\r\n\t\t// but we do not use the format string for anything else than to determine the input type.\r\n\t\t// The format string is not used to validate the value and is only used on the frontend.\r\n\t\tconst timeFormatPattern = /^h{1,2}:m{1,2}(:s{1,2})?\\s?a?$/gim;\r\n\t\tif (format?.toLowerCase().match(timeFormatPattern)) {\r\n\t\t\tthis._inputType = 'time';\r\n\t\t}\r\n\r\n\t\tthis._min = config.getValueByAlias('min');\r\n\t\tthis._max = config.getValueByAlias('max');\r\n\t\tthis._step = (config.getValueByAlias('step') ?? hasSeconds) ? 1 : undefined;\r\n\r\n\t\tif (this.value) {\r\n\t\t\tthis.#formatValue(this.value);\r\n\t\t}\r\n\t}\r\n\r\n\t#onChange(event: CustomEvent & { target: UmbInputDateElement }) {\r\n\t\tlet value = event.target.value.toString();\r\n\r\n\t\tif (!value) {\r\n\t\t\tthis.#syncValue(undefined);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tswitch (this._inputType) {\r\n\t\t\tcase 'time':\r\n\t\t\t\tvalue = `0001-01-01 ${value}`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'date':\r\n\t\t\t\tvalue = `${value} 00:00:00`;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'datetime-local':\r\n\t\t\t\tvalue = value.replace('T', ' ');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tthis.#syncValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value depending on the input type.\r\n\t * @param value\r\n\t */\r\n\t#formatValue(value: string) {\r\n\t\tthis._inputValue = undefined;\r\n\r\n\t\tif (isNaN(new Date(value).getTime())) {\r\n\t\t\tconsole.warn(`[UmbDatePicker] Invalid date: ${value}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst dateSplit = value.split(' ');\r\n\t\tif (dateSplit.length !== 2) {\r\n\t\t\tconsole.warn(`[UmbDatePicker] Invalid date: ${value}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tswitch (this._inputType) {\r\n\t\t\tcase 'time':\r\n\t\t\t\tthis._inputValue = dateSplit[1];\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'date':\r\n\t\t\t\tthis._inputValue = dateSplit[0];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis._inputValue = dateSplit.join('T');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t#syncValue(value?: string) {\r\n\t\tconst valueHasChanged = this.value !== value;\r\n\t\tif (valueHasChanged) {\r\n\t\t\tthis.value = value;\r\n\t\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t\t}\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-input-date\r\n\t\t\t\tlabel=${this.localize.term('placeholders_enterdate')}\r\n\t\t\t\t.value=${this._inputValue}\r\n\t\t\t\t.min=${this._min}\r\n\t\t\t\t.max=${this._max}\r\n\t\t\t\t.step=${this._step}\r\n\t\t\t\t.type=${this._inputType}\r\n\t\t\t\t@change=${this.#onChange}\r\n\t\t\t\t?readonly=${this.readonly}>\r\n\t\t\t</umb-input-date>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport default UmbPropertyEditorUIDatePickerElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-date-picker': UmbPropertyEditorUIDatePickerElement;\r\n\t}\r\n}\r\n"],"names":["_UmbPropertyEditorUIDatePickerElement_instances","onChange_fn","formatValue_fn","syncValue_fn","UmbPropertyEditorUIDatePickerElement","UmbLitElement","__privateAdd","config","format","hasTime","hasSeconds","timeFormatPattern","__privateMethod","html","event","value","dateSplit","UmbChangeEvent","__decorateClass","property","state","customElement","UmbPropertyEditorUIDatePickerElement$1"],"mappings":"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"}