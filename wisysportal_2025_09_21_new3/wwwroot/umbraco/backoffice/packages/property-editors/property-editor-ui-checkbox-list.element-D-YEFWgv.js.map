{"version":3,"file":"property-editor-ui-checkbox-list.element-D-YEFWgv.js","sources":["../../../src/packages/property-editors/checkbox-list/property-editor-ui-checkbox-list.element.ts"],"sourcesContent":["import type {\r\n\tUmbCheckboxListItem,\r\n\tUmbInputCheckboxListElement,\r\n} from './components/input-checkbox-list/input-checkbox-list.element.js';\r\nimport { customElement, html, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UMB_VALIDATION_EMPTY_LOCALIZATION_KEY, UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\nimport type {\r\n\tUmbPropertyEditorConfigCollection,\r\n\tUmbPropertyEditorUiElement,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\n\r\nimport './components/input-checkbox-list/input-checkbox-list.element.js';\r\n\r\n/**\r\n * @element umb-property-editor-ui-checkbox-list\r\n */\r\n@customElement('umb-property-editor-ui-checkbox-list')\r\nexport class UmbPropertyEditorUICheckboxListElement\r\n\textends UmbFormControlMixin<Array<string> | string | undefined, typeof UmbLitElement, undefined>(\r\n\t\tUmbLitElement,\r\n\t\tundefined,\r\n\t)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t#selection: Array<string> = [];\r\n\r\n\t@property({ type: Array })\r\n\tpublic override set value(value: Array<string> | string | undefined) {\r\n\t\tthis.#selection = Array.isArray(value) ? value : value ? [value] : [];\r\n\t}\r\n\tpublic override get value(): Array<string> | undefined {\r\n\t\treturn this.#selection;\r\n\t}\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\r\n\t\tconst items = config.getValueByAlias('items');\r\n\r\n\t\tif (Array.isArray(items) && items.length) {\r\n\t\t\tthis._list =\r\n\t\t\t\ttypeof items[0] === 'string'\r\n\t\t\t\t\t? items.map((item) => ({ label: item, value: item, checked: this.#selection.includes(item) }))\r\n\t\t\t\t\t: items.map((item) => ({\r\n\t\t\t\t\t\t\tlabel: item.name,\r\n\t\t\t\t\t\t\tvalue: item.value,\r\n\t\t\t\t\t\t\tchecked: this.#selection.includes(item.value),\r\n\t\t\t\t\t\t}));\r\n\r\n\t\t\t// If selection includes a value that is not in the list, add it to the list\r\n\t\t\tthis.#selection.forEach((value) => {\r\n\t\t\t\tif (!this._list.find((item) => item.value === value)) {\r\n\t\t\t\t\tthis._list.push({ label: value, value, checked: true, invalid: true });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly = false;\r\n\r\n\t/**\r\n\t * Sets the input to mandatory, meaning validation will fail if the value is empty.\r\n\t * @type {boolean}\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tmandatory?: boolean;\r\n\r\n\t@property({ type: String })\r\n\tmandatoryMessage = UMB_VALIDATION_EMPTY_LOCALIZATION_KEY;\r\n\r\n\t@state()\r\n\tprivate _list: Array<UmbCheckboxListItem> = [];\r\n\r\n\tprotected override firstUpdated() {\r\n\t\tthis.addFormControlElement(this.shadowRoot!.querySelector('umb-input-checkbox-list')!);\r\n\t}\r\n\r\n\t#onChange(event: CustomEvent & { target: UmbInputCheckboxListElement }) {\r\n\t\tthis.value = event.target.selection;\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-input-checkbox-list\r\n\t\t\t\t.list=${this._list}\r\n\t\t\t\t.required=${this.mandatory}\r\n\t\t\t\t.requiredMessage=${this.mandatoryMessage}\r\n\t\t\t\t.selection=${this.#selection}\r\n\t\t\t\t?readonly=${this.readonly}\r\n\t\t\t\t@change=${this.#onChange}>\r\n\t\t\t</umb-input-checkbox-list>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport default UmbPropertyEditorUICheckboxListElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-checkbox-list': UmbPropertyEditorUICheckboxListElement;\r\n\t}\r\n}\r\n"],"names":["_selection","_UmbPropertyEditorUICheckboxListElement_instances","onChange_fn","UmbPropertyEditorUICheckboxListElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UMB_VALIDATION_EMPTY_LOCALIZATION_KEY","value","__privateSet","__privateGet","config","items","item","html","__privateMethod","event","UmbChangeEvent","__decorateClass","property","state","customElement","UmbPropertyEditorUICheckboxListElement$1"],"mappings":";;;;;;;;;;;wYAAAA,GAAAC,GAAAC;AAmBO,IAAMC,IAAN,cACEC;AAAA,EACPC;AAAA,EACA;AACD,EAED;AAAA,EANO,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAL,CAAA,GAONK,EAAA,MAAAN,GAA4B,EAAC,GAyClB,KAAA,WAAA,IAUQ,KAAA,mBAAAO,GAGnB,KAAQ,QAAoC,CAAC;AAAA,EAAA;AAAA,EAnD7C,IAAoB,MAAMC,GAA2C;AAC/D,IAAAC,EAAA,MAAAT,GAAa,MAAM,QAAQQ,CAAK,IAAIA,IAAQA,IAAQ,CAACA,CAAK,IAAI,CAAA,CAAC;AAAA,EAAA;AAAA,EAErE,IAAoB,QAAmC;AACtD,WAAOE,EAAK,MAAAV,CAAA;AAAA,EAAA;AAAA,EAGb,IAAW,OAAOW,GAAuD;AACxE,QAAI,CAACA,EAAQ;AAEP,UAAAC,IAAQD,EAAO,gBAAgB,OAAO;AAE5C,IAAI,MAAM,QAAQC,CAAK,KAAKA,EAAM,WAC5B,KAAA,QACJ,OAAOA,EAAM,CAAC,KAAM,WACjBA,EAAM,IAAI,CAACC,OAAU,EAAE,OAAOA,GAAM,OAAOA,GAAM,SAASH,EAAK,MAAAV,CAAA,EAAW,SAASa,CAAI,EAAE,EAAE,IAC3FD,EAAM,IAAI,CAACC,OAAU;AAAA,MACrB,OAAOA,EAAK;AAAA,MACZ,OAAOA,EAAK;AAAA,MACZ,SAASH,EAAA,MAAKV,CAAW,EAAA,SAASa,EAAK,KAAK;AAAA,IAAA,EAC3C,GAGAH,EAAA,MAAAV,CAAA,EAAW,QAAQ,CAACQ,MAAU;AAC9B,MAAC,KAAK,MAAM,KAAK,CAACK,MAASA,EAAK,UAAUL,CAAK,KAC7C,KAAA,MAAM,KAAK,EAAE,OAAOA,GAAO,OAAAA,GAAO,SAAS,IAAM,SAAS,GAAA,CAAM;AAAA,IACtE,CACA;AAAA,EACF;AAAA,EAyBkB,eAAe;AACjC,SAAK,sBAAsB,KAAK,WAAY,cAAc,yBAAyB,CAAE;AAAA,EAAA;AAAA,EAQ7E,SAAS;AACV,WAAAM;AAAA;AAAA,YAEG,KAAK,KAAK;AAAA,gBACN,KAAK,SAAS;AAAA,uBACP,KAAK,gBAAgB;AAAA,iBAC3BJ,QAAKV,CAAU,CAAA;AAAA,gBAChB,KAAK,QAAQ;AAAA,cACfe,QAAKd,GAASC,CAAA,CAAA;AAAA;AAAA;AAAA,EAAA;AAI5B;AA7ECF,IAAA,oBAAA,QAAA;AAPMC,IAAA,oBAAA,QAAA;AAmENC,IAAS,SAACc,GAA8D;AAClE,OAAA,QAAQA,EAAM,OAAO,WACrB,KAAA,cAAc,IAAIC,GAAgB;AACxC;AA5DoBC,EAAA;AAAA,EADnBC,EAAS,EAAE,MAAM,MAAO,CAAA;AAAA,GATbhB,EAUQ,WAAA,SAAA,CAAA;AAsCpBe,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GA/C9BhB,EAgDZ,WAAA,YAAA,CAAA;AAOAe,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAS,CAAA;AAAA,GAtDfhB,EAuDZ,WAAA,aAAA,CAAA;AAGAe,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAzDdhB,EA0DZ,WAAA,oBAAA,CAAA;AAGQe,EAAA;AAAA,EADPE,EAAM;AAAA,GA5DKjB,EA6DJ,WAAA,SAAA,CAAA;AA7DIA,IAANe,EAAA;AAAA,EADNG,EAAc,sCAAsC;AAAA,GACxClB,CAAA;AAsFb,MAAAmB,IAAenB;"}