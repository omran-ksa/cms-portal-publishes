{"version":3,"file":"property-editor-ui-text-box.element-DMDlsyuW.js","sources":["../../../src/packages/property-editors/text-box/property-editor-ui-text-box.element.ts"],"sourcesContent":["import { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { css, html, customElement, state, ifDefined, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport type {\r\n\tUmbPropertyEditorUiElement,\r\n\tUmbPropertyEditorConfigCollection,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type { UUIInputElement } from '@umbraco-cms/backoffice/external/uui';\r\nimport { UMB_VALIDATION_EMPTY_LOCALIZATION_KEY, UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\n\r\ntype UuiInputTypeType = typeof UUIInputElement.prototype.type;\r\n\r\n@customElement('umb-property-editor-ui-text-box')\r\nexport class UmbPropertyEditorUITextBoxElement\r\n\textends UmbFormControlMixin<string, typeof UmbLitElement, undefined>(UmbLitElement, undefined)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly = false;\r\n\r\n\t/**\r\n\t * Sets the input to mandatory, meaning validation will fail if the value is empty.\r\n\t * @type {boolean}\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tmandatory?: boolean;\r\n\t@property({ type: String })\r\n\tmandatoryMessage = UMB_VALIDATION_EMPTY_LOCALIZATION_KEY;\r\n\r\n\t/**\r\n\t * The name of this field.\r\n\t * @type {string}\r\n\t */\r\n\t@property({ type: String })\r\n\tname?: string;\r\n\r\n\t#defaultType: UuiInputTypeType = 'text';\r\n\r\n\t@state()\r\n\tprivate _type: UuiInputTypeType = this.#defaultType;\r\n\r\n\t@state()\r\n\tprivate _inputMode?: string;\r\n\r\n\t@state()\r\n\tprivate _maxChars?: number;\r\n\r\n\t@state()\r\n\tprivate _placeholder?: string;\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tthis._type = config?.getValueByAlias<UuiInputTypeType>('inputType') ?? this.#defaultType;\r\n\t\tthis._inputMode = config?.getValueByAlias('inputMode');\r\n\t\tthis._maxChars = config?.getValueByAlias('maxChars');\r\n\t\tthis._placeholder = config?.getValueByAlias('placeholder');\r\n\t}\r\n\r\n\tprotected override firstUpdated(): void {\r\n\t\tthis.addFormControlElement(this.shadowRoot!.querySelector('uui-input')!);\r\n\t}\r\n\r\n\toverride focus() {\r\n\t\treturn this.shadowRoot?.querySelector<UUIInputElement>('uui-input')?.focus();\r\n\t}\r\n\r\n\t#onInput(e: InputEvent) {\r\n\t\tconst newValue = (e.target as HTMLInputElement).value;\r\n\t\tif (newValue === this.value) return;\r\n\t\tthis.value = newValue;\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`<uui-input\r\n\t\t\t.label=${this.localize.term('general_fieldFor', [this.name])}\r\n\t\t\t.value=${this.value ?? ''}\r\n\t\t\t.type=${this._type}\r\n\t\t\tplaceholder=${ifDefined(this._placeholder)}\r\n\t\t\tinputMode=${ifDefined(this._inputMode)}\r\n\t\t\tmaxlength=${ifDefined(this._maxChars)}\r\n\t\t\t@input=${this.#onInput}\r\n\t\t\t?required=${this.mandatory}\r\n\t\t\t.requiredMessage=${this.mandatoryMessage}\r\n\t\t\t?readonly=${this.readonly}></uui-input>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\tuui-input {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbPropertyEditorUITextBoxElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-text-box': UmbPropertyEditorUITextBoxElement;\r\n\t}\r\n}\r\n"],"names":["_defaultType","_UmbPropertyEditorUITextBoxElement_instances","onInput_fn","UmbPropertyEditorUITextBoxElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UMB_VALIDATION_EMPTY_LOCALIZATION_KEY","__privateGet","config","html","ifDefined","__privateMethod","newValue","UmbChangeEvent","UmbTextStyles","css","__decorateClass","property","state","customElement","UmbPropertyEditorUITextBoxElement$1"],"mappings":";;;;;;;;;;;+TAAAA,GAAAC,GAAAC;AAcO,IAAMC,IAAN,cACEC,EAA6DC,GAAe,MAAS,EAE9F;AAAA,EAHO,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAL,CAAA,GAWK,KAAA,WAAA,IASQ,KAAA,mBAAAM,GAScD,EAAA,MAAAN,GAAA,MAAA,GAGjC,KAAQ,QAA0BQ,EAAK,MAAAR,CAAA;AAAA,EAAA;AAAA,EAWvC,IAAW,OAAOS,GAAuD;AACxE,SAAK,QAAQA,GAAQ,gBAAkC,WAAW,KAAKD,EAAK,MAAAR,CAAA,GACvE,KAAA,aAAaS,GAAQ,gBAAgB,WAAW,GAChD,KAAA,YAAYA,GAAQ,gBAAgB,UAAU,GAC9C,KAAA,eAAeA,GAAQ,gBAAgB,aAAa;AAAA,EAAA;AAAA,EAGvC,eAAqB;AACvC,SAAK,sBAAsB,KAAK,WAAY,cAAc,WAAW,CAAE;AAAA,EAAA;AAAA,EAG/D,QAAQ;AAChB,WAAO,KAAK,YAAY,cAA+B,WAAW,GAAG,MAAM;AAAA,EAAA;AAAA,EAUnE,SAAS;AACV,WAAAC;AAAA,YACG,KAAK,SAAS,KAAK,oBAAoB,CAAC,KAAK,IAAI,CAAC,CAAC;AAAA,YACnD,KAAK,SAAS,EAAE;AAAA,WACjB,KAAK,KAAK;AAAA,iBACJC,EAAU,KAAK,YAAY,CAAC;AAAA,eAC9BA,EAAU,KAAK,UAAU,CAAC;AAAA,eAC1BA,EAAU,KAAK,SAAS,CAAC;AAAA,YAC5BC,QAAKX,GAAQC,CAAA,CAAA;AAAA,eACV,KAAK,SAAS;AAAA,sBACP,KAAK,gBAAgB;AAAA,eAC5B,KAAK,QAAQ;AAAA,EAAA;AAW5B;AA1DCF,IAAA,oBAAA,QAAA;AA7BMC,IAAA,oBAAA,QAAA;AA0DNC,IAAQ,SAAC,GAAe;AACjB,QAAAW,IAAY,EAAE,OAA4B;AAC5C,EAAAA,MAAa,KAAK,UACtB,KAAK,QAAQA,GACR,KAAA,cAAc,IAAIC,GAAgB;AACxC;AA/DYX,EA+EI,SAAS;AAAA,EACxBY;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAKD;AA3EAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GAV9Bf,EAWZ,WAAA,YAAA,CAAA;AAOAc,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAS,CAAA;AAAA,GAjBff,EAkBZ,WAAA,aAAA,CAAA;AAEAc,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAnBdf,EAoBZ,WAAA,oBAAA,CAAA;AAOAc,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GA1Bdf,EA2BZ,WAAA,QAAA,CAAA;AAKQc,EAAA;AAAA,EADPE,EAAM;AAAA,GA/BKhB,EAgCJ,WAAA,SAAA,CAAA;AAGAc,EAAA;AAAA,EADPE,EAAM;AAAA,GAlCKhB,EAmCJ,WAAA,cAAA,CAAA;AAGAc,EAAA;AAAA,EADPE,EAAM;AAAA,GArCKhB,EAsCJ,WAAA,aAAA,CAAA;AAGAc,EAAA;AAAA,EADPE,EAAM;AAAA,GAxCKhB,EAyCJ,WAAA,gBAAA,CAAA;AAzCIA,IAANc,EAAA;AAAA,EADNG,EAAc,iCAAiC;AAAA,GACnCjB,CAAA;AAyFb,MAAAkB,IAAelB;"}