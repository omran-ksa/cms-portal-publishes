{"version":3,"file":"property-editor-ui-toggle.element-BvT7fQn-.js","sources":["../../../src/packages/property-editors/toggle/property-editor-ui-toggle.element.ts"],"sourcesContent":["import type { UmbTogglePropertyEditorUiValue } from './types.js';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport type { UmbInputToggleElement } from '@umbraco-cms/backoffice/components';\r\nimport { customElement, html, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type {\r\n\tUmbPropertyEditorConfigCollection,\r\n\tUmbPropertyEditorUiElement,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport { UMB_VALIDATION_FALSE_LOCALIZATION_KEY, UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\n\r\n@customElement('umb-property-editor-ui-toggle')\r\nexport class UmbPropertyEditorUIToggleElement\r\n\textends UmbFormControlMixin<UmbTogglePropertyEditorUiValue, typeof UmbLitElement, undefined>(UmbLitElement)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t@property({ type: String })\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly = false;\r\n\r\n\t/**\r\n\t * Sets the input to mandatory, meaning validation will fail if the value is empty.\r\n\t * @type {boolean}\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tmandatory?: boolean;\r\n\t@property({ type: String })\r\n\tmandatoryMessage = UMB_VALIDATION_FALSE_LOCALIZATION_KEY;\r\n\r\n\t@state()\r\n\t_ariaLabel?: string;\r\n\r\n\t@state()\r\n\t_labelOff?: string;\r\n\r\n\t@state()\r\n\t_labelOn?: string;\r\n\r\n\t@state()\r\n\t_showLabels = false;\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\t\tthis._labelOff = config.getValueByAlias('labelOff');\r\n\t\tthis._labelOn = config.getValueByAlias('labelOn');\r\n\t\tthis._showLabels = Boolean(config.getValueByAlias('showLabels'));\r\n\t\tthis._ariaLabel = config.getValueByAlias('ariaLabel');\r\n\t}\r\n\r\n\tprotected override firstUpdated(): void {\r\n\t\tthis.addFormControlElement(this.shadowRoot!.querySelector('umb-input-toggle')!);\r\n\t}\r\n\r\n\t#onChange(event: CustomEvent & { target: UmbInputToggleElement }) {\r\n\t\tconst checked = event.target.checked;\r\n\t\tthis.value = this.mandatory ? (checked ?? null) : checked;\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-input-toggle\r\n\t\t\t\t.ariaLabel=${this._ariaLabel\r\n\t\t\t\t\t? this.localize.string(this._ariaLabel)\r\n\t\t\t\t\t: this.localize.term('general_toggleFor', [this.name])}\r\n\t\t\t\t.labelOn=${this._labelOn}\r\n\t\t\t\t.labelOff=${this._labelOff}\r\n\t\t\t\t?checked=${this.value}\r\n\t\t\t\t?showLabels=${this._showLabels}\r\n\t\t\t\t?required=${this.mandatory}\r\n\t\t\t\t.requiredMessage=${this.mandatoryMessage}\r\n\t\t\t\t@change=${this.#onChange}\r\n\t\t\t\t?readonly=${this.readonly}>\r\n\t\t\t</umb-input-toggle>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport default UmbPropertyEditorUIToggleElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-toggle': UmbPropertyEditorUIToggleElement;\r\n\t}\r\n}\r\n"],"names":["_UmbPropertyEditorUIToggleElement_instances","onChange_fn","UmbPropertyEditorUIToggleElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UMB_VALIDATION_FALSE_LOCALIZATION_KEY","config","html","__privateMethod","event","checked","UmbChangeEvent","__decorateClass","property","state","customElement","UmbPropertyEditorUIToggleElement$1"],"mappings":";;;;;;;;;;8OAAAA,GAAAC;AAYO,IAAMC,IAAN,cACEC,EAAqFC,CAAa,EAE3G;AAAA,EAHO,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAL,CAAA,GAaK,KAAA,WAAA,IASQ,KAAA,mBAAAM,GAYL,KAAA,cAAA;AAAA,EAAA;AAAA,EAEd,IAAW,OAAOC,GAAuD;AACxE,IAAKA,MACA,KAAA,YAAYA,EAAO,gBAAgB,UAAU,GAC7C,KAAA,WAAWA,EAAO,gBAAgB,SAAS,GAChD,KAAK,cAAc,EAAQA,EAAO,gBAAgB,YAAY,GACzD,KAAA,aAAaA,EAAO,gBAAgB,WAAW;AAAA,EAAA;AAAA,EAGlC,eAAqB;AACvC,SAAK,sBAAsB,KAAK,WAAY,cAAc,kBAAkB,CAAE;AAAA,EAAA;AAAA,EAStE,SAAS;AACV,WAAAC;AAAA;AAAA,iBAEQ,KAAK,aACf,KAAK,SAAS,OAAO,KAAK,UAAU,IACpC,KAAK,SAAS,KAAK,qBAAqB,CAAC,KAAK,IAAI,CAAC,CAAC;AAAA,eAC5C,KAAK,QAAQ;AAAA,gBACZ,KAAK,SAAS;AAAA,eACf,KAAK,KAAK;AAAA,kBACP,KAAK,WAAW;AAAA,gBAClB,KAAK,SAAS;AAAA,uBACP,KAAK,gBAAgB;AAAA,cAC9BC,QAAKT,GAASC,CAAA,CAAA;AAAA,gBACZ,KAAK,QAAQ;AAAA;AAAA;AAAA,EAAA;AAI7B;AAvEOD,IAAA,oBAAA,QAAA;AAgDNC,IAAS,SAACS,GAAwD;AAC3D,QAAAC,IAAUD,EAAM,OAAO;AAC7B,OAAK,QAAQ,KAAK,YAAaC,KAAW,OAAQA,GAC7C,KAAA,cAAc,IAAIC,GAAgB;AACxC;AA/CAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAJdZ,EAKZ,WAAA,QAAA,CAAA;AAQAW,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS,SAAS,GAAM,CAAA;AAAA,GAZ9BZ,EAaZ,WAAA,YAAA,CAAA;AAOAW,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAS,CAAA;AAAA,GAnBfZ,EAoBZ,WAAA,aAAA,CAAA;AAEAW,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GArBdZ,EAsBZ,WAAA,oBAAA,CAAA;AAGAW,EAAA;AAAA,EADCE,EAAM;AAAA,GAxBKb,EAyBZ,WAAA,cAAA,CAAA;AAGAW,EAAA;AAAA,EADCE,EAAM;AAAA,GA3BKb,EA4BZ,WAAA,aAAA,CAAA;AAGAW,EAAA;AAAA,EADCE,EAAM;AAAA,GA9BKb,EA+BZ,WAAA,YAAA,CAAA;AAGAW,EAAA;AAAA,EADCE,EAAM;AAAA,GAjCKb,EAkCZ,WAAA,eAAA,CAAA;AAlCYA,IAANW,EAAA;AAAA,EADNG,EAAc,+BAA+B;AAAA,GACjCd,CAAA;AAyEb,MAAAe,IAAef;"}