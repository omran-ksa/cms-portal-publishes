{"version":3,"file":"property-editor-ui-content-picker.element-CChgyQid.js","sources":["../../../src/packages/property-editors/content-picker/dynamic-root/repository/dynamic-root.server.data.ts","../../../src/packages/property-editors/content-picker/dynamic-root/repository/dynamic-root.repository.ts","../../../src/packages/property-editors/content-picker/property-editor-ui-content-picker.element.ts"],"sourcesContent":["import { DynamicRootService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport type { DynamicRootRequestModel, DynamicRootResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\n/**\r\n * UmbContentPickerDynamicRootServerDataSource\r\n * @class UmbContentPickerDynamicRootServerDataSource\r\n */\r\nexport class UmbContentPickerDynamicRootServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Get dynamic root\r\n\t * @param {DynamicRootRequestModel} args\r\n\t * @returns {*}  {(Promise<DynamicRootResponseModel | undefined>)}\r\n\t * @memberof UmbContentPickerDynamicRootServerDataSource\r\n\t */\r\n\tasync getRoot(args: DynamicRootRequestModel): Promise<DynamicRootResponseModel | undefined> {\r\n\t\tif (!args.context) throw new Error('Dynamic Root context is missing');\r\n\t\tif (!args.query) throw new Error('Dynamic Root query is missing');\r\n\r\n\t\tconst body: DynamicRootRequestModel = {\r\n\t\t\tcontext: args.context,\r\n\t\t\tquery: args.query,\r\n\t\t};\r\n\r\n\t\tconst { data } = await tryExecute(this.#host, DynamicRootService.postDynamicRootQuery({ body }));\r\n\r\n\t\treturn data;\r\n\t}\r\n}\r\n","import type { UmbContentPickerDynamicRoot } from '../../types.js';\r\nimport { UmbContentPickerDynamicRootServerDataSource } from './dynamic-root.server.data.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { DynamicRootRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\n\r\nconst GUID_EMPTY: string = '00000000-0000-0000-0000-000000000000';\r\n\r\n/**\r\n * UmbContentPickerDynamicRootRepository\r\n * @class UmbContentPickerDynamicRootRepository\r\n * @augments {UmbControllerBase}\r\n */\r\nexport class UmbContentPickerDynamicRootRepository extends UmbControllerBase {\r\n\t#dataSource: UmbContentPickerDynamicRootServerDataSource;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#dataSource = new UmbContentPickerDynamicRootServerDataSource(host);\r\n\t}\r\n\r\n\t/**\r\n\t * Request dynamic root\r\n\t * @param {UmbContentPickerDynamicRoot} query\r\n\t * @param {string} entityUnique\r\n\t * @param {string} [parentUnique]\r\n\t * @returns {*}\r\n\t * @memberof UmbContentPickerDynamicRootRepository\r\n\t */\r\n\tasync requestRoot(query: UmbContentPickerDynamicRoot, entityUnique: string | null, parentUnique?: string | null) {\r\n\t\tconst model: DynamicRootRequestModel = {\r\n\t\t\tcontext: {\r\n\t\t\t\tid: entityUnique ?? null,\r\n\t\t\t\tparent: { id: parentUnique ?? GUID_EMPTY },\r\n\t\t\t},\r\n\t\t\tquery: {\r\n\t\t\t\torigin: {\r\n\t\t\t\t\talias: query.originAlias,\r\n\t\t\t\t\tid: query.originKey,\r\n\t\t\t\t},\r\n\t\t\t\tsteps:\r\n\t\t\t\t\tquery.querySteps?.map((step) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talias: step.alias!,\r\n\t\t\t\t\t\t\tdocumentTypeIds: step.anyOfDocTypeKeys!,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}) || [],\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst result = await this.#dataSource.getRoot(model);\r\n\r\n\t\treturn result?.roots;\r\n\t}\r\n}\r\n","import { UmbContentPickerDynamicRootRepository } from './dynamic-root/repository/index.js';\r\nimport type { UmbInputContentElement } from './components/input-content/index.js';\r\nimport type { UmbContentPickerSource, UmbContentPickerSourceType } from './types.js';\r\nimport { css, customElement, html, nothing, property, repeat, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\nimport { UMB_ANCESTORS_ENTITY_CONTEXT } from '@umbraco-cms/backoffice/entity';\r\nimport { UMB_DOCUMENT_ENTITY_TYPE } from '@umbraco-cms/backoffice/document';\r\nimport { UMB_MEDIA_ENTITY_TYPE } from '@umbraco-cms/backoffice/media';\r\nimport { UMB_MEMBER_ENTITY_TYPE } from '@umbraco-cms/backoffice/member';\r\nimport type {\r\n\tUmbPropertyEditorConfigCollection,\r\n\tUmbPropertyEditorUiElement,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport type { UmbTreeStartNode } from '@umbraco-cms/backoffice/tree';\r\n\r\n// import of local component\r\nimport './components/input-content/index.js';\r\n\r\ntype UmbContentPickerValueType = UmbInputContentElement['selection'];\r\n\r\n/**\r\n * @element umb-property-editor-ui-content-picker\r\n */\r\n@customElement('umb-property-editor-ui-content-picker')\r\nexport class UmbPropertyEditorUIContentPickerElement\r\n\textends UmbFormControlMixin<UmbContentPickerValueType | undefined, typeof UmbLitElement>(UmbLitElement, undefined)\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t@property({ type: Array })\r\n\tpublic override set value(value: UmbContentPickerValueType | undefined) {\r\n\t\tthis.#value = value;\r\n\t}\r\n\tpublic override get value(): UmbContentPickerValueType | undefined {\r\n\t\treturn this.#value;\r\n\t}\r\n\t#value?: UmbContentPickerValueType = [];\r\n\r\n\t/**\r\n\t * Sets the input to readonly mode, meaning value cannot be changed but still able to read and select its content.\r\n\t * @type {boolean}\r\n\t * @attr\r\n\t * @default false\r\n\t */\r\n\t@property({ type: Boolean, reflect: true })\r\n\treadonly = false;\r\n\r\n\t@state()\r\n\tprivate _type: UmbContentPickerSource['type'] = 'content';\r\n\r\n\t@state()\r\n\tprivate _min = 0;\r\n\r\n\t@state()\r\n\tprivate _minMessage = '';\r\n\r\n\t@state()\r\n\tprivate _max = Infinity;\r\n\r\n\t@state()\r\n\tprivate _maxMessage = '';\r\n\r\n\t@state()\r\n\tprivate _allowedContentTypeUniques?: string | null;\r\n\r\n\t@state()\r\n\tprivate _rootUnique?: string | null;\r\n\r\n\t@state()\r\n\tprivate _rootEntityType?: string;\r\n\r\n\t@state()\r\n\tprivate _invalidData?: UmbContentPickerValueType;\r\n\r\n\t#dynamicRoot?: UmbContentPickerSource['dynamicRoot'];\r\n\t#dynamicRootRepository = new UmbContentPickerDynamicRootRepository(this);\r\n\r\n\t#entityTypeDictionary: { [type in UmbContentPickerSourceType]: string } = {\r\n\t\tcontent: UMB_DOCUMENT_ENTITY_TYPE,\r\n\t\tmedia: UMB_MEDIA_ENTITY_TYPE,\r\n\t\tmember: UMB_MEMBER_ENTITY_TYPE,\r\n\t};\r\n\r\n\tpublic set config(config: UmbPropertyEditorConfigCollection | undefined) {\r\n\t\tif (!config) return;\r\n\r\n\t\tconst startNode = config.getValueByAlias<UmbContentPickerSource>('startNode');\r\n\t\tif (startNode) {\r\n\t\t\tthis._type = startNode.type;\r\n\t\t\tthis._rootUnique = startNode.id;\r\n\t\t\tthis._rootEntityType = this.#entityTypeDictionary[startNode.type];\r\n\t\t\tthis.#dynamicRoot = startNode.dynamicRoot;\r\n\r\n\t\t\t// NOTE: Filter out any items that do not match the entity type. [LK]\r\n\t\t\tthis._invalidData = this.#value?.filter((x) => x.type !== this._rootEntityType);\r\n\t\t\tif (this._invalidData?.length) {\r\n\t\t\t\tthis.readonly = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._min = this.#parseInt(config.getValueByAlias('minNumber'), 0);\r\n\t\tthis._max = this.#parseInt(config.getValueByAlias('maxNumber'), Infinity);\r\n\r\n\t\tthis._allowedContentTypeUniques = config.getValueByAlias('filter');\r\n\r\n\t\tthis._minMessage = `${this.localize.term('validation_minCount')} ${this._min} ${this.localize.term('validation_items')}`;\r\n\t\tthis._maxMessage = `${this.localize.term('validation_maxCount')} ${this._max} ${this.localize.term('validation_itemsSelected')}`;\r\n\r\n\t\t// NOTE: Run validation immediately, to notify if the value is outside of min/max range. [LK]\r\n\t\tif (this._min > 0 || this._max < Infinity) {\r\n\t\t\tthis.checkValidity();\r\n\t\t}\r\n\t}\r\n\r\n\t#parseInt(value: unknown, fallback: number): number {\r\n\t\tconst num = Number(value);\r\n\t\treturn !isNaN(num) && num > 0 ? num : fallback;\r\n\t}\r\n\r\n\toverride firstUpdated() {\r\n\t\tthis.addFormControlElement(this.shadowRoot!.querySelector('umb-input-content')!);\r\n\t\tthis.#setPickerRootUnique();\r\n\r\n\t\tif (this._min && this._max && this._min > this._max) {\r\n\t\t\tconsole.warn(\r\n\t\t\t\t`Property (Content Picker) has been misconfigured, 'minNumber' is greater than 'maxNumber'. Please correct your data type configuration.`,\r\n\t\t\t\tthis,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\toverride focus() {\r\n\t\treturn this.shadowRoot?.querySelector<UmbInputContentElement>('umb-input-content')?.focus();\r\n\t}\r\n\r\n\tasync #setPickerRootUnique() {\r\n\t\t// If we have a root unique value, we don't need to fetch it from the dynamic root\r\n\t\tif (this._rootUnique) return;\r\n\t\tif (!this.#dynamicRoot) return;\r\n\r\n\t\tconst ancestorsContext = await this.getContext(UMB_ANCESTORS_ENTITY_CONTEXT);\r\n\t\tconst ancestors = ancestorsContext?.getAncestors();\r\n\t\tconst [parentUnique, unique] = ancestors?.slice(-2).map((x) => x.unique) ?? [];\r\n\r\n\t\tconst result = await this.#dynamicRootRepository.requestRoot(this.#dynamicRoot, unique, parentUnique);\r\n\t\tif (result && result.length > 0) {\r\n\t\t\tthis._rootUnique = result[0];\r\n\t\t}\r\n\t}\r\n\r\n\t#onChange(event: CustomEvent & { target: UmbInputContentElement }) {\r\n\t\tthis.value = event.target.selection;\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\tasync #onRemoveInvalidData() {\r\n\t\tawait umbConfirmModal(this, {\r\n\t\t\tcolor: 'danger',\r\n\t\t\theadline: '#contentPicker_unsupportedRemove',\r\n\t\t\tcontent: '#defaultdialogs_confirmSure',\r\n\t\t\tconfirmLabel: '#actions_remove',\r\n\t\t});\r\n\r\n\t\tthis.value = this.value?.filter((x) => x.type === this._rootEntityType);\r\n\t\tthis._invalidData = undefined;\r\n\t\tthis.readonly = false;\r\n\t}\r\n\r\n\toverride render() {\r\n\t\tconst startNode: UmbTreeStartNode | undefined =\r\n\t\t\tthis._rootUnique && this._rootEntityType\r\n\t\t\t\t? { unique: this._rootUnique, entityType: this._rootEntityType }\r\n\t\t\t\t: undefined;\r\n\r\n\t\treturn html`\r\n\t\t\t<umb-input-content\r\n\t\t\t\t.selection=${this.value ?? []}\r\n\t\t\t\t.type=${this._type}\r\n\t\t\t\t.min=${this._min}\r\n\t\t\t\t.minMessage=${this._minMessage}\r\n\t\t\t\t.max=${this._max}\r\n\t\t\t\t.maxMessage=${this._maxMessage}\r\n\t\t\t\t.startNode=${startNode}\r\n\t\t\t\t.allowedContentTypeIds=${this._allowedContentTypeUniques ?? ''}\r\n\t\t\t\t?readonly=${this.readonly}\r\n\t\t\t\t@change=${this.#onChange}>\r\n\t\t\t</umb-input-content>\r\n\t\t\t${this.#renderInvalidData()}\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderInvalidData() {\r\n\t\tif (!this._invalidData?.length) return nothing;\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-expect-error\r\n\t\tconst groupby = Object.groupBy(this._invalidData, (x) => x.type);\r\n\t\tconst grouped = Object.keys(groupby)\r\n\t\t\t.sort((a, b) => a.localeCompare(b))\r\n\t\t\t.map((key) => ({ key, items: groupby[key] }));\r\n\r\n\t\tconst toPickerType = (type: string): UmbContentPickerSourceType => {\r\n\t\t\treturn type === UMB_DOCUMENT_ENTITY_TYPE ? 'content' : (type as UmbContentPickerSourceType);\r\n\t\t};\r\n\r\n\t\treturn html`\r\n\t\t\t<div id=\"messages\">\r\n\t\t\t\t${repeat(\r\n\t\t\t\t\tgrouped,\r\n\t\t\t\t\t(group) => group.key,\r\n\t\t\t\t\t(group) => html`\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t<umb-localize key=\"contentPicker_unsupportedHeadline\" .args=${[group.key]}>\r\n\t\t\t\t\t\t\t\t<strong>Unsupported ${group.key} items</strong><br />\r\n\t\t\t\t\t\t\t\tThe following content is no longer supported in this Editor.\r\n\t\t\t\t\t\t\t</umb-localize>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<umb-input-content readonly .selection=${group.items} .type=${toPickerType(group.key)}></umb-input-content>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t<umb-localize key=\"contentPicker_unsupportedMessage\">\r\n\t\t\t\t\t\t\t\tIf you still require this content, please contact your administrator. Otherwise you can remove it.\r\n\t\t\t\t\t\t\t</umb-localize>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<uui-button\r\n\t\t\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\t\t\tlook=\"outline\"\r\n\t\t\t\t\t\t\tlabel=${this.localize.term('contentPicker_unsupportedRemove')}\r\n\t\t\t\t\t\t\t@click=${this.#onRemoveInvalidData}></uui-button>\r\n\t\t\t\t\t`,\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override readonly styles = [\r\n\t\tcss`\r\n\t\t\t#messages {\r\n\t\t\t\tcolor: var(--uui-color-danger-standalone);\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport { UmbPropertyEditorUIContentPickerElement as element };\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-content-picker': UmbPropertyEditorUIContentPickerElement;\r\n\t}\r\n}\r\n"],"names":["UmbContentPickerDynamicRootServerDataSource","#host","host","args","body","data","tryExecute","DynamicRootService","GUID_EMPTY","UmbContentPickerDynamicRootRepository","UmbControllerBase","#dataSource","query","entityUnique","parentUnique","model","step","_value","_dynamicRoot","_dynamicRootRepository","_entityTypeDictionary","_UmbPropertyEditorUIContentPickerElement_instances","parseInt_fn","setPickerRootUnique_fn","onChange_fn","onRemoveInvalidData_fn","renderInvalidData_fn","UmbPropertyEditorUIContentPickerElement","UmbFormControlMixin","UmbLitElement","__privateAdd","UMB_DOCUMENT_ENTITY_TYPE","UMB_MEDIA_ENTITY_TYPE","UMB_MEMBER_ENTITY_TYPE","value","__privateSet","__privateGet","config","startNode","x","__privateMethod","html","fallback","num","ancestors","UMB_ANCESTORS_ENTITY_CONTEXT","unique","result","event","UmbChangeEvent","umbConfirmModal","nothing","groupby","grouped","a","b","key","toPickerType","type","repeat","group","css","__decorateClass","property","state","customElement"],"mappings":"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"}