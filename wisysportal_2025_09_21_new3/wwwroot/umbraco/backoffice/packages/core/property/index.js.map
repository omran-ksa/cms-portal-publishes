{"version":3,"file":"index.js","sources":["../../../../src/packages/core/property/components/unsupported-property/utils.ts","../../../../src/packages/core/property/property-guard-manager/property-guard.manager.ts","../../../../src/packages/core/property/property-guard-manager/variant-property-guard.manager.ts","../../../../src/packages/core/property/property-value-cloner/property-value-clone.controller.ts","../../../../src/packages/core/property/property-value-preset/property-value-preset-builder.controller.ts","../../../../src/packages/core/property/property-value-preset/property-value-preset-variant-builder.controller.ts"],"sourcesContent":["import type { UmbUnsupportedEditorSchemaAliases } from '../../types/index.js';\r\n\r\nexport const UMB_UNSUPPORTED_EDITOR_SCHEMA_ALIASES: UmbUnsupportedEditorSchemaAliases = {\r\n\tblock: ['Umbraco.ImageCropper'],\r\n};\r\n","import type { Observable } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbReferenceByUnique } from '@umbraco-cms/backoffice/models';\r\nimport { UmbGuardManagerBase, type UmbGuardRule } from '@umbraco-cms/backoffice/utils';\r\n\r\nexport interface UmbPropertyGuardRule extends UmbGuardRule {\r\n\tpropertyType?: UmbReferenceByUnique;\r\n}\r\n\r\n/**\r\n *\r\n * @param rule\r\n * @param propertyType\r\n */\r\nfunction findRule(rule: UmbPropertyGuardRule, propertyType: UmbReferenceByUnique) {\r\n\treturn rule.propertyType?.unique === propertyType.unique || rule.propertyType === undefined;\r\n}\r\n\r\n/**\r\n * @description - A Guard to manage property rules.\r\n * @export\r\n * @class UmbPropertyGuardManager\r\n * @augments {UmbGuardManagerBase<UmbPropertyGuardRule>}\r\n */\r\nexport class UmbPropertyGuardManager extends UmbGuardManagerBase<UmbPropertyGuardRule> {\r\n\t/**\r\n\t * Checks if the property is permitted for the given property type\r\n\t * @param {UmbReferenceByUnique} propertyType\r\n\t * @returns {Observable<boolean>} - Observable that emits true if the property is permitted\r\n\t * @memberof UmbPropertyGuardManager\r\n\t */\r\n\tisPermittedForProperty(propertyType: UmbReferenceByUnique): Observable<boolean> {\r\n\t\treturn this._rules.asObservablePart((rules) => this.#resolvePermission(rules, propertyType));\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the property is permitted for the given property type\r\n\t * @param {UmbReferenceByUnique} propertyType\r\n\t * @returns {boolean} - Returns true if the property is permitted\r\n\t * @memberof UmbPropertyGuardManager\r\n\t */\r\n\tgetIsPermittedForProperty(propertyType: UmbReferenceByUnique): boolean {\r\n\t\treturn this.#resolvePermission(this.getRules(), propertyType);\r\n\t}\r\n\r\n\t#resolvePermission(rules: UmbPropertyGuardRule[], propertyType: UmbReferenceByUnique) {\r\n\t\tif (rules.filter((x) => x.permitted === false).some((rule) => findRule(rule, propertyType))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (rules.filter((x) => x.permitted === true).some((rule) => findRule(rule, propertyType))) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn this._fallback;\r\n\t}\r\n}\r\n","import type { UmbPropertyGuardRule } from './property-guard.manager.js';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { Observable } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbReferenceByUnique } from '@umbraco-cms/backoffice/models';\r\nimport { UmbGuardManagerBase } from '@umbraco-cms/backoffice/utils';\r\n\r\nexport interface UmbVariantPropertyGuardRule extends UmbPropertyGuardRule {\r\n\t/**\r\n\t * @description - The variant id of the property.\r\n\t * @type {UmbVariantId}\r\n\t * @memberof UmbVariantPropertyGuardRule\r\n\t */\r\n\tvariantId?: UmbVariantId;\r\n\r\n\t/**\r\n\t * @description - The variant id of the dataset. This is used to determine if the rule applies to the current dataset.\r\n\t * @type {UmbVariantId}\r\n\t * @memberof UmbVariantPropertyGuardRule\r\n\t */\r\n\tdatasetVariantId?: UmbVariantId;\r\n}\r\n\r\n/**\r\n *\r\n * @param {UmbVariantPropertyGuardRule} rule - The rule to check.\r\n * @param {UmbVariantId} variantId - The property variant id to check.\r\n * @param {UmbReferenceByUnique} propertyType - The property type to check.\r\n * @param {UmbVariantId} datasetVariantId - The variant id of the dataset. This is used to determine if the rule applies to the current dataset.\r\n * @returns {boolean} - Returns true if the rule applies to the given conditions.\r\n */\r\nfunction findRule(\r\n\trule: UmbVariantPropertyGuardRule,\r\n\tvariantId: UmbVariantId,\r\n\tpropertyType: UmbReferenceByUnique,\r\n\tdatasetVariantId: UmbVariantId,\r\n) {\r\n\treturn (\r\n\t\t(rule.variantId === undefined || rule.variantId.culture === variantId.culture) &&\r\n\t\t(rule.propertyType === undefined || rule.propertyType.unique === propertyType.unique) &&\r\n\t\t(rule.datasetVariantId === undefined || rule.datasetVariantId.culture === datasetVariantId.culture)\r\n\t);\r\n}\r\n\r\n/**\r\n * UmbVariantPropertyGuardManager is a class that manages the rules for variant properties.\r\n * @export\r\n * @class UmbVariantPropertyGuardManager\r\n * @augments {UmbGuardManagerBase<UmbVariantPropertyGuardRule>}\r\n */\r\nexport class UmbVariantPropertyGuardManager extends UmbGuardManagerBase<UmbVariantPropertyGuardRule> {\r\n\t/**\r\n\t * Checks if the variant and propertyType is permitted.\r\n\t * @param {UmbVariantId} variantId - The variant id to check.\r\n\t * @param {UmbReferenceByUnique} propertyType - The property type to check.\r\n\t * @param {UmbVariantId} datasetVariantId - The dataset variant id to check.\r\n\t * @returns {Observable<boolean>} - Returns an observable that emits true if the variant and propertyType is permitted, false otherwise.\r\n\t * @memberof UmbVariantPropertyGuardManager\r\n\t */\r\n\tisPermittedForVariantAndProperty(\r\n\t\tvariantId: UmbVariantId,\r\n\t\tpropertyType: UmbReferenceByUnique,\r\n\t\tdatasetVariantId: UmbVariantId,\r\n\t): Observable<boolean> {\r\n\t\treturn this._rules.asObservablePart((rules) =>\r\n\t\t\tthis.#resolvePermission(rules, variantId, propertyType, datasetVariantId),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the variant and propertyType is permitted.\r\n\t * @param {UmbVariantId} variantId - The variant id to check.\r\n\t * @param {UmbReferenceByUnique} propertyType - The property type to check.\r\n\t * @param {UmbVariantId} datasetVariantId - The dataset variant id to check.\r\n\t * @returns {boolean} - Returns true if the variant and propertyType is permitted, false otherwise.\r\n\t * @memberof UmbVariantPropertyGuardManager\r\n\t */\r\n\tgetIsPermittedForVariantAndProperty(\r\n\t\tvariantId: UmbVariantId,\r\n\t\tpropertyType: UmbReferenceByUnique,\r\n\t\tdatasetVariantId: UmbVariantId,\r\n\t): boolean {\r\n\t\treturn this.#resolvePermission(this._rules.getValue(), variantId, propertyType, datasetVariantId);\r\n\t}\r\n\r\n\t#resolvePermission(\r\n\t\trules: UmbVariantPropertyGuardRule[],\r\n\t\tvariantId: UmbVariantId,\r\n\t\tpropertyType: UmbReferenceByUnique,\r\n\t\tdatasetVariantId: UmbVariantId,\r\n\t) {\r\n\t\tif (\r\n\t\t\trules\r\n\t\t\t\t.filter((x) => x.permitted === false)\r\n\t\t\t\t.some((rule) => findRule(rule, variantId, propertyType, datasetVariantId))\r\n\t\t) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (\r\n\t\t\trules\r\n\t\t\t\t.filter((x) => x.permitted === true)\r\n\t\t\t\t.some((rule) => findRule(rule, variantId, propertyType, datasetVariantId))\r\n\t\t) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn this._fallback;\r\n\t}\r\n}\r\n","import type { UmbPropertyValueDataPotentiallyWithEditorAlias } from '../index.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { createExtensionApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class UmbPropertyValueCloneController extends UmbControllerBase {\r\n\t/**\r\n\t * Clones the property data.\r\n\t * @param {UmbPropertyValueDataPotentiallyWithEditorAlias} property - The property data.\r\n\t * @returns {Promise<UmbPropertyValueDataPotentiallyWithEditorAlias>} - A promise that resolves to the cloned property data.\r\n\t */\r\n\tasync clone<ValueType = unknown>(\r\n\t\tproperty: UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>,\r\n\t): Promise<UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>> {\r\n\t\tconst result = await this.#cloneProperty<ValueType>(property);\r\n\r\n\t\tthis.destroy();\r\n\r\n\t\treturn result ?? property;\r\n\t}\r\n\r\n\tasync #cloneProperty<ValueType>(\r\n\t\tproperty: UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>,\r\n\t): Promise<UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>> {\r\n\t\tconst clonedProperty = await this.#cloneValue(property);\r\n\t\treturn await this.#cloneInnerValues<ValueType>(clonedProperty);\r\n\t}\r\n\r\n\tasync #cloneValue<ValueType>(\r\n\t\tincomingProperty: UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>,\r\n\t): Promise<UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>> {\r\n\t\tconst editorAlias = (incomingProperty as any).editorAlias as string | undefined;\r\n\t\tif (!editorAlias) {\r\n\t\t\tconsole.error(`Editor alias not found for ${incomingProperty.alias}`);\r\n\t\t\treturn incomingProperty;\r\n\t\t}\r\n\r\n\t\t// Find the cloner for this editor alias:\r\n\t\tconst manifest = umbExtensionsRegistry.getByTypeAndFilter(\r\n\t\t\t'propertyValueCloner',\r\n\t\t\t(x) => x.forEditorAlias === editorAlias,\r\n\t\t)[0];\r\n\r\n\t\tif (!manifest) {\r\n\t\t\treturn incomingProperty;\r\n\t\t}\r\n\r\n\t\tconst api = await createExtensionApi(this, manifest);\r\n\t\tif (!api) {\r\n\t\t\treturn incomingProperty;\r\n\t\t}\r\n\r\n\t\t(api as any).manifest = manifest;\r\n\r\n\t\tlet clonedProperty = incomingProperty;\r\n\r\n\t\tif (api.cloneValue) {\r\n\t\t\tconst clonedValue = await api.cloneValue(incomingProperty.value);\r\n\t\t\tif (clonedValue) {\r\n\t\t\t\tclonedProperty = { ...incomingProperty, value: clonedValue };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn clonedProperty;\r\n\t}\r\n\r\n\tasync #cloneInnerValues<ValueType>(\r\n\t\tincomingProperty: UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>,\r\n\t): Promise<UmbPropertyValueDataPotentiallyWithEditorAlias<ValueType>> {\r\n\t\tconst editorAlias = (incomingProperty as any).editorAlias as string | undefined;\r\n\t\tif (!editorAlias) {\r\n\t\t\treturn incomingProperty;\r\n\t\t}\r\n\r\n\t\t// Find the resolver for this editor alias:\r\n\t\tconst manifest = umbExtensionsRegistry.getByTypeAndFilter(\r\n\t\t\t'propertyValueResolver',\r\n\t\t\t// TODO: Remove depcrated filter option in v.17 [NL]\r\n\t\t\t(x) => x.forEditorAlias === editorAlias || x.meta?.editorAlias === editorAlias,\r\n\t\t)[0];\r\n\r\n\t\tif (!manifest) {\r\n\t\t\treturn incomingProperty;\r\n\t\t}\r\n\r\n\t\tconst api = await createExtensionApi(this, manifest);\r\n\t\tif (!api) {\r\n\t\t\treturn incomingProperty;\r\n\t\t}\r\n\r\n\t\t(api as any).manifest = manifest;\r\n\r\n\t\tif (api.processValues) {\r\n\t\t\treturn (\r\n\t\t\t\t(await api.processValues(incomingProperty, async (properties) => {\r\n\t\t\t\t\t// Transform the values:\r\n\t\t\t\t\tconst clonedValues = await Promise.all(\r\n\t\t\t\t\t\tproperties.map(async (value) => {\r\n\t\t\t\t\t\t\treturn (await this.#cloneProperty(value)) ?? value;\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\treturn clonedValues;\r\n\t\t\t\t})) ?? incomingProperty\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// the api did not provide a value processor, so we will return the incoming property:\r\n\t\treturn incomingProperty;\r\n\t}\r\n}\r\n","import type { UmbPropertyValueData, UmbPropertyValueDataPotentiallyWithEditorAlias } from '../index.js';\r\nimport type {\r\n\tManifestPropertyValuePreset,\r\n\tUmbPropertyTypePresetModel,\r\n\tUmbPropertyTypePresetWithSchemaAliasModel,\r\n\tUmbPropertyValuePreset,\r\n\tUmbPropertyValuePresetApiCallArgs,\r\n} from './types.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { createExtensionApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nconst EMPTY_CALL_ARGS = Object.freeze({});\r\n\r\nexport class UmbPropertyValuePresetBuilderController<\r\n\tReturnType = UmbPropertyValueData | UmbPropertyValueDataPotentiallyWithEditorAlias,\r\n> extends UmbControllerBase {\r\n\t/**\r\n\t * Clones the property data.\r\n\t * @param {UmbPropertyValueDataPotentiallyWithEditorAlias} propertyTypes - Data about the properties to make a preset for.\r\n\t * @returns {Promise<UmbPropertyValueDataPotentiallyWithEditorAlias>} - A promise that resolves to the cloned property data.\r\n\t */\r\n\tasync create<GivenPropertyTypesType extends UmbPropertyTypePresetModel>(\r\n\t\tpropertyTypes: Array<GivenPropertyTypesType>,\r\n\t): Promise<Array<ReturnType>> {\r\n\t\tconst result = await Promise.all(propertyTypes.map(this.#createPropertyPreset));\r\n\r\n\t\t//Merge all the values into a single array:\r\n\t\tconst values = result.flatMap((x) => x);\r\n\r\n\t\tthis.destroy();\r\n\r\n\t\treturn values;\r\n\t}\r\n\r\n\t#createPropertyPreset = async (\r\n\t\tpropertyType: UmbPropertyTypePresetModel | UmbPropertyTypePresetWithSchemaAliasModel,\r\n\t): Promise<Array<ReturnType>> => {\r\n\t\tconst editorAlias: string | undefined = (propertyType as UmbPropertyTypePresetWithSchemaAliasModel)\r\n\t\t\t.propertyEditorSchemaAlias;\r\n\r\n\t\tconst editorUiAlias = propertyType.propertyEditorUiAlias;\r\n\t\tif (!editorUiAlias) {\r\n\t\t\tthrow new Error(`propertyEditorUiAlias was not defined in ${propertyType}`);\r\n\t\t}\r\n\r\n\t\tlet filter: (x: ManifestPropertyValuePreset) => boolean;\r\n\t\tif (editorAlias && editorUiAlias) {\r\n\t\t\tfilter = (x) => x.forPropertyEditorSchemaAlias === editorAlias || x.forPropertyEditorUiAlias === editorUiAlias;\r\n\t\t} else {\r\n\t\t\tfilter = (x) => x.forPropertyEditorUiAlias === editorUiAlias;\r\n\t\t}\r\n\r\n\t\t// Find a preset for this editor alias:\r\n\t\tconst manifests = umbExtensionsRegistry.getByTypeAndFilter('propertyValuePreset', filter);\r\n\r\n\t\tconst apis = (\r\n\t\t\tawait Promise.all(\r\n\t\t\t\tmanifests.map((x) =>\r\n\t\t\t\t\tcreateExtensionApi(this, x).then((x) => {\r\n\t\t\t\t\t\tif (x) {\r\n\t\t\t\t\t\t\t(x as any).manifest = x;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn x;\r\n\t\t\t\t\t}),\r\n\t\t\t\t),\r\n\t\t\t)\r\n\t\t).filter((x) => x !== undefined) as Array<UmbPropertyValuePreset>;\r\n\r\n\t\tconst result = await this._generatePropertyValues(apis, propertyType);\r\n\r\n\t\tfor (const api of apis) {\r\n\t\t\tapi.destroy();\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\tprotected async _generatePropertyValues(\r\n\t\tapis: Array<UmbPropertyValuePreset>,\r\n\t\tpropertyType: UmbPropertyTypePresetModel | UmbPropertyTypePresetWithSchemaAliasModel,\r\n\t): Promise<Array<ReturnType>> {\r\n\t\tconst property = await this._generatePropertyValue(apis, propertyType, EMPTY_CALL_ARGS);\r\n\t\treturn property ? [property] : [];\r\n\t}\r\n\r\n\tprotected async _generatePropertyValue(\r\n\t\tapis: Array<UmbPropertyValuePreset>,\r\n\t\tpropertyType: UmbPropertyTypePresetModel | UmbPropertyTypePresetWithSchemaAliasModel,\r\n\t\tcallArgs: UmbPropertyValuePresetApiCallArgs,\r\n\t): Promise<ReturnType | undefined> {\r\n\t\tlet value: unknown = undefined;\r\n\t\t// Important to use a inline for loop, to secure that each entry is processed(asynchronously) in order\r\n\t\tfor (const api of apis) {\r\n\t\t\tif (!api.processValue) {\r\n\t\t\t\tthrow new Error(`'processValue()' method is not defined in the api: ${api.constructor.name}`);\r\n\t\t\t}\r\n\r\n\t\t\tvalue = await api.processValue(value, propertyType.config, propertyType.typeArgs, callArgs);\r\n\t\t}\r\n\r\n\t\tif (value === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ((propertyType as UmbPropertyTypePresetWithSchemaAliasModel).propertyEditorSchemaAlias) {\r\n\t\t\treturn {\r\n\t\t\t\teditorAlias: (propertyType as UmbPropertyTypePresetWithSchemaAliasModel).propertyEditorSchemaAlias,\r\n\t\t\t\talias: propertyType.alias,\r\n\t\t\t\tvalue,\r\n\t\t\t} satisfies UmbPropertyValueDataPotentiallyWithEditorAlias as ReturnType;\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\talias: propertyType.alias,\r\n\t\t\t\tvalue,\r\n\t\t\t} satisfies UmbPropertyValueData as ReturnType;\r\n\t\t}\r\n\t}\r\n}\r\n","import { UmbVariantId } from '../../variant/variant-id.class.js';\r\nimport { UmbPropertyValuePresetBuilderController } from './property-value-preset-builder.controller.js';\r\nimport type {\r\n\tUmbPropertyTypePresetModel,\r\n\tUmbPropertyTypePresetWithSchemaAliasModel,\r\n\tUmbPropertyValuePreset,\r\n} from './types.js';\r\nimport type { UmbElementValueModel } from '@umbraco-cms/backoffice/content';\r\n\r\ntype ReturnType = UmbElementValueModel;\r\n\r\nexport class UmbPropertyValuePresetVariantBuilderController extends UmbPropertyValuePresetBuilderController<ReturnType> {\r\n\t#cultures: Array<null | string> = [];\r\n\t// Always declare the default segment (null)\r\n\t#segments: Array<null | string> = [null];\r\n\r\n\tsetCultures(cultures: Array<string>): void {\r\n\t\tthis.#cultures = cultures;\r\n\t}\r\n\tsetSegments(segments: Array<string>): void {\r\n\t\t// No matter how many segments are present, always include the default segment (null)\r\n\t\tthis.#segments = [null, ...segments];\r\n\t}\r\n\r\n\tprotected override async _generatePropertyValues(\r\n\t\tapis: Array<UmbPropertyValuePreset>,\r\n\t\tpropertyType: UmbPropertyTypePresetModel | UmbPropertyTypePresetWithSchemaAliasModel,\r\n\t): Promise<Array<ReturnType>> {\r\n\t\tconst values: Array<ReturnType> = [];\r\n\r\n\t\tif (propertyType.typeArgs.variesBySegment && propertyType.typeArgs.variesByCulture) {\r\n\t\t\tif (this.#cultures.length === 0) {\r\n\t\t\t\tthrow new Error('Cultures must be set when varying by culture.');\r\n\t\t\t}\r\n\r\n\t\t\tfor (const culture of this.#cultures) {\r\n\t\t\t\tfor (const segment of this.#segments) {\r\n\t\t\t\t\tconst value = await this._generatePropertyValue(apis, propertyType, {\r\n\t\t\t\t\t\tvariantId: new UmbVariantId(culture, segment),\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (value) {\r\n\t\t\t\t\t\tvalue.culture = culture;\r\n\t\t\t\t\t\tvalue.segment = segment;\r\n\t\t\t\t\t\tvalues.push(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (propertyType.typeArgs.variesByCulture) {\r\n\t\t\tif (this.#cultures.length === 0) {\r\n\t\t\t\tthrow new Error('Cultures must be set when varying by culture.');\r\n\t\t\t}\r\n\r\n\t\t\tfor (const culture of this.#cultures) {\r\n\t\t\t\tconst value = await this._generatePropertyValue(apis, propertyType, {\r\n\t\t\t\t\tvariantId: new UmbVariantId(culture),\r\n\t\t\t\t});\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tvalue.culture = culture;\r\n\t\t\t\t\tvalue.segment = null;\r\n\t\t\t\t\tvalues.push(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (propertyType.typeArgs.variesBySegment) {\r\n\t\t\tfor (const segment of this.#segments) {\r\n\t\t\t\tconst value = await this._generatePropertyValue(apis, propertyType, {\r\n\t\t\t\t\tvariantId: new UmbVariantId(null, segment),\r\n\t\t\t\t});\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\t// Be aware this maybe should have been the default culture?\r\n\t\t\t\t\tvalue.culture = null;\r\n\t\t\t\t\tvalue.segment = segment;\r\n\t\t\t\t\tvalues.push(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst value = await this._generatePropertyValue(apis, propertyType, {});\r\n\t\t\tif (value) {\r\n\t\t\t\t// Be aware this maybe should have been the default culture?\r\n\t\t\t\tvalue.culture = null;\r\n\t\t\t\tvalue.segment = null;\r\n\t\t\t\tvalues.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn values;\r\n\t}\r\n}\r\n"],"names":["UMB_UNSUPPORTED_EDITOR_SCHEMA_ALIASES","findRule","rule","propertyType","UmbPropertyGuardManager","UmbGuardManagerBase","rules","#resolvePermission","x","variantId","datasetVariantId","UmbVariantPropertyGuardManager","UmbPropertyValueCloneController","UmbControllerBase","property","result","#cloneProperty","clonedProperty","#cloneValue","#cloneInnerValues","incomingProperty","editorAlias","manifest","umbExtensionsRegistry","api","createExtensionApi","clonedValue","properties","value","EMPTY_CALL_ARGS","UmbPropertyValuePresetBuilderController","propertyTypes","values","#createPropertyPreset","editorUiAlias","filter","manifests","apis","callArgs","UmbPropertyValuePresetVariantBuilderController","#cultures","#segments","cultures","segments","culture","segment","UmbVariantId"],"mappings":"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"}