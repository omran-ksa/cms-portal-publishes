{"version":3,"file":"index.js","sources":["../../../../src/packages/core/menu/menu-structure-workspace-context.context-token.ts","../../../../src/packages/core/menu/menu-tree-structure-workspace-context-base.ts","../../../../src/packages/core/menu/menu-variant-structure-workspace-context.context-token.ts","../../../../src/packages/core/menu/menu-variant-tree-structure-workspace-context-base.ts"],"sourcesContent":["import type { UmbMenuStructureWorkspaceContext } from './menu-structure-workspace-context.interface.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_MENU_STRUCTURE_WORKSPACE_CONTEXT = new UmbContextToken<UmbMenuStructureWorkspaceContext>(\r\n\t'UmbWorkspaceContext',\r\n\t'UmbMenuStructure',\r\n);\r\n","import type { UmbStructureItemModel } from './types.js';\r\nimport { UMB_MENU_STRUCTURE_WORKSPACE_CONTEXT } from './menu-structure-workspace-context.context-token.js';\r\nimport type { UmbTreeRepository, UmbTreeItemModel, UmbTreeRootModel } from '@umbraco-cms/backoffice/tree';\r\nimport { createExtensionApiByAlias } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_SUBMITTABLE_TREE_ENTITY_WORKSPACE_CONTEXT } from '@umbraco-cms/backoffice/workspace';\r\nimport { UmbArrayState, UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbAncestorsEntityContext, UmbParentEntityContext, type UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\n\r\ninterface UmbMenuTreeStructureWorkspaceContextBaseArgs {\r\n\ttreeRepositoryAlias: string;\r\n}\r\n\r\n// TODO: introduce base class for all menu structure workspaces to handle ancestors and parent\r\nexport abstract class UmbMenuTreeStructureWorkspaceContextBase extends UmbContextBase {\r\n\t#workspaceContext?: typeof UMB_SUBMITTABLE_TREE_ENTITY_WORKSPACE_CONTEXT.TYPE;\r\n\t#args: UmbMenuTreeStructureWorkspaceContextBaseArgs;\r\n\r\n\t#structure = new UmbArrayState<UmbStructureItemModel>([], (x) => x.unique);\r\n\tpublic readonly structure = this.#structure.asObservable();\r\n\r\n\t#parent = new UmbObjectState<UmbStructureItemModel | undefined>(undefined);\r\n\t/**\r\n\t * @deprecated Will be removed in v.18: Use UMB_PARENT_ENTITY_CONTEXT instead.\r\n\t */\r\n\tpublic readonly parent = this.#parent.asObservable();\r\n\r\n\t#parentContext = new UmbParentEntityContext(this);\r\n\t#ancestorContext = new UmbAncestorsEntityContext(this);\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbMenuTreeStructureWorkspaceContextBaseArgs) {\r\n\t\tsuper(host, UMB_MENU_STRUCTURE_WORKSPACE_CONTEXT);\r\n\t\t// 'UmbMenuStructureWorkspaceContext' is Obsolete, will be removed in v.18\r\n\t\tthis.provideContext('UmbMenuStructureWorkspaceContext', this);\r\n\t\tthis.#args = args;\r\n\r\n\t\tthis.consumeContext(UMB_SUBMITTABLE_TREE_ENTITY_WORKSPACE_CONTEXT, (instance) => {\r\n\t\t\tthis.#workspaceContext = instance;\r\n\t\t\tthis.observe(this.#workspaceContext?.unique, (value) => {\r\n\t\t\t\tif (!value) return;\r\n\t\t\t\tthis.#requestStructure();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync #requestStructure() {\r\n\t\tlet structureItems: Array<UmbStructureItemModel> = [];\r\n\r\n\t\tconst treeRepository = await createExtensionApiByAlias<UmbTreeRepository<UmbTreeItemModel, UmbTreeRootModel>>(\r\n\t\t\tthis,\r\n\t\t\tthis.#args.treeRepositoryAlias,\r\n\t\t);\r\n\r\n\t\tconst { data: root } = await treeRepository.requestTreeRoot();\r\n\r\n\t\tif (root) {\r\n\t\t\tstructureItems = [\r\n\t\t\t\t{\r\n\t\t\t\t\tunique: root.unique,\r\n\t\t\t\t\tentityType: root.entityType,\r\n\t\t\t\t\tname: root.name,\r\n\t\t\t\t\tisFolder: root.isFolder,\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tconst isNew = this.#workspaceContext?.getIsNew();\r\n\r\n\t\tconst entityTypeObservable = isNew\r\n\t\t\t? this.#workspaceContext?._internal_createUnderParentEntityType\r\n\t\t\t: this.#workspaceContext?.entityType;\r\n\t\tconst entityType = (await this.observe(entityTypeObservable, () => {})?.asPromise()) as string;\r\n\t\tif (!entityType) throw new Error('Entity type is not available');\r\n\r\n\t\t// If the entity type is different from the root entity type, then we can request the ancestors.\r\n\t\tif (entityType !== root?.entityType) {\r\n\t\t\tconst uniqueObservable = isNew\r\n\t\t\t\t? this.#workspaceContext?._internal_createUnderParentEntityUnique\r\n\t\t\t\t: this.#workspaceContext?.unique;\r\n\t\t\tconst unique = (await this.observe(uniqueObservable, () => {})?.asPromise()) as string;\r\n\t\t\tif (!unique) throw new Error('Unique is not available');\r\n\r\n\t\t\tconst { data } = await treeRepository.requestTreeItemAncestors({ treeItem: { unique, entityType } });\r\n\r\n\t\t\tif (data) {\r\n\t\t\t\tconst ancestorItems = data.map((treeItem) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tunique: treeItem.unique,\r\n\t\t\t\t\t\tentityType: treeItem.entityType,\r\n\t\t\t\t\t\tname: treeItem.name,\r\n\t\t\t\t\t\tisFolder: treeItem.isFolder,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tstructureItems.push(...ancestorItems);\r\n\r\n\t\t\t\tthis.#structure.setValue(structureItems);\r\n\t\t\t\tthis.#setParentData(structureItems);\r\n\t\t\t\tthis.#setAncestorData(data);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#setParentData(structureItems: Array<UmbStructureItemModel>) {\r\n\t\t/* If the item is not new, the current item is the last item in the array. \r\n\t\t\tWe filter out the current item unique to handle any case where it could show up */\r\n\t\tconst parent = structureItems.filter((item) => item.unique !== this.#workspaceContext?.getUnique()).pop();\r\n\r\n\t\t// TODO: remove this when the parent gets removed from the structure interface\r\n\t\tthis.#parent.setValue(parent);\r\n\r\n\t\tconst parentEntity = parent\r\n\t\t\t? {\r\n\t\t\t\t\tunique: parent.unique,\r\n\t\t\t\t\tentityType: parent.entityType,\r\n\t\t\t\t}\r\n\t\t\t: undefined;\r\n\r\n\t\tthis.#parentContext.setParent(parentEntity);\r\n\t}\r\n\r\n\t/* Notice: ancestors are based on the server \"data\" ancestors and are not based on the full Menu (UI) structure.\r\n\t\tThis will mean that any item placed in the data root will not have any ancestors. But will have a parent based on the UI structure.\r\n\t*/\r\n\t#setAncestorData(ancestors: Array<UmbTreeItemModel>) {\r\n\t\tconst ancestorEntities = ancestors\r\n\t\t\t.map((treeItem) => {\r\n\t\t\t\tconst entity: UmbEntityModel = {\r\n\t\t\t\t\tunique: treeItem.unique,\r\n\t\t\t\t\tentityType: treeItem.entityType,\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn entity;\r\n\t\t\t})\r\n\t\t\t/* If the item is not new, the current item is the last item in the array. \r\n\t\t\t\tWe filter out the current item unique to handle any case where it could show up */\r\n\t\t\t.filter((item) => item.unique !== this.#workspaceContext?.getUnique());\r\n\r\n\t\tthis.#ancestorContext.setAncestors(ancestorEntities);\r\n\t}\r\n}\r\n","import type { UmbMenuVariantStructureWorkspaceContext } from './menu-variant-structure-workspace-context.interface.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_MENU_VARIANT_STRUCTURE_WORKSPACE_CONTEXT =\r\n\tnew UmbContextToken<UmbMenuVariantStructureWorkspaceContext>(\r\n\t\t'UmbWorkspaceContext',\r\n\t\t'UmbMenuStructure',\r\n\t\t(context): context is UmbMenuVariantStructureWorkspaceContext =>\r\n\t\t\t'IS_MENU_VARIANT_STRUCTURE_WORKSPACE_CONTEXT' in context,\r\n\t);\r\n","import type { UmbVariantStructureItemModel } from './types.js';\r\nimport { UMB_MENU_VARIANT_STRUCTURE_WORKSPACE_CONTEXT } from './menu-variant-structure-workspace-context.context-token.js';\r\nimport type { UmbTreeItemModel, UmbTreeRepository, UmbTreeRootModel } from '@umbraco-cms/backoffice/tree';\r\nimport { createExtensionApiByAlias } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbArrayState, UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbAncestorsEntityContext, UmbParentEntityContext, type UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\nimport { UMB_SUBMITTABLE_TREE_ENTITY_WORKSPACE_CONTEXT } from '@umbraco-cms/backoffice/workspace';\r\n\r\ninterface UmbMenuVariantTreeStructureWorkspaceContextBaseArgs {\r\n\ttreeRepositoryAlias: string;\r\n}\r\n\r\n// TODO: introduce base class for all menu structure workspaces to handle ancestors and parent\r\nexport abstract class UmbMenuVariantTreeStructureWorkspaceContextBase extends UmbContextBase {\r\n\t//\r\n\t#workspaceContext?: typeof UMB_SUBMITTABLE_TREE_ENTITY_WORKSPACE_CONTEXT.TYPE;\r\n\t#args: UmbMenuVariantTreeStructureWorkspaceContextBaseArgs;\r\n\r\n\t#structure = new UmbArrayState<UmbVariantStructureItemModel>([], (x) => x.unique);\r\n\tpublic readonly structure = this.#structure.asObservable();\r\n\r\n\t#parent = new UmbObjectState<UmbVariantStructureItemModel | undefined>(undefined);\r\n\t/**\r\n\t * @deprecated Will be removed in v.18: Use UMB_PARENT_ENTITY_CONTEXT instead.\r\n\t */\r\n\tpublic readonly parent = this.#parent.asObservable();\r\n\r\n\t#parentContext = new UmbParentEntityContext(this);\r\n\t#ancestorContext = new UmbAncestorsEntityContext(this);\r\n\r\n\tpublic readonly IS_MENU_VARIANT_STRUCTURE_WORKSPACE_CONTEXT = true;\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbMenuVariantTreeStructureWorkspaceContextBaseArgs) {\r\n\t\tsuper(host, UMB_MENU_VARIANT_STRUCTURE_WORKSPACE_CONTEXT);\r\n\t\t// 'UmbMenuStructureWorkspaceContext' is Obsolete, will be removed in v.18\r\n\t\tthis.provideContext('UmbMenuStructureWorkspaceContext', this);\r\n\t\tthis.#args = args;\r\n\r\n\t\tthis.consumeContext(UMB_SUBMITTABLE_TREE_ENTITY_WORKSPACE_CONTEXT, (instance) => {\r\n\t\t\tthis.#workspaceContext = instance;\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#workspaceContext?.unique,\r\n\t\t\t\t(value) => {\r\n\t\t\t\t\tif (!value) return;\r\n\t\t\t\t\tthis.#requestStructure();\r\n\t\t\t\t},\r\n\t\t\t\t'observeUnique',\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tasync #requestStructure() {\r\n\t\tconst isNew = this.#workspaceContext?.getIsNew();\r\n\t\tconst uniqueObservable = isNew\r\n\t\t\t? this.#workspaceContext?._internal_createUnderParentEntityUnique\r\n\t\t\t: this.#workspaceContext?.unique;\r\n\t\tconst entityTypeObservable = isNew\r\n\t\t\t? this.#workspaceContext?._internal_createUnderParentEntityType\r\n\t\t\t: this.#workspaceContext?.entityType;\r\n\r\n\t\tlet structureItems: Array<UmbVariantStructureItemModel> = [];\r\n\r\n\t\tconst unique = (await this.observe(uniqueObservable, () => {})?.asPromise()) as string;\r\n\t\tif (unique === undefined) throw new Error('Unique is not available');\r\n\r\n\t\tconst entityType = (await this.observe(entityTypeObservable, () => {})?.asPromise()) as string;\r\n\t\tif (!entityType) throw new Error('Entity type is not available');\r\n\r\n\t\t// TODO: introduce variant tree item model\r\n\t\tconst treeRepository = await createExtensionApiByAlias<UmbTreeRepository<any, UmbTreeRootModel>>(\r\n\t\t\tthis,\r\n\t\t\tthis.#args.treeRepositoryAlias,\r\n\t\t);\r\n\r\n\t\tconst { data: root } = await treeRepository.requestTreeRoot();\r\n\r\n\t\tif (root) {\r\n\t\t\tstructureItems = [\r\n\t\t\t\t{\r\n\t\t\t\t\tunique: root.unique,\r\n\t\t\t\t\tentityType: root.entityType,\r\n\t\t\t\t\tvariants: [{ name: root.name, culture: null, segment: null }],\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tconst { data } = await treeRepository.requestTreeItemAncestors({ treeItem: { unique, entityType } });\r\n\r\n\t\tif (data) {\r\n\t\t\tconst treeItemAncestors = data.map((treeItem) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tunique: treeItem.unique,\r\n\t\t\t\t\tentityType: treeItem.entityType,\r\n\t\t\t\t\tvariants: treeItem.variants.map((variant: any) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\t\t\tculture: variant.culture,\r\n\t\t\t\t\t\t\tsegment: variant.segment,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}),\r\n\t\t\t\t};\r\n\t\t\t});\r\n\r\n\t\t\tstructureItems.push(...treeItemAncestors);\r\n\r\n\t\t\tthis.#structure.setValue(structureItems);\r\n\t\t\tthis.#setParentData(structureItems);\r\n\t\t\tthis.#setAncestorData(data);\r\n\t\t}\r\n\t}\r\n\r\n\t#setParentData(structureItems: Array<UmbVariantStructureItemModel>) {\r\n\t\t/* If the item is not new, the current item is the last item in the array.\r\n\t\t\tWe filter out the current item unique to handle any case where it could show up */\r\n\t\tconst parent = structureItems.filter((item) => item.unique !== this.#workspaceContext?.getUnique()).pop();\r\n\r\n\t\t// TODO: remove this when the parent gets removed from the structure interface\r\n\t\tthis.#parent.setValue(parent);\r\n\r\n\t\tconst parentEntity = parent\r\n\t\t\t? {\r\n\t\t\t\t\tunique: parent.unique,\r\n\t\t\t\t\tentityType: parent.entityType,\r\n\t\t\t\t}\r\n\t\t\t: undefined;\r\n\r\n\t\tthis.#parentContext.setParent(parentEntity);\r\n\t}\r\n\r\n\t/* Notice: ancestors are based on the server \"data\" ancestors and are not based on the full Menu (UI) structure.\r\n\t\tThis will mean that any item placed in the data root will not have any ancestors. But will have a parent based on the UI structure.\r\n\t*/\r\n\t#setAncestorData(ancestors: Array<UmbTreeItemModel>) {\r\n\t\tconst ancestorEntities = ancestors\r\n\t\t\t.map((treeItem) => {\r\n\t\t\t\tconst entity: UmbEntityModel = {\r\n\t\t\t\t\tunique: treeItem.unique,\r\n\t\t\t\t\tentityType: treeItem.entityType,\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn entity;\r\n\t\t\t})\r\n\t\t\t/* If the item is not new, the current item is the last item in the array.\r\n\t\t\tWe filter out the current item unique to handle any case where it could show up */\r\n\t\t\t.filter((item) => item.unique !== this.#workspaceContext?.getUnique());\r\n\r\n\t\tthis.#ancestorContext.setAncestors(ancestorEntities);\r\n\t}\r\n}\r\n"],"names":["UMB_MENU_STRUCTURE_WORKSPACE_CONTEXT","UmbContextToken","UmbMenuTreeStructureWorkspaceContextBase","UmbContextBase","host","args","#structure","UmbArrayState","x","#parent","UmbObjectState","#parentContext","UmbParentEntityContext","#ancestorContext","UmbAncestorsEntityContext","#args","UMB_SUBMITTABLE_TREE_ENTITY_WORKSPACE_CONTEXT","instance","#workspaceContext","value","#requestStructure","structureItems","treeRepository","createExtensionApiByAlias","root","isNew","entityTypeObservable","entityType","uniqueObservable","unique","data","ancestorItems","treeItem","#setParentData","#setAncestorData","parent","item","parentEntity","ancestors","ancestorEntities","UMB_MENU_VARIANT_STRUCTURE_WORKSPACE_CONTEXT","context","UmbMenuVariantTreeStructureWorkspaceContextBase","treeItemAncestors","variant"],"mappings":"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"}