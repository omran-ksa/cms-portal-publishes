{"version":3,"file":"index.js","sources":["../../../../src/packages/core/repository/data-mapper/management-api/constants.ts","../../../../src/packages/core/repository/data-mapper/mapping/data-mapping-resolver.ts","../../../../src/packages/core/repository/data-mapper/data-mapper.ts","../../../../src/packages/core/repository/data-mapper/management-api/management-api-data-mapper.ts","../../../../src/packages/core/repository/repository-base.ts","../../../../src/packages/core/repository/detail/detail-repository-base.ts","../../../../src/packages/core/repository/item/item-repository-base.ts","../../../../src/packages/core/repository/item/item-server-data-source-base.ts","../../../../src/packages/core/repository/repository-details.manager.ts","../../../../src/packages/core/repository/repository-items.manager.ts"],"sourcesContent":["export const UMB_MANAGEMENT_API_DATA_SOURCE_ALIAS = 'Umb.ManagementApi';\r\n","import type { UmbDataSourceDataMapping } from './types.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { createExtensionApi, type ManifestBase } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class UmbDataSourceDataMappingResolver extends UmbControllerBase {\r\n\t#apiCache = new Map<string, UmbDataSourceDataMapping>();\r\n\r\n\tasync resolve(forDataSource: string, forDataModel: string): Promise<UmbDataSourceDataMapping | undefined> {\r\n\t\tif (!forDataSource) {\r\n\t\t\tthrow new Error('data source identifier is required');\r\n\t\t}\r\n\r\n\t\tif (!forDataModel) {\r\n\t\t\tthrow new Error('data identifier is required');\r\n\t\t}\r\n\r\n\t\tconst manifest = this.#getManifestWithBestFit(forDataSource, forDataModel);\r\n\r\n\t\tif (!manifest) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\t// Check the cache before creating a new instance\r\n\t\tif (this.#apiCache.has(manifest.alias)) {\r\n\t\t\treturn this.#apiCache.get(manifest.alias)!;\r\n\t\t}\r\n\r\n\t\tconst dataMapping = await createExtensionApi<UmbDataSourceDataMapping>(this, manifest);\r\n\r\n\t\tif (!dataMapping) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tif (!dataMapping.map) {\r\n\t\t\tthrow new Error('Data Mapping does not have a map method.');\r\n\t\t}\r\n\r\n\t\t// Cache the api instance for future use\r\n\t\tthis.#apiCache.set(manifest.alias, dataMapping);\r\n\r\n\t\treturn dataMapping;\r\n\t}\r\n\r\n\t#getManifestWithBestFit(forDataSource: string, forDataModel: string) {\r\n\t\tconst supportedManifests = this.#getSupportedManifests(forDataSource, forDataModel);\r\n\r\n\t\tif (!supportedManifests.length) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\t// Pick the manifest with the highest priority\r\n\t\t// TODO: This should have been handled in the extension registry, but until then we do it here: [NL]\r\n\t\treturn supportedManifests.sort((a: ManifestBase, b: ManifestBase): number => (b.weight || 0) - (a.weight || 0))[0];\r\n\t}\r\n\r\n\t#getSupportedManifests(forDataSource: string, forDataModel: string) {\r\n\t\tconst supportedManifests = umbExtensionsRegistry.getByTypeAndFilter('dataSourceDataMapping', (manifest) => {\r\n\t\t\treturn manifest.forDataSource === forDataSource && manifest.forDataModel === forDataModel;\r\n\t\t});\r\n\r\n\t\treturn supportedManifests;\r\n\t}\r\n}\r\n","import { UmbDataSourceDataMappingResolver } from './mapping/data-mapping-resolver.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\n\r\nexport interface UmbDataSourceDataMapperMapArgs<fromModelType = unknown, toModelType = unknown> {\r\n\tforDataModel: string;\r\n\tforDataSource: string;\r\n\tdata: fromModelType;\r\n\tfallback?: (data: fromModelType) => Promise<toModelType>;\r\n}\r\n\r\nexport class UmbDataSourceDataMapper<fromModelType = unknown, toModelType = unknown> extends UmbControllerBase {\r\n\t#dataMappingResolver = new UmbDataSourceDataMappingResolver(this);\r\n\r\n\tasync map(args: UmbDataSourceDataMapperMapArgs<fromModelType, toModelType>) {\r\n\t\tif (!args.forDataSource) {\r\n\t\t\tconst message = 'data source identifier is required';\r\n\t\t\tconsole.error(message);\r\n\t\t\tthrow new Error(message);\r\n\t\t}\r\n\r\n\t\tif (!args.data) {\r\n\t\t\tconst message = 'data is required';\r\n\t\t\tconsole.error(message);\r\n\t\t\tthrow new Error(message);\r\n\t\t}\r\n\r\n\t\tif (!args.forDataModel && !args.fallback) {\r\n\t\t\tconst message = 'forDataModel is missing and no fallback provided.';\r\n\t\t\tconsole.error(message);\r\n\t\t\tthrow new Error(message);\r\n\t\t}\r\n\r\n\t\tif (!args.forDataModel && args.fallback) {\r\n\t\t\treturn args.fallback(args.data);\r\n\t\t}\r\n\r\n\t\tconst dataMapping = await this.#dataMappingResolver.resolve(args.forDataSource, args.forDataModel);\r\n\r\n\t\tif (!dataMapping && !args.fallback) {\r\n\t\t\tconst message = 'Data mapping not found and no fallback provided.';\r\n\t\t\tconsole.error(message);\r\n\t\t\tthrow new Error(message);\r\n\t\t}\r\n\r\n\t\tif (!dataMapping && args.fallback) {\r\n\t\t\treturn args.fallback(args.data);\r\n\t\t}\r\n\r\n\t\tif (!dataMapping?.map) {\r\n\t\t\tconst message = 'Data mapping does not have a map method.';\r\n\t\t\tconsole.error(message);\r\n\t\t\tthrow new Error(message);\r\n\t\t}\r\n\r\n\t\treturn dataMapping.map(args.data);\r\n\t}\r\n}\r\n","import { UmbDataSourceDataMapper, type UmbDataSourceDataMapperMapArgs } from '../data-mapper.js';\r\nimport { UMB_MANAGEMENT_API_DATA_SOURCE_ALIAS } from './constants.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbManagementApiDataMapper extends UmbControllerBase {\r\n\t#dataMapper = new UmbDataSourceDataMapper(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t}\r\n\r\n\tmap(args: Omit<UmbDataSourceDataMapperMapArgs, 'forDataSource'>) {\r\n\t\treturn this.#dataMapper.map({\r\n\t\t\t...args,\r\n\t\t\tforDataSource: UMB_MANAGEMENT_API_DATA_SOURCE_ALIAS,\r\n\t\t});\r\n\t}\r\n}\r\n","import { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\n\r\nexport abstract class UmbRepositoryBase extends UmbControllerBase {}\r\n","import { UmbRepositoryBase } from '../repository-base.js';\r\nimport type { UmbRepositoryResponse, UmbRepositoryResponseWithAsObservable } from '../types.js';\r\nimport type { UmbDetailDataSource, UmbDetailDataSourceConstructor } from './detail-data-source.interface.js';\r\nimport type { UmbDetailRepository } from './detail-repository.interface.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport type { UmbDetailStore } from '@umbraco-cms/backoffice/store';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport type { UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\nimport type { UmbDeepPartialObject } from '@umbraco-cms/backoffice/utils';\r\n\r\nexport abstract class UmbDetailRepositoryBase<\r\n\t\tDetailModelType extends UmbEntityModel,\r\n\t\tUmbDetailDataSourceType extends UmbDetailDataSource<DetailModelType> = UmbDetailDataSource<DetailModelType>,\r\n\t>\r\n\textends UmbRepositoryBase\r\n\timplements UmbDetailRepository<DetailModelType>, UmbApi\r\n{\r\n\t#init: Promise<unknown>;\r\n\r\n\t#detailStore?: UmbDetailStore<DetailModelType>;\r\n\tprotected detailDataSource: UmbDetailDataSourceType;\r\n\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\tdetailSource: UmbDetailDataSourceConstructor<DetailModelType>,\r\n\t\tdetailStoreContextAlias: string | UmbContextToken<any, any>,\r\n\t) {\r\n\t\tsuper(host);\r\n\r\n\t\tif (!detailSource) throw new Error('Detail source is missing');\r\n\t\tif (!detailStoreContextAlias) throw new Error('Detail store context alias is missing');\r\n\r\n\t\tthis.detailDataSource = new detailSource(host) as UmbDetailDataSourceType;\r\n\r\n\t\t// TODO: ideally no preventTimeouts here.. [NL]\r\n\t\tthis.#init = this.consumeContext(detailStoreContextAlias, (instance) => {\r\n\t\t\tthis.#detailStore = instance;\r\n\t\t})\r\n\t\t\t.asPromise({ preventTimeout: true })\r\n\t\t\t// Ignore the error, we can assume that the flow was stopped (asPromise failed), but it does not mean that the consumption was not successful.\r\n\t\t\t.catch(() => undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a scaffold\r\n\t * @param {UmbDeepPartialObject<DetailModelType>} [preset]\r\n\t * @returns {*}\r\n\t * @memberof UmbDetailRepositoryBase\r\n\t */\r\n\tasync createScaffold(\r\n\t\tpreset?: UmbDeepPartialObject<DetailModelType>,\r\n\t): Promise<UmbRepositoryResponse<DetailModelType>> {\r\n\t\treturn this.detailDataSource.createScaffold(preset);\r\n\t}\r\n\r\n\t/**\r\n\t * Requests the detail for the given unique\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDetailRepositoryBase\r\n\t */\r\n\tasync requestByUnique(unique: string): Promise<UmbRepositoryResponseWithAsObservable<DetailModelType | undefined>> {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\t\tawait this.#init;\r\n\r\n\t\tconst { data, error } = await this.detailDataSource.read(unique);\r\n\r\n\t\tif (data) {\r\n\t\t\tthis.#detailStore?.append(data);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tdata,\r\n\t\t\terror,\r\n\t\t\tasObservable: () => this.#detailStore?.byUnique(unique),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with an observable of the detail for the given unique\r\n\t * @param {DetailModelType} model\r\n\t * @param {string | null} [parentUnique]\r\n\t * @returns {*}\r\n\t * @memberof UmbDetailRepositoryBase\r\n\t */\r\n\tasync create(model: DetailModelType, parentUnique: string | null): Promise<UmbRepositoryResponse<DetailModelType>> {\r\n\t\tif (!model) throw new Error('Data is missing');\r\n\t\tawait this.#init;\r\n\r\n\t\tconst { data: createdData, error } = await this.detailDataSource.create(model, parentUnique);\r\n\r\n\t\tif (createdData) {\r\n\t\t\tthis.#detailStore?.append(createdData);\r\n\t\t}\r\n\r\n\t\treturn { data: createdData, error };\r\n\t}\r\n\r\n\t/**\r\n\t * Saves the given data\r\n\t * @param {DetailModelType} model\r\n\t * @returns {*}\r\n\t * @memberof UmbDetailRepositoryBase\r\n\t */\r\n\tasync save(model: DetailModelType) {\r\n\t\tif (!model) throw new Error('Data is missing');\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\t\tawait this.#init;\r\n\r\n\t\tconst { data: updatedData, error } = await this.detailDataSource.update(model);\r\n\r\n\t\tif (updatedData) {\r\n\t\t\tthis.#detailStore?.updateItem(model.unique, updatedData);\r\n\t\t}\r\n\r\n\t\treturn { data: updatedData, error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the detail for the given unique\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDetailRepositoryBase\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\t\tawait this.#init;\r\n\r\n\t\tconst { error } = await this.detailDataSource.delete(unique);\r\n\r\n\t\tif (!error) {\r\n\t\t\tthis.#detailStore?.removeItem(unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with an observable of the detail for the given unique\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDetailRepositoryBase\r\n\t */\r\n\tasync byUnique(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\t\tawait this.#init;\r\n\t\treturn this.#detailStore!.byUnique(unique);\r\n\t}\r\n\r\n\toverride destroy(): void {\r\n\t\tthis.#detailStore = undefined;\r\n\t\t(this.detailDataSource as unknown) = undefined;\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n","import { UmbRepositoryBase } from '../repository-base.js';\r\nimport type { UmbItemDataSource, UmbItemDataSourceConstructor } from './item-data-source.interface.js';\r\nimport type { UmbItemRepository } from './item-repository.interface.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbItemStore } from '@umbraco-cms/backoffice/store';\r\nimport type { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport { of } from '@umbraco-cms/backoffice/external/rxjs';\r\n\r\nexport class UmbItemRepositoryBase<ItemType extends { unique: string }>\r\n\textends UmbRepositoryBase\r\n\timplements UmbItemRepository<ItemType>\r\n{\r\n\tprotected _init: Promise<unknown>;\r\n\tprotected _itemStore?: UmbItemStore<ItemType>;\r\n\t#itemSource: UmbItemDataSource<ItemType>;\r\n\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\titemSource: UmbItemDataSourceConstructor<ItemType>,\r\n\t\titemStoreContextAlias: string | UmbContextToken<any, any>,\r\n\t) {\r\n\t\tsuper(host);\r\n\t\tthis.#itemSource = new itemSource(host);\r\n\r\n\t\tthis._init = this.consumeContext(itemStoreContextAlias, (instance) => {\r\n\t\t\tthis._itemStore = instance;\r\n\t\t})\r\n\t\t\t.asPromise({ preventTimeout: true })\r\n\t\t\t// Ignore the error, we can assume that the flow was stopped (asPromise failed), but it does not mean that the consumption was not successful.\r\n\t\t\t.catch(() => undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * Requests the items for the given uniques\r\n\t * @param {Array<string>} uniques\r\n\t * @returns {*}\r\n\t * @memberof UmbItemRepositoryBase\r\n\t */\r\n\tasync requestItems(uniques: Array<string>) {\r\n\t\tif (!uniques) throw new Error('Uniques are missing');\r\n\t\ttry {\r\n\t\t\tawait this._init;\r\n\t\t} catch {\r\n\t\t\treturn {\r\n\t\t\t\tasObservable: () => undefined,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst { data, error } = await this.#itemSource.getItems(uniques);\r\n\r\n\t\tif (data) {\r\n\t\t\tthis._itemStore?.appendItems(data);\r\n\t\t}\r\n\r\n\t\treturn { data, error, asObservable: () => this._itemStore?.items(uniques) };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with an observable of the items for the given uniques\r\n\t * @param {Array<string>} uniques\r\n\t * @returns {*}\r\n\t * @memberof UmbItemRepositoryBase\r\n\t */\r\n\tasync items(uniques: Array<string>) {\r\n\t\ttry {\r\n\t\t\tawait this._init;\r\n\t\t} catch {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tif (!this._itemStore) {\r\n\t\t\t// If store is gone, then we are most likely in a disassembled state.\r\n\t\t\treturn of([]);\r\n\t\t}\r\n\r\n\t\treturn this._itemStore.items(uniques);\r\n\t}\r\n}\r\n","import { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbDataSourceResponse } from '../data-source-response.interface.js';\r\nimport type { UmbItemDataSource } from './item-data-source.interface.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\nexport interface UmbItemServerDataSourceBaseArgs<ServerItemType, ClientItemType extends { unique: string }> {\r\n\tgetItems?: (uniques: Array<string>) => Promise<UmbDataSourceResponse<Array<ServerItemType>>>;\r\n\tmapper: (item: ServerItemType) => ClientItemType;\r\n}\r\n\r\n/**\r\n * A data source base for items that fetches items from the server\r\n * @class UmbItemServerDataSourceBase\r\n * @implements {DocumentTreeDataSource}\r\n */\r\nexport abstract class UmbItemServerDataSourceBase<ServerItemType, ClientItemType extends { unique: string }>\r\n\textends UmbControllerBase\r\n\timplements UmbItemDataSource<ClientItemType>\r\n{\r\n\t#getItems?: (uniques: Array<string>) => Promise<UmbDataSourceResponse<Array<ServerItemType>>>;\r\n\t#mapper: (item: ServerItemType) => ClientItemType;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbItemServerDataSourceBase.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @param args\r\n\t * @memberof UmbItemServerDataSourceBase\r\n\t */\r\n\tconstructor(host: UmbControllerHost, args: UmbItemServerDataSourceBaseArgs<ServerItemType, ClientItemType>) {\r\n\t\tsuper(host);\r\n\t\tthis.#getItems = args.getItems;\r\n\t\tthis.#mapper = args.mapper;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches the items for the given uniques from the server\r\n\t * @param {Array<string>} uniques\r\n\t * @returns {*}\r\n\t * @memberof UmbItemServerDataSourceBase\r\n\t */\r\n\tasync getItems(uniques: Array<string>) {\r\n\t\tif (!this.#getItems) throw new Error('getItems is not implemented');\r\n\t\tif (!uniques) throw new Error('Uniques are missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(this, this.#getItems(uniques));\r\n\r\n\t\treturn { data: this._getMappedItems(data), error };\r\n\t}\r\n\r\n\tprotected _getMappedItems(items: Array<ServerItemType> | undefined): Array<ClientItemType> | undefined {\r\n\t\tif (!items) return undefined;\r\n\t\tif (!this.#mapper) throw new Error('Mapper is not implemented');\r\n\t\treturn items.map((item) => this.#mapper(item));\r\n\t}\r\n}\r\n","import type { UmbDetailRepository } from './detail/detail-repository.interface.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbArrayState, type Observable } from '@umbraco-cms/backoffice/observable-api';\r\nimport { type ManifestRepository, umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbExtensionApiInitializer } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport { UmbEntityUpdatedEvent } from '@umbraco-cms/backoffice/entity-action';\r\n\r\ninterface UmbRepositoryRequestStatus {\r\n\tstate: {\r\n\t\ttype: 'success' | 'error' | 'loading';\r\n\t\terror?: string;\r\n\t};\r\n\tunique: string;\r\n}\r\n\r\n/**\r\n * @export\r\n * @class UmbRepositoryDetailsManager\r\n * @augments {UmbControllerBase}\r\n * @template DetailType\r\n */\r\nexport class UmbRepositoryDetailsManager<DetailType extends { unique: string }> extends UmbControllerBase {\r\n\t//\r\n\trepository?: UmbDetailRepository<DetailType>;\r\n\r\n\t#init: Promise<unknown>;\r\n\t#eventContext?: typeof UMB_ACTION_EVENT_CONTEXT.TYPE;\r\n\r\n\t// the init promise is used externally for recognizing when the manager is ready.\r\n\tpublic get init() {\r\n\t\treturn this.#init;\r\n\t}\r\n\r\n\t#uniques = new UmbArrayState<DetailType['unique']>([], (x) => x);\r\n\tuniques = this.#uniques.asObservable();\r\n\r\n\t#entries = new UmbArrayState<DetailType, DetailType['unique']>([], (x) => x.unique);\r\n\tentries = this.#entries.asObservable();\r\n\r\n\t#statuses = new UmbArrayState<UmbRepositoryRequestStatus>([], (x) => x.unique);\r\n\tstatuses = this.#statuses.asObservable();\r\n\r\n\t/**\r\n\t * Creates an instance of UmbRepositoryDetailsManager.\r\n\t * @param {UmbControllerHost} host - The host for the controller.\r\n\t * @param {string} repository - The alias of the repository to use.\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\tconstructor(host: UmbControllerHost, repository: UmbDetailRepository<DetailType> | string) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#entries.sortBy((a, b) => {\r\n\t\t\tconst uniques = this.getUniques();\r\n\t\t\tconst aIndex = uniques.indexOf(a.unique);\r\n\t\t\tconst bIndex = uniques.indexOf(b.unique);\r\n\t\t\treturn aIndex - bIndex;\r\n\t\t});\r\n\r\n\t\tif (typeof repository === 'string') {\r\n\t\t\tthis.#init = new UmbExtensionApiInitializer<ManifestRepository<UmbDetailRepository<DetailType>>>(\r\n\t\t\t\tthis,\r\n\t\t\t\tumbExtensionsRegistry,\r\n\t\t\t\trepository,\r\n\t\t\t\t[this],\r\n\t\t\t\t(permitted, repository) => {\r\n\t\t\t\t\tthis.repository = permitted ? repository.api : undefined;\r\n\t\t\t\t},\r\n\t\t\t).asPromise();\r\n\t\t} else {\r\n\t\t\tthis.repository = repository;\r\n\t\t\tthis.#init = Promise.resolve();\r\n\t\t}\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.uniques,\r\n\t\t\t(uniques) => {\r\n\t\t\t\t// remove entries based on no-longer existing uniques:\r\n\t\t\t\tconst removedEntries = this.#entries\r\n\t\t\t\t\t.getValue()\r\n\t\t\t\t\t.filter((entry) => !uniques.includes(entry.unique))\r\n\t\t\t\t\t.map((x) => x.unique);\r\n\r\n\t\t\t\tthis.#statuses.remove(removedEntries);\r\n\t\t\t\tthis.#entries.remove(removedEntries);\r\n\t\t\t\tremovedEntries.forEach((entry) => {\r\n\t\t\t\t\tthis.removeUmbControllerByAlias('observeEntry_' + entry);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.#requestNewDetails();\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.consumeContext(UMB_ACTION_EVENT_CONTEXT, (context) => {\r\n\t\t\tthis.#eventContext?.removeEventListener(\r\n\t\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t\t);\r\n\r\n\t\t\tthis.#eventContext = context;\r\n\t\t\tthis.#eventContext?.addEventListener(\r\n\t\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the manager\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\tclear(): void {\r\n\t\tthis.#uniques.setValue([]);\r\n\t\tthis.#entries.setValue([]);\r\n\t\tthis.#statuses.setValue([]);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the uniques in the manager\r\n\t * @returns {Array<string>} - The uniques in the manager.\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\tgetUniques(): Array<string> {\r\n\t\treturn this.#uniques.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Set the uniques in the manager\r\n\t * @param {(string[] | undefined)} uniques\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\tsetUniques(uniques: Array<string> | undefined): void {\r\n\t\tthis.#uniques.setValue(uniques ?? []);\r\n\t}\r\n\r\n\t/**\r\n\t * Add a unique to the manager\r\n\t * @param {string} unique\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\taddUnique(unique: string): void {\r\n\t\tthis.#uniques.appendOne(unique);\r\n\t}\r\n\r\n\t/**\r\n\t * Add an entry to the manager\r\n\t * @param {DetailType} data\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\taddEntry(data: DetailType): void {\r\n\t\tconst unique = data.unique;\r\n\t\tthis.#statuses.appendOne({\r\n\t\t\tstate: {\r\n\t\t\t\ttype: 'success',\r\n\t\t\t},\r\n\t\t\tunique,\r\n\t\t});\r\n\t\tthis.#entries.appendOne(data);\r\n\t\tthis.#uniques.appendOne(unique);\r\n\t\t// Notice in this case we do not have a observable from the repo, but it should maybe be fine that we just listen for ACTION EVENTS.\r\n\t}\r\n\r\n\t/**\r\n\t * Get all entries in the manager\r\n\t * @returns {Array<DetailType>} - The entries in the manager.\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\tgetEntries(): Array<DetailType> {\r\n\t\treturn this.#entries.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Get an entry observable by unique\r\n\t * @param {string} unique\r\n\t * @returns {Observable<DetailType | undefined>} - The entry observable.\r\n\t * @memberof UmbRepositoryDetailsManager\r\n\t */\r\n\tentryByUnique(unique: string): Observable<DetailType | undefined> {\r\n\t\treturn this.#entries.asObservablePart((items) => items.find((item) => item.unique === unique));\r\n\t}\r\n\r\n\tasync #requestNewDetails(): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.repository) throw new Error('Repository is not initialized');\r\n\r\n\t\tconst requestedUniques = this.getUniques();\r\n\r\n\t\tconst newRequestedUniques = requestedUniques.filter((unique) => {\r\n\t\t\tconst item = this.#statuses.getValue().find((status) => status.unique === unique);\r\n\t\t\treturn !item;\r\n\t\t});\r\n\r\n\t\tnewRequestedUniques.forEach((unique) => {\r\n\t\t\tthis.#requestDetails(unique);\r\n\t\t});\r\n\t}\r\n\r\n\tasync #reloadDetails(unique: string): Promise<void> {\r\n\t\treturn await this.#requestDetails(unique);\r\n\t}\r\n\r\n\tasync #requestDetails(unique: string): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.repository) throw new Error('Repository is not initialized');\r\n\r\n\t\tthis.#statuses.appendOne({\r\n\t\t\tstate: {\r\n\t\t\t\ttype: 'loading',\r\n\t\t\t},\r\n\t\t\tunique,\r\n\t\t});\r\n\r\n\t\tconst { data, error, asObservable } = await this.repository.requestByUnique(unique);\r\n\r\n\t\tif (error) {\r\n\t\t\tthis.#statuses.appendOne({\r\n\t\t\t\tstate: {\r\n\t\t\t\t\ttype: 'error',\r\n\t\t\t\t\terror: '#general_notFound',\r\n\t\t\t\t},\r\n\t\t\t\tunique,\r\n\t\t\t} as UmbRepositoryRequestStatus);\r\n\t\t\tthis.#entries.removeOne(unique);\r\n\t\t\tthis.removeUmbControllerByAlias('observeEntry_' + unique);\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\t//Check it still exists in uniques:\r\n\t\t\tconst uniques = this.getUniques();\r\n\t\t\tif (!uniques.includes(unique)) {\r\n\t\t\t\tthis.#statuses.removeOne(unique);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.#entries.appendOne(data);\r\n\r\n\t\t\tthis.#statuses.appendOne({\r\n\t\t\t\tstate: {\r\n\t\t\t\t\ttype: 'success',\r\n\t\t\t\t},\r\n\t\t\t\tunique,\r\n\t\t\t});\r\n\r\n\t\t\tif (asObservable) {\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tasObservable(),\r\n\t\t\t\t\t(data) => {\r\n\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\tthis.#entries.updateOne(unique, data);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.#entries.removeOne(unique);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'observeEntry_' + unique,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#onEntityUpdatedEvent = (event: UmbEntityUpdatedEvent) => {\r\n\t\tconst eventUnique = event.getUnique();\r\n\r\n\t\tconst items = this.getEntries();\r\n\t\tif (items.length === 0) return;\r\n\r\n\t\t// Ignore events if the entity is not in the list of items.\r\n\t\tconst item = items.find((item) => item.unique === eventUnique);\r\n\t\tif (!item) return;\r\n\r\n\t\tthis.#reloadDetails(item.unique);\r\n\t};\r\n\r\n\toverride destroy(): void {\r\n\t\tthis.#eventContext?.removeEventListener(\r\n\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t);\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n","import type { UmbItemRepository } from './item/index.js';\r\nimport { UmbDeprecation } from '@umbraco-cms/backoffice/utils';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { type ManifestRepository, umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbExtensionApiInitializer } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport { UmbEntityUpdatedEvent } from '@umbraco-cms/backoffice/entity-action';\r\n\r\nconst ObserveRepositoryAlias = Symbol();\r\n\r\ninterface UmbRepositoryItemsStatus {\r\n\tstate: {\r\n\t\ttype: 'success' | 'error' | 'loading';\r\n\t\terror?: string;\r\n\t};\r\n\tunique: string;\r\n}\r\n\r\nexport class UmbRepositoryItemsManager<ItemType extends { unique: string }> extends UmbControllerBase {\r\n\t//\r\n\trepository?: UmbItemRepository<ItemType>;\r\n\t#getUnique: (entry: ItemType) => string | undefined;\r\n\r\n\t#init: Promise<unknown>;\r\n\t#currentRequest?: Promise<unknown>;\r\n\t#eventContext?: typeof UMB_ACTION_EVENT_CONTEXT.TYPE;\r\n\r\n\t// the init promise is used externally for recognizing when the manager is ready.\r\n\tpublic get init() {\r\n\t\treturn this.#init;\r\n\t}\r\n\r\n\t#uniques = new UmbArrayState<string>([], (x) => x);\r\n\tuniques = this.#uniques.asObservable();\r\n\r\n\t#items = new UmbArrayState<ItemType>([], (x) => this.#getUnique(x));\r\n\titems = this.#items.asObservable();\r\n\r\n\t#statuses = new UmbArrayState<UmbRepositoryItemsStatus>([], (x) => x.unique);\r\n\tstatuses = this.#statuses.asObservable();\r\n\r\n\t// TODO: Align with the other manager(details), and make a generic type/base for these. v.17.0 [NL]\r\n\t/**\r\n\t * Creates an instance of UmbRepositoryItemsManager.\r\n\t * @param {UmbControllerHost} host - The host for the controller.\r\n\t * @param {string} repositoryAlias - The alias of the repository to use.\r\n\t * @param {((entry: ItemType) => string | undefined)} [getUniqueMethod] - DEPRECATED since 15.3. Will be removed in v.17.0: A method to get the unique key from the item.\r\n\t * @memberof UmbRepositoryItemsManager\r\n\t */\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\trepositoryAlias: string,\r\n\t\tgetUniqueMethod?: (entry: ItemType) => string | undefined,\r\n\t) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#getUnique = getUniqueMethod\r\n\t\t\t? (entry: ItemType) => {\r\n\t\t\t\t\tnew UmbDeprecation({\r\n\t\t\t\t\t\tdeprecated: 'The getUniqueMethod parameter.',\r\n\t\t\t\t\t\tremoveInVersion: '17.0.0',\r\n\t\t\t\t\t\tsolution: 'The required unique property on the item will be used instead.',\r\n\t\t\t\t\t}).warn();\r\n\t\t\t\t\treturn getUniqueMethod(entry);\r\n\t\t\t\t}\r\n\t\t\t: (entry) => entry.unique;\r\n\r\n\t\tthis.#init = new UmbExtensionApiInitializer<ManifestRepository<UmbItemRepository<ItemType>>>(\r\n\t\t\tthis,\r\n\t\t\tumbExtensionsRegistry,\r\n\t\t\trepositoryAlias,\r\n\t\t\t[this],\r\n\t\t\t(permitted, repository) => {\r\n\t\t\t\tthis.repository = permitted ? repository.api : undefined;\r\n\t\t\t},\r\n\t\t).asPromise();\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.uniques,\r\n\t\t\t(uniques) => {\r\n\t\t\t\tif (uniques.length === 0) {\r\n\t\t\t\t\tthis.#items.setValue([]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: This could be optimized so we only load the appended items, but this requires that the response checks that an item is still present in uniques. [NL]\r\n\t\t\t\t// Check if we already have the items, and then just sort them:\r\n\t\t\t\tconst items = this.#items.getValue();\r\n\t\t\t\tif (\r\n\t\t\t\t\tuniques.length === items.length &&\r\n\t\t\t\t\tuniques.every((unique) => items.find((item) => this.#getUnique(item) === unique))\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.#items.setValue(this.#sortByUniques(items));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// We need to load new items, so ...\r\n\t\t\t\t\tthis.#requestItems();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.consumeContext(UMB_ACTION_EVENT_CONTEXT, (context) => {\r\n\t\t\tthis.#eventContext?.removeEventListener(\r\n\t\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t\t);\r\n\r\n\t\t\tthis.#eventContext = context;\r\n\t\t\tthis.#eventContext?.addEventListener(\r\n\t\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tgetUniques(): Array<string> {\r\n\t\treturn this.#uniques.getValue();\r\n\t}\r\n\r\n\tsetUniques(uniques: string[] | undefined): void {\r\n\t\tthis.#uniques.setValue(uniques ?? []);\r\n\t}\r\n\r\n\tgetItems(): Array<ItemType> {\r\n\t\treturn this.#items.getValue();\r\n\t}\r\n\r\n\titemByUnique(unique: string) {\r\n\t\treturn this.#items.asObservablePart((items) => items.find((item) => this.#getUnique(item) === unique));\r\n\t}\r\n\r\n\tasync getItemByUnique(unique: string) {\r\n\t\t// TODO: Make an observeOnce feature, to avoid this amount of code: [NL]\r\n\t\tconst ctrl = this.observe(this.itemByUnique(unique), () => {}, null);\r\n\t\tconst result = await ctrl.asPromise();\r\n\t\tctrl.destroy();\r\n\t\treturn result;\r\n\t}\r\n\r\n\tasync #requestItems(): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.repository) throw new Error('Repository is not initialized');\r\n\r\n\t\tconst requestedUniques = this.getUniques();\r\n\r\n\t\tthis.#statuses.setValue(\r\n\t\t\trequestedUniques.map((unique) => ({\r\n\t\t\t\tstate: {\r\n\t\t\t\t\ttype: 'loading',\r\n\t\t\t\t},\r\n\t\t\t\tunique,\r\n\t\t\t})),\r\n\t\t);\r\n\r\n\t\t// TODO: Test if its just some items that is gone now, if so then just filter them out. (maybe use code from #removeItem)\r\n\t\t// This is where this.#getUnique comes in play. Unless that can come from the repository, but that collides with the idea of having a multi-type repository. If that happens.\r\n\t\tconst request = this.repository.requestItems(requestedUniques);\r\n\t\tthis.#currentRequest = request;\r\n\t\tconst { asObservable, data, error } = await request;\r\n\r\n\t\tif (this.#currentRequest !== request) {\r\n\t\t\t// You are not the newest request, so please back out.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (error) {\r\n\t\t\tthis.#statuses.append(\r\n\t\t\t\trequestedUniques.map((unique) => ({\r\n\t\t\t\t\tstate: {\r\n\t\t\t\t\t\ttype: 'error',\r\n\t\t\t\t\t\terror: '#general_error',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunique,\r\n\t\t\t\t})),\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// find uniques not resolved:\r\n\t\tif (data) {\r\n\t\t\t// find rejected uniques:\r\n\t\t\tconst rejectedUniques = requestedUniques.filter(\r\n\t\t\t\t(unique) => !data.find((item) => this.#getUnique(item) === unique),\r\n\t\t\t);\r\n\t\t\tconst resolvedUniques = requestedUniques.filter((unique) => !rejectedUniques.includes(unique));\r\n\t\t\tthis.#items.remove(rejectedUniques);\r\n\r\n\t\t\tthis.#statuses.append([\r\n\t\t\t\t...rejectedUniques.map(\r\n\t\t\t\t\t(unique) =>\r\n\t\t\t\t\t\t({\r\n\t\t\t\t\t\t\tstate: {\r\n\t\t\t\t\t\t\t\ttype: 'error',\r\n\t\t\t\t\t\t\t\terror: '#general_notFound',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tunique,\r\n\t\t\t\t\t\t}) as UmbRepositoryItemsStatus,\r\n\t\t\t\t),\r\n\t\t\t\t...resolvedUniques.map(\r\n\t\t\t\t\t(unique) =>\r\n\t\t\t\t\t\t({\r\n\t\t\t\t\t\t\tstate: {\r\n\t\t\t\t\t\t\t\ttype: 'success',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tunique,\r\n\t\t\t\t\t\t}) as UmbRepositoryItemsStatus,\r\n\t\t\t\t),\r\n\t\t\t]);\r\n\t\t}\r\n\r\n\t\tif (asObservable) {\r\n\t\t\tthis.observe(\r\n\t\t\t\tasObservable(),\r\n\t\t\t\t(data) => {\r\n\t\t\t\t\tthis.#items.setValue(this.#sortByUniques(data));\r\n\t\t\t\t},\r\n\t\t\t\tObserveRepositoryAlias,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tasync #reloadItem(unique: string): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tif (!this.repository) throw new Error('Repository is not initialized');\r\n\r\n\t\tconst { data, error } = await this.repository.requestItems([unique]);\r\n\r\n\t\tif (error) {\r\n\t\t\tthis.#statuses.appendOne({\r\n\t\t\t\tstate: {\r\n\t\t\t\t\ttype: 'error',\r\n\t\t\t\t\terror: '#general_notFound',\r\n\t\t\t\t},\r\n\t\t\t\tunique,\r\n\t\t\t} as UmbRepositoryItemsStatus);\r\n\t\t}\r\n\r\n\t\tif (data) {\r\n\t\t\tconst items = this.getItems();\r\n\t\t\tconst item = items.find((item) => this.#getUnique(item) === unique);\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\tconst index = items.indexOf(item);\r\n\t\t\t\tconst newItems = [...items];\r\n\t\t\t\tnewItems[index] = data[0];\r\n\t\t\t\tthis.#items.setValue(this.#sortByUniques(newItems));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#sortByUniques(data?: Array<ItemType>): Array<ItemType> {\r\n\t\tif (!data) return [];\r\n\t\tconst uniques = this.getUniques();\r\n\t\treturn [...data].sort((a, b) => {\r\n\t\t\tconst aIndex = uniques.indexOf(this.#getUnique(a) ?? '');\r\n\t\t\tconst bIndex = uniques.indexOf(this.#getUnique(b) ?? '');\r\n\t\t\treturn aIndex - bIndex;\r\n\t\t});\r\n\t}\r\n\r\n\t#onEntityUpdatedEvent = (event: UmbEntityUpdatedEvent) => {\r\n\t\tconst eventUnique = event.getUnique();\r\n\r\n\t\tconst items = this.getItems();\r\n\t\tif (items.length === 0) return;\r\n\r\n\t\t// Ignore events if the entity is not in the list of items.\r\n\t\tconst item = items.find((item) => this.#getUnique(item) === eventUnique);\r\n\t\tif (!item) return;\r\n\r\n\t\tthis.#reloadItem(item.unique);\r\n\t};\r\n\r\n\toverride destroy(): void {\r\n\t\tthis.#eventContext?.removeEventListener(\r\n\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t);\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n"],"names":["UMB_MANAGEMENT_API_DATA_SOURCE_ALIAS","UmbDataSourceDataMappingResolver","UmbControllerBase","#apiCache","forDataSource","forDataModel","manifest","#getManifestWithBestFit","dataMapping","createExtensionApi","supportedManifests","#getSupportedManifests","a","b","umbExtensionsRegistry","UmbDataSourceDataMapper","#dataMappingResolver","args","message","UmbManagementApiDataMapper","#dataMapper","host","UmbRepositoryBase","UmbDetailRepositoryBase","#init","#detailStore","detailSource","detailStoreContextAlias","instance","preset","unique","data","error","model","parentUnique","createdData","updatedData","UmbItemRepositoryBase","#itemSource","itemSource","itemStoreContextAlias","uniques","of","UmbItemServerDataSourceBase","#getItems","#mapper","tryExecute","items","item","UmbRepositoryDetailsManager","repository","#uniques","UmbArrayState","x","#entries","#statuses","#onEntityUpdatedEvent","event","eventUnique","#reloadDetails","aIndex","bIndex","UmbExtensionApiInitializer","permitted","removedEntries","entry","#requestNewDetails","UMB_ACTION_EVENT_CONTEXT","context","#eventContext","UmbEntityUpdatedEvent","status","#requestDetails","asObservable","ObserveRepositoryAlias","UmbRepositoryItemsManager","repositoryAlias","getUniqueMethod","#items","#getUnique","#reloadItem","UmbDeprecation","#sortByUniques","#requestItems","#currentRequest","ctrl","result","requestedUniques","request","rejectedUniques","resolvedUniques","index","newItems"],"mappings":"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"}