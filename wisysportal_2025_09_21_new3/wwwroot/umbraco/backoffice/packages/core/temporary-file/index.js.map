{"version":3,"file":"index.js","sources":["../../../../src/packages/core/temporary-file/temporary-file.server.data-source.ts","../../../../src/packages/core/temporary-file/temporary-file.repository.ts","../../../../src/packages/core/temporary-file/components/temporary-file-badge.element.ts","../../../../src/packages/core/temporary-file/types.ts","../../../../src/packages/core/temporary-file/temporary-file-manager.class.ts"],"sourcesContent":["import type { UmbDataSourceResponse } from '../repository/index.js';\r\nimport { TemporaryFileService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute, tryXhrRequest } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source to upload temporary files to the server\r\n * @class UmbTemporaryFileServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbTemporaryFileServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbTemporaryFileServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbTemporaryFileServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Uploads a temporary file to the server\r\n\t * @param {string} id\r\n\t * @param {File} file\r\n\t * @returns {*}\r\n\t * @memberof UmbTemporaryFileServerDataSource\r\n\t */\r\n\tasync create(\r\n\t\tid: string,\r\n\t\tfile: File,\r\n\t\tonProgress?: (progress: ProgressEvent) => void,\r\n\t\tabortSignal?: AbortSignal,\r\n\t): Promise<UmbDataSourceResponse<unknown>> {\r\n\t\tconst body = new FormData();\r\n\t\tbody.append('Id', id);\r\n\t\tbody.append('File', file);\r\n\t\tconst xhrRequest = tryXhrRequest<unknown>(this.#host, {\r\n\t\t\turl: '/umbraco/management/api/v1/temporary-file',\r\n\t\t\tmethod: 'POST',\r\n\t\t\tresponseHeader: 'Umb-Generated-Resource',\r\n\t\t\tdisableNotifications: true,\r\n\t\t\tbody,\r\n\t\t\tonProgress,\r\n\t\t\tabortSignal,\r\n\t\t});\r\n\t\treturn xhrRequest;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a temporary file from the server\r\n\t * @param {string} id\r\n\t * @returns {*}\r\n\t * @memberof UmbTemporaryFileServerDataSource\r\n\t */\r\n\tread(id: string) {\r\n\t\tif (!id) throw new Error('Id is missing');\r\n\t\treturn tryExecute(this.#host, TemporaryFileService.getTemporaryFileById({ path: { id } }));\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a temporary file from the server\r\n\t * @param {string} id\r\n\t * @returns {*}\r\n\t * @memberof UmbTemporaryFileServerDataSource\r\n\t */\r\n\tdelete(id: string) {\r\n\t\tif (!id) throw new Error('Id is missing');\r\n\t\treturn tryExecute(this.#host, TemporaryFileService.deleteTemporaryFileById({ path: { id } }));\r\n\t}\r\n}\r\n","import { UmbTemporaryFileServerDataSource } from './temporary-file.server.data-source.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\n/**\r\n * A repository for uploading temporary files\r\n * @class UmbTemporaryFileRepository\r\n * @augments {UmbRepositoryBase}\r\n */\r\nexport class UmbTemporaryFileRepository extends UmbRepositoryBase {\r\n\t#source: UmbTemporaryFileServerDataSource;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbTemporaryFileRepository.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbTemporaryFileRepository\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.#source = new UmbTemporaryFileServerDataSource(host);\r\n\t}\r\n\r\n\t/**\r\n\t * Uploads a temporary file\r\n\t * @param {string} id\r\n\t * @param {File} file\r\n\t * @param onProgress\r\n\t * @param abortSignal\r\n\t * @returns {*}\r\n\t * @memberof UmbTemporaryFileRepository\r\n\t */\r\n\tupload(id: string, file: File, onProgress?: (progress: ProgressEvent) => void, abortSignal?: AbortSignal) {\r\n\t\treturn this.#source.create(id, file, onProgress, abortSignal);\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a temporary file\r\n\t * @param {string} id\r\n\t * @returns {*}\r\n\t * @memberof UmbTemporaryFileRepository\r\n\t */\r\n\tdelete(id: string) {\r\n\t\treturn this.#source.delete(id);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a temporary file\r\n\t * @param {string} id\r\n\t * @returns {*}\r\n\t * @memberof UmbTemporaryFileRepository\r\n\t */\r\n\trequestById(id: string) {\r\n\t\treturn this.#source.read(id);\r\n\t}\r\n}\r\n","import { css, customElement, html, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { clamp } from '@umbraco-cms/backoffice/utils';\r\n\r\n@customElement('umb-temporary-file-badge')\r\nexport class UmbTemporaryFileBadgeElement extends UmbLitElement {\r\n\t#progress = 0;\r\n\r\n\t@property({ type: Number })\r\n\tpublic set progress(v: number) {\r\n\t\tconst p = clamp(Math.ceil(v), 0, 100);\r\n\t\tthis.#progress = p;\r\n\t}\r\n\tpublic get progress(): number {\r\n\t\treturn this.#progress;\r\n\t}\r\n\r\n\t@property({ type: Boolean, reflect: true })\r\n\tpublic complete = false;\r\n\r\n\t@property({ type: Boolean, reflect: true })\r\n\tpublic error = false;\r\n\r\n\toverride render() {\r\n\t\treturn html` <div id=\"wrapper\">\r\n\t\t\t<uui-loader-circle .progress=${this.complete || this.error ? 100 : this.progress}></uui-loader-circle>\r\n\t\t\t<div id=\"icon\">${this.#renderIcon()}</div>\r\n\t\t</div>`;\r\n\t}\r\n\r\n\t#renderIcon() {\r\n\t\tif (this.error) {\r\n\t\t\treturn html`<uui-icon name=\"icon-alert\"></uui-icon>`;\r\n\t\t}\r\n\r\n\t\tif (this.complete) {\r\n\t\t\treturn html`<uui-icon name=\"icon-check\"></uui-icon>`;\r\n\t\t}\r\n\r\n\t\treturn `${this.progress}%`;\r\n\t}\r\n\r\n\tstatic override readonly styles = css`\r\n\t\t#wrapper {\r\n\t\t\tposition: relative;\r\n\t\t\theight: 75%;\r\n\t\t}\r\n\r\n\t\t:host([complete]) {\r\n\t\t\tuui-loader-circle,\r\n\t\t\t#icon {\r\n\t\t\t\tcolor: var(--uui-color-positive);\r\n\t\t\t}\r\n\t\t}\r\n\t\t:host([error]) {\r\n\t\t\tuui-loader-circle,\r\n\t\t\t#icon {\r\n\t\t\t\tcolor: var(--uui-color-danger);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuui-loader-circle {\r\n\t\t\tz-index: 2;\r\n\t\t\tinset: 0;\r\n\t\t\tcolor: var(--uui-color-focus);\r\n\t\t\tfont-size: var(--uui-size-12);\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t}\r\n\r\n\t\t#icon {\r\n\t\t\tcolor: var(--uui-color-text);\r\n\t\t\tfont-size: var(--uui-size-6);\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t}\r\n\t`;\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-temporary-file-badge': UmbTemporaryFileBadgeElement;\r\n\t}\r\n}\r\n\r\nexport default UmbTemporaryFileBadgeElement;\r\n","import type { TemporaryFileConfigurationResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\n\r\nexport enum TemporaryFileStatus {\r\n\tSUCCESS = 'success',\r\n\tWAITING = 'waiting',\r\n\tERROR = 'error',\r\n\tCANCELLED = 'cancelled',\r\n}\r\n\r\nexport interface UmbTemporaryFileModel {\r\n\tfile: File;\r\n\ttemporaryUnique: string;\r\n\tstatus?: TemporaryFileStatus;\r\n\tonProgress?: (progress: number) => void;\r\n\t/**\r\n\t * The abort signal used to cancel the upload.\r\n\t * @deprecated Use {@link abortController} instead.\r\n\t */\r\n\tabortSignal?: AbortSignal;\r\n\t/**\r\n\t * The abort controller used to cancel the upload.\r\n\t */\r\n\tabortController?: AbortController;\r\n}\r\n\r\nexport type UmbQueueHandlerCallback<TItem extends UmbTemporaryFileModel> = (item: TItem) => Promise<void>;\r\n\r\nexport type UmbUploadOptions<TItem extends UmbTemporaryFileModel> = {\r\n\tchunkSize?: number;\r\n\tcallback?: UmbQueueHandlerCallback<TItem>;\r\n};\r\n\r\nexport type UmbTemporaryFileConfigurationModel = TemporaryFileConfigurationResponseModel;\r\n","import { UmbTemporaryFileRepository } from './temporary-file.repository.js';\r\nimport { UmbTemporaryFileConfigRepository } from './config/index.js';\r\nimport {\r\n\tTemporaryFileStatus,\r\n\ttype UmbQueueHandlerCallback,\r\n\ttype UmbTemporaryFileModel,\r\n\ttype UmbUploadOptions,\r\n} from './types.js';\r\nimport { observeMultiple, UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport { formatBytes } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbApiError, UmbCancelError } from '@umbraco-cms/backoffice/resources';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbTemporaryFileManager<\r\n\tUploadableItem extends UmbTemporaryFileModel = UmbTemporaryFileModel,\r\n> extends UmbControllerBase {\r\n\treadonly #temporaryFileRepository = new UmbTemporaryFileRepository(this._host);\r\n\treadonly #temporaryFileConfigRepository = new UmbTemporaryFileConfigRepository(this._host);\r\n\treadonly #localization = new UmbLocalizationController(this._host);\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n\treadonly #queue = new UmbArrayState<UploadableItem>([], (item) => item.temporaryUnique);\r\n\tpublic readonly queue = this.#queue.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\r\n\t\t\tthis.#notificationContext = instance;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the temporary file configuration.\r\n\t * @returns {Promise<UmbTemporaryFileConfigRepository>} The temporary file configuration.\r\n\t */\r\n\tasync getConfiguration(): Promise<UmbTemporaryFileConfigRepository> {\r\n\t\tawait this.#temporaryFileConfigRepository.initialized;\r\n\t\treturn this.#temporaryFileConfigRepository;\r\n\t}\r\n\r\n\tasync uploadOne(uploadableItem: UploadableItem, options?: UmbUploadOptions<UploadableItem>): Promise<UploadableItem> {\r\n\t\tthis.#queue.setValue([]);\r\n\r\n\t\tconst item: UploadableItem = {\r\n\t\t\t...uploadableItem,\r\n\t\t\tstatus: TemporaryFileStatus.WAITING,\r\n\t\t};\r\n\r\n\t\tthis.#queue.appendOne(item);\r\n\t\treturn (await this.#handleQueue({ ...options, chunkSize: 1 }))[0];\r\n\t}\r\n\r\n\tupload(\r\n\t\tqueueItems: Array<UploadableItem>,\r\n\t\toptions?: UmbUploadOptions<UploadableItem>,\r\n\t): Promise<Array<UploadableItem>> {\r\n\t\tthis.#queue.setValue([]);\r\n\r\n\t\tconst items = queueItems.map((item): UploadableItem => ({ ...item, status: TemporaryFileStatus.WAITING }));\r\n\t\tthis.#queue.append(items);\r\n\t\treturn this.#handleQueue({ ...options });\r\n\t}\r\n\r\n\tremoveOne(unique: string) {\r\n\t\tthis.#queue.removeOne(unique);\r\n\t}\r\n\r\n\tremove(uniques: Array<string>) {\r\n\t\tthis.#queue.remove(uniques);\r\n\t}\r\n\r\n\tremoveAll() {\r\n\t\tthis.#queue.setValue([]);\r\n\t}\r\n\r\n\tasync #handleQueue(options?: UmbUploadOptions<UploadableItem>): Promise<Array<UploadableItem>> {\r\n\t\tconst filesCompleted: Array<UploadableItem> = [];\r\n\t\tconst queue = this.#queue.getValue();\r\n\r\n\t\tif (!queue.length) return filesCompleted;\r\n\r\n\t\tconst handler: UmbQueueHandlerCallback<UploadableItem> = async (item) => {\r\n\t\t\tconst completedUpload = await this.#handleUpload(item);\r\n\t\t\tfilesCompleted.push(completedUpload);\r\n\r\n\t\t\tif (options?.callback) await options.callback(completedUpload);\r\n\t\t};\r\n\r\n\t\tconst chunkSize = options?.chunkSize ?? 5;\r\n\t\tconst chunks = Math.ceil(queue.length / chunkSize);\r\n\r\n\t\tfor (let i = 0; i < chunks; i++) {\r\n\t\t\tconst chunk = queue.slice(i * chunkSize, i * chunkSize + chunkSize);\r\n\t\t\tawait Promise.all(chunk.map(handler));\r\n\t\t}\r\n\r\n\t\treturn filesCompleted;\r\n\t}\r\n\r\n\t#notifyOnFileSizeLimitExceeded(maxFileSize: number, item: UploadableItem) {\r\n\t\tthis.#notificationContext?.peek('warning', {\r\n\t\t\tdata: {\r\n\t\t\t\theadline: 'Upload',\r\n\t\t\t\tmessage: `\r\n\t${this.#localization.term('media_invalidFileSize')}: ${item.file.name} (${formatBytes(item.file.size)}).\r\n\r\n\t${this.#localization.term('media_maxFileSize')} ${maxFileSize > 0 ? formatBytes(maxFileSize) : 'N/A'}.\r\n\t\t\t\t\t\t`,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tasync #validateItem(item: UploadableItem): Promise<boolean> {\r\n\t\tconst config = await this.getConfiguration();\r\n\t\tlet maxFileSize = await this.observe(config.part('maxFileSize')).asPromise();\r\n\t\tif (maxFileSize) {\r\n\t\t\t// Convert from kilobytes to bytes\r\n\t\t\tmaxFileSize *= 1024;\r\n\t\t\tif (item.file.size > maxFileSize) {\r\n\t\t\t\tthis.#notifyOnFileSizeLimitExceeded(maxFileSize, item);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst fileExtension = item.file.name.split('.').pop() ?? '';\r\n\r\n\t\tconst [allowedExtensions, disallowedExtensions] = await this.observe(\r\n\t\t\tobserveMultiple([\r\n\t\t\t\tthis.#temporaryFileConfigRepository.part('allowedUploadedFileExtensions'),\r\n\t\t\t\tthis.#temporaryFileConfigRepository.part('disallowedUploadedFilesExtensions'),\r\n\t\t\t]),\r\n\t\t).asPromise();\r\n\r\n\t\tif (\r\n\t\t\t(allowedExtensions?.length && !allowedExtensions.includes(fileExtension)) ||\r\n\t\t\t(disallowedExtensions?.length && disallowedExtensions.includes(fileExtension))\r\n\t\t) {\r\n\t\t\tthis.#notificationContext?.peek('warning', {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tmessage: `${this.#localization.term('media_disallowedFileType')}: ${fileExtension}`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync #handleUpload(item: UploadableItem) {\r\n\t\tif (!item.temporaryUnique) throw new Error(`Unique is missing for item ${item}`);\r\n\r\n\t\tconst isValid = await this.#validateItem(item);\r\n\t\tif (!isValid) {\r\n\t\t\tthis.#queue.updateOne(item.temporaryUnique, {\r\n\t\t\t\t...item,\r\n\t\t\t\tstatus: TemporaryFileStatus.ERROR,\r\n\t\t\t});\r\n\t\t\treturn { ...item, status: TemporaryFileStatus.ERROR };\r\n\t\t}\r\n\r\n\t\tconst { error } = await this.#temporaryFileRepository.upload(\r\n\t\t\titem.temporaryUnique,\r\n\t\t\titem.file,\r\n\t\t\t(evt) => {\r\n\t\t\t\t// Update progress in percent if a callback is provided\r\n\t\t\t\tif (item.onProgress) item.onProgress((evt.loaded / evt.total) * 100);\r\n\t\t\t},\r\n\t\t\titem.abortController?.signal ?? item.abortSignal,\r\n\t\t);\r\n\r\n\t\tlet status = TemporaryFileStatus.SUCCESS;\r\n\r\n\t\tif (error) {\r\n\t\t\tstatus = this.#handleError(error, item);\r\n\t\t}\r\n\r\n\t\tthis.#queue.updateOne(item.temporaryUnique, { ...item, status });\r\n\t\treturn { ...item, status };\r\n\t}\r\n\r\n\t#handleError(error: Error, item: UploadableItem): TemporaryFileStatus {\r\n\t\tif (error instanceof UmbCancelError) {\r\n\t\t\t// Ignore the error if the upload was cancelled\r\n\t\t\treturn TemporaryFileStatus.CANCELLED;\r\n\t\t}\r\n\r\n\t\tif (UmbApiError.isUmbApiError(error)) {\r\n\t\t\t// Handle the error based on the status code\r\n\t\t\tif (error.status === 413) {\r\n\t\t\t\t// Special handling for when the request body is too large\r\n\t\t\t\tconst maxFileSizeGuestimate = parseInt(/(\\d+) bytes/.exec(error.problemDetails.title)?.[1] ?? '0', 10);\r\n\t\t\t\tthis.#notifyOnFileSizeLimitExceeded(maxFileSizeGuestimate, item);\r\n\t\t\t} else {\r\n\t\t\t\tthis.#notificationContext?.peek('danger', {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\theadline: this.#localization.term('errors_receivedErrorFromServer'),\r\n\t\t\t\t\t\tmessage: error.problemDetails.title,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.#notificationContext?.peek('danger', {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\theadline: this.#localization.term('errors_receivedErrorFromServer'),\r\n\t\t\t\t\tmessage: error.message,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn TemporaryFileStatus.ERROR;\r\n\t}\r\n}\r\n"],"names":["UmbTemporaryFileServerDataSource","#host","host","id","file","onProgress","abortSignal","body","tryXhrRequest","tryExecute","TemporaryFileService","UmbTemporaryFileRepository","UmbRepositoryBase","#source","_progress","_UmbTemporaryFileBadgeElement_instances","renderIcon_fn","UmbTemporaryFileBadgeElement","UmbLitElement","__privateAdd","v","p","clamp","__privateSet","__privateGet","html","__privateMethod","css","__decorateClass","property","customElement","TemporaryFileStatus","UmbTemporaryFileManager","UmbControllerBase","#temporaryFileRepository","#temporaryFileConfigRepository","UmbTemporaryFileConfigRepository","#localization","UmbLocalizationController","#queue","UmbArrayState","item","UMB_NOTIFICATION_CONTEXT","instance","#notificationContext","uploadableItem","options","#handleQueue","queueItems","items","unique","uniques","filesCompleted","queue","handler","completedUpload","#handleUpload","chunkSize","chunks","i","chunk","#notifyOnFileSizeLimitExceeded","maxFileSize","formatBytes","#validateItem","config","fileExtension","allowedExtensions","disallowedExtensions","observeMultiple","error","evt","status","#handleError","UmbCancelError","UmbApiError","maxFileSizeGuestimate"],"mappings":"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"}