{"version":3,"file":"index.js","sources":["../../../../src/packages/core/localization/localize.element.ts","../../../../src/packages/core/localization/localize-date.element.ts","../../../../src/packages/core/localization/localize-number.element.ts","../../../../src/packages/core/localization/localize-relative-time.element.ts","../../../../src/packages/core/localization/registry/localization.registry.ts","../../../../src/packages/core/localization/components/ui-culture-input/ui-culture-input.element.ts"],"sourcesContent":["import { css, customElement, html, property, state, unsafeHTML, when } from '@umbraco-cms/backoffice/external/lit';\r\nimport { escapeHTML } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a string with optional interpolation values.\r\n * @element umb-localize\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize')\r\nexport class UmbLocalizeElement extends UmbLitElement {\r\n\t/**\r\n\t * The key to localize. The key is case sensitive.\r\n\t * @attr\r\n\t * @example key=\"general_ok\"\r\n\t */\r\n\t@property()\r\n\tkey!: string;\r\n\r\n\t/**\r\n\t * The values to forward to the localization function (must be JSON compatible).\r\n\t * @attr\r\n\t * @example args=\"[1,2,3]\"\r\n\t * @type {any[] | undefined}\r\n\t */\r\n\t@property({ type: Array })\r\n\targs?: unknown[];\r\n\r\n\t/**\r\n\t * If true, the key will be rendered instead of the localized value if the key is not found.\r\n\t * @attr\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tdebug = false;\r\n\r\n\t@state()\r\n\tprotected get text(): string {\r\n\t\t// As translated texts can contain HTML, we will need to render with unsafeHTML.\r\n\t\t// But arguments can come from user input, so they should be escaped.\r\n\t\tconst escapedArgs = (this.args ?? []).map((a) => escapeHTML(a));\r\n\r\n\t\tconst localizedValue = this.localize.term(this.key, ...escapedArgs);\r\n\r\n\t\t// If the value is the same as the key, it means the key was not found.\r\n\t\tif (localizedValue === this.key) {\r\n\t\t\t(this.getHostElement() as HTMLElement).setAttribute('data-localize-missing', this.key);\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\t(this.getHostElement() as HTMLElement).removeAttribute('data-localize-missing');\r\n\r\n\t\treturn localizedValue.trim();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn when(\r\n\t\t\tthis.text,\r\n\t\t\t(text) => unsafeHTML(text),\r\n\t\t\t() => (this.debug ? html`<span style=\"color:red\">${this.key}</span>` : html`<slot></slot>`),\r\n\t\t);\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize': UmbLocalizeElement;\r\n\t}\r\n}\r\n","import { css, customElement, nothing, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a date\r\n * @element umb-localize-date\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize-date')\r\nexport class UmbLocalizeDateElement extends UmbLitElement {\r\n\t/**\r\n\t * The date to localize.\r\n\t * @attr\r\n\t * @example date=\"Sep 22 2023\"\r\n\t */\r\n\t@property({ type: String })\r\n\tdate?: string | Date;\r\n\r\n\t/**\r\n\t * Formatting options\r\n\t * @attr\r\n\t * @example options={ dateStyle: 'full', timeStyle: 'long', timeZone: 'Australia/Sydney' }\r\n\t */\r\n\t@property({ type: Object })\r\n\toptions?: Intl.DateTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Do not show the duration in the title.\r\n\t */\r\n\t@property({ type: Boolean })\r\n\tskipDuration = false;\r\n\r\n\toverride updated() {\r\n\t\tthis.#setTitle();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this.date ? this.localize.date(this.date, this.options) : nothing;\r\n\t}\r\n\r\n\t#setTitle() {\r\n\t\tif (this.skipDuration) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet title = '';\r\n\r\n\t\tif (this.date) {\r\n\t\t\tconst now = new Date();\r\n\t\t\tconst d = new Date(this.date);\r\n\t\t\tconst duration = this.localize.duration(d, now);\r\n\t\t\ttitle = this.localize.term('general_duration', duration, d, now);\r\n\t\t}\r\n\r\n\t\tthis.title = title;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize-date': UmbLocalizeDateElement;\r\n\t}\r\n}\r\n","import { css, customElement, html, property, state, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a number\r\n * @element umb-localize-number\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize-number')\r\nexport class UmbLocalizeNumberElement extends UmbLitElement {\r\n\t/**\r\n\t * The number to localize.\r\n\t * @attr\r\n\t * @example number=1_000_000\r\n\t */\r\n\t@property()\r\n\tnumber!: number | string;\r\n\r\n\t/**\r\n\t * Formatting options\r\n\t * @attr\r\n\t * @example options={ style: 'currency', currency: 'EUR' }\r\n\t */\r\n\t@property()\r\n\toptions?: Intl.NumberFormatOptions;\r\n\r\n\t@state()\r\n\tprotected get text(): string {\r\n\t\treturn this.localize.number(this.number, this.options);\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this.number ? html`${unsafeHTML(this.text)}` : html`<slot></slot>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize-number': UmbLocalizeNumberElement;\r\n\t}\r\n}\r\n","import { css, customElement, html, property, state, unsafeHTML } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * This element allows you to localize a relative time\r\n * @element umb-localize-relative-time\r\n * @slot - The fallback value if the key is not found.\r\n */\r\n@customElement('umb-localize-relative-time')\r\nexport class UmbLocalizeRelativeTimeElement extends UmbLitElement {\r\n\t/**\r\n\t * The date to localize.\r\n\t * @attr\r\n\t * @example time=10\r\n\t */\r\n\t@property({ type: Number })\r\n\ttime!: number;\r\n\r\n\t/**\r\n\t * Formatting options\r\n\t * @attr\r\n\t * @example options={ dateStyle: 'full', timeStyle: 'long', timeZone: 'Australia/Sydney' }\r\n\t */\r\n\t@property({ type: Object })\r\n\toptions?: Intl.RelativeTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Unit\r\n\t * @attr\r\n\t * @example unit='seconds'\r\n\t */\r\n\t@property()\r\n\tunit: Intl.RelativeTimeFormatUnit = 'seconds';\r\n\r\n\t@state()\r\n\tprotected get text(): string {\r\n\t\treturn this.localize.relativeTime(this.time, this.unit, this.options);\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn this.time ? html`${unsafeHTML(this.text)}` : html`<slot></slot>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-localize-relative-time': UmbLocalizeRelativeTimeElement;\r\n\t}\r\n}\r\n","import type { ManifestLocalization } from '../extensions/localization.extension.js';\r\nimport {\r\n\tcatchError,\r\n\tdistinctUntilChanged,\r\n\tfilter,\r\n\tfrom,\r\n\tmap,\r\n\tof,\r\n\tswitchMap,\r\n} from '@umbraco-cms/backoffice/external/rxjs';\r\nimport { hasDefaultExport, loadManifestPlainJs } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { umbLocalizationManager, UMB_DEFAULT_LOCALIZATION_CULTURE } from '@umbraco-cms/backoffice/localization-api';\r\nimport { UmbStringState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbBackofficeExtensionRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport type {\r\n\tUmbLocalizationSetBase,\r\n\tUmbLocalizationDictionary,\r\n\tUmbLocalizationFlatDictionary,\r\n} from '@umbraco-cms/backoffice/localization-api';\r\nimport type { Subscription } from '@umbraco-cms/backoffice/external/rxjs';\r\n\r\n/**\r\n * Adds or updates a dictionary in the inner dictionary.\r\n * @param {UmbLocalizationFlatDictionary} innerDictionary The inner dictionary to add or update the dictionary in.\r\n * @param {string} dictionaryName The name of the dictionary to add or update.\r\n * @param {UmbLocalizationDictionary['value']} dictionary The dictionary to add or update.\r\n */\r\nfunction addOrUpdateDictionary(\r\n\tinnerDictionary: UmbLocalizationFlatDictionary,\r\n\tdictionaryName: string,\r\n\tdictionary: UmbLocalizationDictionary['value'],\r\n) {\r\n\tfor (const [key, value] of Object.entries(dictionary)) {\r\n\t\tinnerDictionary[`${dictionaryName}_${key}`] = value;\r\n\t}\r\n}\r\n\r\nexport class UmbLocalizationRegistry {\r\n\t#currentLanguage = new UmbStringState(\r\n\t\tdocument.documentElement.lang !== '' ? document.documentElement.lang : UMB_DEFAULT_LOCALIZATION_CULTURE,\r\n\t);\r\n\treadonly currentLanguage = this.#currentLanguage.asObservable();\r\n\r\n\t/**\r\n\t * Get the current registered translations.\r\n\t * @returns {Map<string, UmbLocalizationSetBase>} Returns the registered translations\r\n\t */\r\n\tget localizations(): Map<string, UmbLocalizationSetBase> {\r\n\t\treturn umbLocalizationManager.localizations;\r\n\t}\r\n\r\n\t#subscription: Subscription;\r\n\r\n\tconstructor(extensionRegistry: UmbBackofficeExtensionRegistry) {\r\n\t\t// Store the locale in a variable to use when setting the document language and direction\r\n\t\tlet locale: Intl.Locale | undefined = undefined;\r\n\r\n\t\tthis.#subscription = this.currentLanguage\r\n\t\t\t.pipe(\r\n\t\t\t\t// Ensure the current language is not empty\r\n\t\t\t\tfilter((currentLanguage) => !!currentLanguage),\r\n\t\t\t\t// Use distinctUntilChanged to avoid unnecessary re-renders when the language hasn't changed\r\n\t\t\t\tdistinctUntilChanged(),\r\n\t\t\t\t// Switch to the extensions registry to get the current language and the extensions for that language\r\n\t\t\t\t// Note: This also cancels the previous subscription if the language changes\r\n\t\t\t\tswitchMap((currentLanguage) => {\r\n\t\t\t\t\treturn extensionRegistry.byType('localization').pipe(\r\n\t\t\t\t\t\t// Filter the extensions to only those that match the current language\r\n\t\t\t\t\t\tmap((extensions) => {\r\n\t\t\t\t\t\t\tlocale = new Intl.Locale(currentLanguage);\r\n\t\t\t\t\t\t\treturn extensions.filter(\r\n\t\t\t\t\t\t\t\t(ext) =>\r\n\t\t\t\t\t\t\t\t\text.meta.culture.toLowerCase() === locale!.baseName.toLowerCase() ||\r\n\t\t\t\t\t\t\t\t\text.meta.culture.toLowerCase() === locale!.language.toLowerCase(),\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t);\r\n\t\t\t\t}),\r\n\t\t\t\t// Ensure we only process extensions that are registered\r\n\t\t\t\tfilter((extensions) => extensions.length > 0),\r\n\t\t\t\t// Ensure we only process extensions that have not been loaded before\r\n\t\t\t\tdistinctUntilChanged((prev, curr) => {\r\n\t\t\t\t\tconst prevAliases = prev.map((ext) => ext.alias).sort();\r\n\t\t\t\t\tconst currAliases = curr.map((ext) => ext.alias).sort();\r\n\t\t\t\t\treturn this.#arraysEqual(prevAliases, currAliases);\r\n\t\t\t\t}),\r\n\t\t\t\t// With switchMap, if a new language is selected before the previous translations finish loading,\r\n\t\t\t\t// the previous promise is canceled (unsubscribed), and only the latest one is processed.\r\n\t\t\t\t// This prevents race conditions and stale state.\r\n\t\t\t\tswitchMap((extensions) =>\r\n\t\t\t\t\tfrom(\r\n\t\t\t\t\t\t(async () => {\r\n\t\t\t\t\t\t\t// Load all localizations\r\n\t\t\t\t\t\t\tconst translations = await Promise.all(extensions.map(this.#loadExtension));\r\n\r\n\t\t\t\t\t\t\t// If there are no translations, return early\r\n\t\t\t\t\t\t\tif (!translations.length) return;\r\n\r\n\t\t\t\t\t\t\t// Sort translations by their original extension weight (highest-to-lowest)\r\n\t\t\t\t\t\t\t// This ensures that the translations with the lowest weight override the others\r\n\t\t\t\t\t\t\ttranslations.sort((a, b) => b.$weight - a.$weight);\r\n\r\n\t\t\t\t\t\t\t// Load the translations into the localization manager\r\n\t\t\t\t\t\t\tumbLocalizationManager.registerManyLocalizations(translations);\r\n\r\n\t\t\t\t\t\t\t// Set the browser language and direction based on the translations\r\n\t\t\t\t\t\t\tthis.#setBrowserLanguage(locale!, translations);\r\n\t\t\t\t\t\t})(),\r\n\t\t\t\t\t),\r\n\t\t\t\t),\r\n\t\t\t\t// Catch any errors that occur while loading the translations\r\n\t\t\t\t// This is important to ensure that the observable does not error out and stop the subscription\r\n\t\t\t\tcatchError((error) => {\r\n\t\t\t\t\tconsole.error('Error loading translations:', error);\r\n\t\t\t\t\treturn of([]);\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t\t// Subscribe to the observable to trigger the loading of translations\r\n\t\t\t.subscribe();\r\n\t}\r\n\r\n\t#loadExtension = async (extension: ManifestLocalization) => {\r\n\t\tconst innerDictionary: UmbLocalizationFlatDictionary = {};\r\n\r\n\t\t// If extension contains a dictionary, add it to the inner dictionary.\r\n\t\tif (extension.meta.localizations) {\r\n\t\t\tfor (const [dictionaryName, dictionary] of Object.entries(extension.meta.localizations)) {\r\n\t\t\t\taddOrUpdateDictionary(innerDictionary, dictionaryName, dictionary);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If extension contains a js file, load it and add the default dictionary to the inner dictionary.\r\n\t\tif (extension.js) {\r\n\t\t\tconst loadedExtension = await loadManifestPlainJs(extension.js);\r\n\r\n\t\t\tif (loadedExtension && hasDefaultExport<UmbLocalizationDictionary>(loadedExtension)) {\r\n\t\t\t\tfor (const [dictionaryName, dictionary] of Object.entries(loadedExtension.default)) {\r\n\t\t\t\t\taddOrUpdateDictionary(innerDictionary, dictionaryName, dictionary);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Notify subscribers that the inner dictionary has changed.\r\n\t\treturn {\r\n\t\t\t$code: extension.meta.culture.toLowerCase(),\r\n\t\t\t$dir: extension.meta.direction ?? 'ltr',\r\n\t\t\t$weight: extension.weight ?? 100,\r\n\t\t\t...innerDictionary,\r\n\t\t} satisfies UmbLocalizationSetBase & { $weight: number };\r\n\t};\r\n\r\n\t#setBrowserLanguage(locale: Intl.Locale, translations: UmbLocalizationSetBase[]) {\r\n\t\t// Set the document language\r\n\t\tconst newLang = locale.baseName.toLowerCase();\r\n\t\tif (document.documentElement.lang.toLowerCase() !== newLang) {\r\n\t\t\tdocument.documentElement.lang = newLang;\r\n\t\t}\r\n\r\n\t\t// We need to find the direction of the new language, so we look for the best match\r\n\t\t// If the new language is not found, we default to 'ltr'\r\n\t\tconst reverseTranslations = translations.slice().reverse();\r\n\r\n\t\t// Look for a direct match first\r\n\t\tconst directMatch = reverseTranslations.find((t) => t.$code.toLowerCase() === newLang);\r\n\t\tif (directMatch) {\r\n\t\t\tdocument.documentElement.dir = directMatch.$dir;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If no direct match, look for a match with the language code only\r\n\t\tconst langOnlyDirectMatch = reverseTranslations.find(\r\n\t\t\t(t) => t.$code.toLowerCase() === locale.language.toLowerCase(),\r\n\t\t);\r\n\t\tif (langOnlyDirectMatch) {\r\n\t\t\tdocument.documentElement.dir = langOnlyDirectMatch.$dir;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If no match is found, default to 'ltr'\r\n\t\tif (document.documentElement.dir !== 'ltr') {\r\n\t\t\tdocument.documentElement.dir = 'ltr';\r\n\t\t}\r\n\t}\r\n\r\n\t#arraysEqual(a: string[], b: string[]) {\r\n\t\tif (a.length !== b.length) return false;\r\n\t\tfor (let i = 0; i < a.length; i++) {\r\n\t\t\tif (a[i] !== b[i]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Load a language from the extension registry.\r\n\t * @param {string} locale The locale to load.\r\n\t */\r\n\tloadLanguage(locale: string) {\r\n\t\tconst canonicalLocale = Intl.getCanonicalLocales(locale)[0];\r\n\t\tthis.#currentLanguage.setValue(canonicalLocale);\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.#subscription.unsubscribe();\r\n\t}\r\n}\r\n\r\nexport const umbLocalizationRegistry = new UmbLocalizationRegistry(umbExtensionsRegistry);\r\n","import { customElement, html, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\nimport { UMB_DEFAULT_LOCALIZATION_CULTURE } from '@umbraco-cms/backoffice/localization-api';\r\nimport type { PropertyValues } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UUISelectEvent } from '@umbraco-cms/backoffice/external/uui';\r\n\r\ninterface UmbCultureInputOption {\r\n\tname: string;\r\n\tvalue: string;\r\n}\r\n\r\n@customElement('umb-ui-culture-input')\r\nexport class UmbUiCultureInputElement extends UmbFormControlMixin<string, typeof UmbLitElement, undefined>(\r\n\tUmbLitElement,\r\n) {\r\n\t#invalidCulture?: string;\r\n\t#invalidBaseCulture?: string;\r\n\r\n\t@state()\r\n\tprivate _options: Array<UmbCultureInputOption> = [];\r\n\r\n\t@property({ type: String })\r\n\toverride set value(value: string | undefined) {\r\n\t\tif (value && typeof value === 'string') {\r\n\t\t\tconst oldValue = super.value;\r\n\t\t\tsuper.value = value.toLowerCase();\r\n\t\t\tthis.requestUpdate('value', oldValue);\r\n\t\t}\r\n\t}\r\n\toverride get value(): string | undefined {\r\n\t\treturn super.value;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.observe(\r\n\t\t\tumbExtensionsRegistry.byType('localization'),\r\n\t\t\t(manifests) => {\r\n\t\t\t\tconst options = manifests\r\n\t\t\t\t\t.filter((manifest) => !!manifest.meta.culture)\r\n\t\t\t\t\t.map((manifest) => {\r\n\t\t\t\t\t\tconst culture = manifest.meta.culture.toLowerCase();\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tname: this.localize.term(`uiCulture_${culture}`),\r\n\t\t\t\t\t\t\tvalue: culture,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tconst distinct = [...new Map(options.map((item) => [item.value, item])).values()];\r\n\r\n\t\t\t\tthis._options = distinct.sort((a, b) => a.name.localeCompare(b.name));\r\n\t\t\t},\r\n\t\t\t'umbObserveLocalizationManifests',\r\n\t\t);\r\n\r\n\t\tthis.addValidator(\r\n\t\t\t'customError',\r\n\t\t\t() => this.localize.term('user_languageNotFound', this.#invalidCulture, this.value),\r\n\t\t\t() => !!this.#invalidCulture && !this.#invalidBaseCulture,\r\n\t\t);\r\n\r\n\t\tthis.addValidator(\r\n\t\t\t'customError',\r\n\t\t\t() => this.localize.term('user_languageNotFoundFallback', this.#invalidCulture, this.#invalidBaseCulture),\r\n\t\t\t() => !!this.#invalidCulture && !!this.#invalidBaseCulture,\r\n\t\t);\r\n\t}\r\n\r\n\tprotected override firstUpdated(_changedProperties: PropertyValues): void {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\r\n\t\tif (this.value) {\r\n\t\t\t// Check if the culture can be found.\r\n\t\t\tconst found = this._options.find((option) => option.value === this.value);\r\n\t\t\tif (!found) {\r\n\t\t\t\tthis.#invalidCulture = this.value;\r\n\r\n\t\t\t\t// if not found, check for the base culture\r\n\t\t\t\tconst locale = new Intl.Locale(this.value);\r\n\t\t\t\tif (locale.language) {\r\n\t\t\t\t\tconst foundBase = this._options.find((option) => option.value === locale.language);\r\n\t\t\t\t\tif (foundBase) {\r\n\t\t\t\t\t\tthis.value = locale.language;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// if the base culture is not found, set the value to \"en\"\r\n\t\t\t\t\t\tthis.#invalidBaseCulture = locale.language;\r\n\t\t\t\t\t\tthis.value = UMB_DEFAULT_LOCALIZATION_CULTURE;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if the base culture is not found, set the value to \"en\"\r\n\t\t\t\t\tthis.value = UMB_DEFAULT_LOCALIZATION_CULTURE;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.addFormControlElement(this.shadowRoot!.querySelector('uui-select')!);\r\n\t\tthis.checkValidity();\r\n\t}\r\n\r\n\t#onCustomValidationChange(event: UUISelectEvent) {\r\n\t\tthis.#invalidCulture = undefined;\r\n\t\tthis.#invalidBaseCulture = undefined;\r\n\t\tthis.value = event.target.value.toString();\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<uui-select\r\n\t\t\t\t.options=${this._options.map((e) => ({ ...e, selected: e.value == this.value }))}\r\n\t\t\t\t@change=${this.#onCustomValidationChange}>\r\n\t\t\t</uui-select>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport default UmbUiCultureInputElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-ui-culture-input': UmbUiCultureInputElement;\r\n\t}\r\n}\r\n"],"names":["UmbLocalizeElement","UmbLitElement","escapedArgs","a","escapeHTML","localizedValue","when","text","unsafeHTML","html","css","__decorateClass","property","state","customElement","_UmbLocalizeDateElement_instances","setTitle_fn","UmbLocalizeDateElement","__privateAdd","__privateMethod","nothing","title","now","d","duration","UmbLocalizeNumberElement","UmbLocalizeRelativeTimeElement","addOrUpdateDictionary","innerDictionary","dictionaryName","dictionary","key","value","UmbLocalizationRegistry","extensionRegistry","#currentLanguage","UmbStringState","UMB_DEFAULT_LOCALIZATION_CULTURE","#loadExtension","extension","loadedExtension","loadManifestPlainJs","hasDefaultExport","locale","#subscription","filter","currentLanguage","distinctUntilChanged","switchMap","map","extensions","ext","prev","curr","prevAliases","currAliases","#arraysEqual","from","translations","b","umbLocalizationManager","#setBrowserLanguage","catchError","error","of","newLang","reverseTranslations","directMatch","t","langOnlyDirectMatch","i","canonicalLocale","umbLocalizationRegistry","umbExtensionsRegistry","_invalidCulture","_invalidBaseCulture","_UmbUiCultureInputElement_instances","onCustomValidationChange_fn","UmbUiCultureInputElement","UmbFormControlMixin","manifests","options","manifest","culture","distinct","item","__privateGet","oldValue","_changedProperties","option","__privateSet","e","event","UmbChangeEvent"],"mappings":"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"}