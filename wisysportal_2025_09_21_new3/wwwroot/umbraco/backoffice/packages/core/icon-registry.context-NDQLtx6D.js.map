{"version":3,"file":"icon-registry.context-NDQLtx6D.js","sources":["../../../src/packages/core/icon-registry/icon.registry.ts","../../../src/packages/core/icon-registry/icon-registry.context.ts"],"sourcesContent":["import type { UmbIconDefinition, UmbIconModule } from './types.js';\r\nimport { loadManifestPlainJs } from '@umbraco-cms/backoffice/extension-api';\r\nimport { type UUIIconHost, UUIIconRegistry } from '@umbraco-cms/backoffice/external/uui';\r\n\r\n/**\r\n * @class UmbIconRegistry\r\n * @augments {UUIIconRegistry}\r\n * @description - Icon Registry. Provides icons from the icon manifest. Icons are loaded on demand. All icons are prefixed with 'icon-'\r\n */\r\nexport class UmbIconRegistry extends UUIIconRegistry {\r\n\t#initResolve?: () => void;\r\n\t#init: Promise<void> = new Promise((resolve) => {\r\n\t\tthis.#initResolve = resolve;\r\n\t});\r\n\r\n\t#icons: UmbIconDefinition[] = [];\r\n\t#unhandledProviders: Map<string, UUIIconHost> = new Map();\r\n\r\n\tsetIcons(icons: UmbIconDefinition[]) {\r\n\t\tconst oldIcons = this.#icons;\r\n\t\tthis.#icons = icons;\r\n\t\tif (this.#initResolve) {\r\n\t\t\tthis.#initResolve();\r\n\t\t\tthis.#initResolve = undefined;\r\n\t\t}\r\n\t\t// Go figure out which of the icons are new.\r\n\t\tconst newIcons = this.#icons.filter((i) => !oldIcons.find((o) => o.name === i.name));\r\n\t\tnewIcons.forEach((icon) => {\r\n\t\t\t// Do we already have a request for this one, then lets initiate the load for those:\r\n\t\t\tconst unhandled = this.#unhandledProviders.get(icon.name);\r\n\t\t\tif (unhandled) {\r\n\t\t\t\tthis.#loadIcon(icon.name, unhandled).then(() => {\r\n\t\t\t\t\tthis.#unhandledProviders.delete(icon.name);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tappendIcons(icons: UmbIconDefinition[]) {\r\n\t\tthis.#icons = [...this.#icons, ...icons];\r\n\t}\r\n\t/**\r\n\t * @param {string} iconName\r\n\t * @returns {*}  {boolean}\r\n\t * @memberof UmbIconStore\r\n\t */\r\n\toverride acceptIcon(iconName: string): boolean {\r\n\t\tconst iconProvider = this.provideIcon(iconName);\r\n\t\tthis.#loadIcon(iconName, iconProvider);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync #loadIcon(iconName: string, iconProvider: UUIIconHost): Promise<boolean> {\r\n\t\tawait this.#init;\r\n\t\tconst iconManifest = this.#icons.find((i: UmbIconDefinition) => i.name === iconName);\r\n\t\t// Icon not found, so lets add it to a list of unhandled requests.\r\n\t\tif (!iconManifest) {\r\n\t\t\tthis.#unhandledProviders.set(iconName, iconProvider);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst iconModule = await loadManifestPlainJs<UmbIconModule>(iconManifest.path);\r\n\t\t\tif (!iconModule) throw new Error(`Failed to load icon ${iconName}`);\r\n\t\t\tif (!iconModule.default) throw new Error(`Icon ${iconName} is missing a default export`);\r\n\t\t\ticonProvider.svg = iconModule.default;\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(`Failed to load icon ${iconName}`, error.message);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n","import { UmbIconRegistry } from './icon.registry.js';\r\nimport type { ManifestIcons, UmbIconDefinition } from './types.js';\r\nimport { UMB_ICON_REGISTRY_CONTEXT } from './icon-registry.context-token.js';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { loadManifestPlainJs } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class UmbIconRegistryContext extends UmbContextBase {\r\n\t#registry: UmbIconRegistry;\r\n\t#manifestMap = new Map();\r\n\t#icons = new UmbArrayState<UmbIconDefinition>([], (x) => x.name);\r\n\treadonly icons = this.#icons.asObservable();\r\n\treadonly approvedIcons = this.#icons.asObservablePart((icons) => icons.filter((x) => x.hidden !== true));\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_ICON_REGISTRY_CONTEXT);\r\n\t\tthis.#registry = new UmbIconRegistry();\r\n\t\tthis.#registry.attach(host.getHostElement());\r\n\r\n\t\tthis.observe(this.icons, (icons) => {\r\n\t\t\t//if (icons.length > 0) {\r\n\t\t\tthis.#registry.setIcons(icons);\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tthis.observe(umbExtensionsRegistry.byType('icons'), (manifests) => {\r\n\t\t\tmanifests.forEach((manifest) => {\r\n\t\t\t\tif (this.#manifestMap.has(manifest.alias)) return;\r\n\t\t\t\tthis.#manifestMap.set(manifest.alias, manifest);\r\n\t\t\t\t// TODO: Should we unInit a entry point if is removed?\r\n\t\t\t\tthis.instantiateIcons(manifest);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tasync instantiateIcons(manifest: ManifestIcons) {\r\n\t\tif (manifest.js) {\r\n\t\t\tconst js = await loadManifestPlainJs<{ default?: any }>(manifest.js);\r\n\t\t\tif (!js || !js.default || !Array.isArray(js.default)) {\r\n\t\t\t\tthrow new Error('Icon manifest JS-file must export an array of icons as the default export.');\r\n\t\t\t}\r\n\t\t\tthis.#icons.append(js.default);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport { UmbIconRegistryContext as api };\r\n"],"names":["UmbIconRegistry","UUIIconRegistry","#initResolve","#init","resolve","#icons","#unhandledProviders","icons","oldIcons","i","icon","unhandled","#loadIcon","iconName","iconProvider","iconManifest","iconModule","loadManifestPlainJs","error","UmbIconRegistryContext","UmbContextBase","host","UMB_ICON_REGISTRY_CONTEXT","#manifestMap","UmbArrayState","x","#registry","umbExtensionsRegistry","manifests","manifest","js"],"mappings":"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"}