{"version":3,"file":"index.js","sources":["../../../../src/packages/core/workspace/components/workspace-action-menu-item/workspace-action-menu-item-base.controller.ts","../../../../src/packages/core/workspace/components/workspace-action/workspace-action-base.controller.ts","../../../../src/packages/core/workspace/components/workspace-action/common/save/save.action.ts","../../../../src/packages/core/workspace/components/workspace-action/common/submit/submit.action.ts","../../../../src/packages/core/workspace/namable/name-write-guard.manager.ts","../../../../src/packages/core/workspace/controllers/workspace-route-manager.controller.ts","../../../../src/packages/core/workspace/submittable/submittable-workspace-context-base.ts","../../../../src/packages/core/workspace/entity/entity-workspace-data-manager.ts","../../../../src/packages/core/workspace/entity-detail/entity-detail-workspace-base.ts","../../../../src/packages/core/workspace/entity-detail/entity-named-detail-workspace-base.ts","../../../../src/packages/core/workspace/controllers/workspace-is-new-redirect.controller.ts","../../../../src/packages/core/workspace/controllers/workspace-split-view-manager.controller.ts","../../../../src/packages/core/workspace/utils/object-to-property-value-array.function.ts","../../../../src/packages/core/workspace/workspace-property-dataset/invariant-workspace-property-dataset-context.ts"],"sourcesContent":["import type { UmbWorkspaceActionMenuItemArgs } from './types.js';\r\nimport type { UmbWorkspaceActionMenuItem } from './workspace-action-menu-item.interface.js';\r\nimport { UmbActionBase } from '@umbraco-cms/backoffice/action';\r\n\r\n/**\r\n * Base class for an workspace action.\r\n * @abstract\r\n * @class UmbWorkspaceActionMenuItemBase\r\n * @augments {UmbActionBase}\r\n * @implements {UmbWorkspaceActionMenuItem}\r\n * @template RepositoryType\r\n */\r\nexport abstract class UmbWorkspaceActionMenuItemBase<ArgsMetaType = never>\r\n\textends UmbActionBase<UmbWorkspaceActionMenuItemArgs<ArgsMetaType>>\r\n\timplements UmbWorkspaceActionMenuItem<ArgsMetaType>\r\n{\r\n\t/**\r\n\t * By specifying the href, the action will act as a link.\r\n\t * The `execute` method will not be called.\r\n\t * @abstract\r\n\t * @returns {string | undefined}\r\n\t */\r\n\tpublic getHref(): Promise<string | undefined> {\r\n\t\treturn Promise.resolve(undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * By specifying the `execute` method, the action will act as a button.\r\n\t * @abstract\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tpublic execute(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n}\r\n","import type { UmbWorkspaceActionArgs } from './types.js';\r\nimport type { UmbWorkspaceAction } from './workspace-action.interface.js';\r\nimport { UmbBooleanState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbActionBase } from '@umbraco-cms/backoffice/action';\r\n\r\n/**\r\n * Base class for an workspace action.\r\n * @abstract\r\n * @class UmbWorkspaceActionBase\r\n * @augments {UmbActionBase}\r\n * @implements {UmbEntityAction}\r\n * @template RepositoryType\r\n */\r\nexport abstract class UmbWorkspaceActionBase<ArgsMetaType = never>\r\n\textends UmbActionBase<UmbWorkspaceActionArgs<ArgsMetaType>>\r\n\timplements UmbWorkspaceAction<ArgsMetaType>\r\n{\r\n\tprotected _isDisabled = new UmbBooleanState(false);\r\n\tpublic isDisabled = this._isDisabled.asObservable();\r\n\r\n\t/**\r\n\t * By specifying the href, the action will act as a link.\r\n\t * The `execute` method will not be called.\r\n\t * @abstract\r\n\t * @returns {string | undefined}\r\n\t */\r\n\tpublic getHref(): Promise<string | undefined> {\r\n\t\treturn Promise.resolve(undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * By specifying the `execute` method, the action will act as a button.\r\n\t * @abstract\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tpublic execute(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * Disables the action.\r\n\t * @memberof UmbWorkspaceActionBase\r\n\t */\r\n\tpublic disable(): void {\r\n\t\tthis._isDisabled.setValue(true);\r\n\t}\r\n\r\n\t/**\r\n\t * Enables the action.\r\n\t * @memberof UmbWorkspaceActionBase\r\n\t */\r\n\tpublic enable(): void {\r\n\t\tthis._isDisabled.setValue(false);\r\n\t}\r\n}\r\n","import type { MetaWorkspaceAction } from '../../../../types.js';\r\nimport { UMB_SAVEABLE_WORKSPACE_CONTEXT } from '../../../../contexts/tokens/index.js';\r\nimport type { UmbSaveableWorkspaceContext } from '../../../../contexts/tokens/index.js';\r\nimport { UmbWorkspaceActionBase } from '../../workspace-action-base.controller.js';\r\nimport type { UmbSaveWorkspaceActionArgs } from './types.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbSaveWorkspaceAction<\r\n\tArgsMetaType extends MetaWorkspaceAction = MetaWorkspaceAction,\r\n\tWorkspaceContextType extends UmbSaveableWorkspaceContext = UmbSaveableWorkspaceContext,\r\n> extends UmbWorkspaceActionBase<ArgsMetaType> {\r\n\tprotected _retrieveWorkspaceContext: Promise<unknown>;\r\n\tprotected _workspaceContext?: WorkspaceContextType;\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbSaveWorkspaceActionArgs<ArgsMetaType, WorkspaceContextType>) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis._retrieveWorkspaceContext = this.consumeContext(\r\n\t\t\targs.workspaceContextToken ?? UMB_SAVEABLE_WORKSPACE_CONTEXT,\r\n\t\t\t(context) => {\r\n\t\t\t\tthis._workspaceContext = context as WorkspaceContextType | undefined;\r\n\t\t\t\tthis.#observeUnique();\r\n\t\t\t\tthis._gotWorkspaceContext();\r\n\t\t\t},\r\n\t\t)\r\n\t\t\t.asPromise()\r\n\t\t\t.catch(() => undefined);\r\n\t}\r\n\r\n\t#observeUnique() {\r\n\t\tthis.observe(\r\n\t\t\tthis._workspaceContext?.unique,\r\n\t\t\t(unique) => {\r\n\t\t\t\t// We can't save if we don't have a unique\r\n\t\t\t\tif (unique === undefined) {\r\n\t\t\t\t\tthis.disable();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Dangerous, cause this could enable despite a class extension decided to disable it?. [NL]\r\n\t\t\t\t\tthis.enable();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'saveWorkspaceActionUniqueObserver',\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _gotWorkspaceContext() {\r\n\t\t// Override in subclass\r\n\t}\r\n\r\n\toverride async execute() {\r\n\t\tawait this._retrieveWorkspaceContext;\r\n\t\treturn await this._workspaceContext?.requestSave();\r\n\t}\r\n}\r\n","import type { MetaWorkspaceAction } from '../../../../types.js';\r\nimport { UMB_SUBMITTABLE_WORKSPACE_CONTEXT } from '../../../../contexts/tokens/index.js';\r\nimport type { UmbSubmittableWorkspaceContext } from '../../../../contexts/tokens/index.js';\r\nimport { UmbWorkspaceActionBase } from '../../workspace-action-base.controller.js';\r\nimport type { UmbSubmitWorkspaceActionArgs } from './types.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbSubmitWorkspaceAction<\r\n\tArgsMetaType extends MetaWorkspaceAction = MetaWorkspaceAction,\r\n\tWorkspaceContextType extends UmbSubmittableWorkspaceContext = UmbSubmittableWorkspaceContext,\r\n> extends UmbWorkspaceActionBase<ArgsMetaType> {\r\n\tprotected _retrieveWorkspaceContext: Promise<unknown>;\r\n\tprotected _workspaceContext?: WorkspaceContextType;\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbSubmitWorkspaceActionArgs<ArgsMetaType>) {\r\n\t\tsuper(host, args);\r\n\r\n\t\t// TODO: Could we make change label depending on the state? [NL]\r\n\t\tthis._retrieveWorkspaceContext = this.consumeContext(\r\n\t\t\targs.workspaceContextToken ?? UMB_SUBMITTABLE_WORKSPACE_CONTEXT,\r\n\t\t\t(context) => {\r\n\t\t\t\tthis._workspaceContext = context as WorkspaceContextType;\r\n\t\t\t\tthis.#observeUnique();\r\n\t\t\t\tthis._gotWorkspaceContext();\r\n\t\t\t},\r\n\t\t).asPromise();\r\n\t}\r\n\r\n\t#observeUnique() {\r\n\t\tthis.observe(\r\n\t\t\tthis._workspaceContext?.unique,\r\n\t\t\t(unique) => {\r\n\t\t\t\t// We can't save if we don't have a unique\r\n\t\t\t\tif (unique === undefined) {\r\n\t\t\t\t\tthis.disable();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Dangerous, cause this could enable despite a class extension decided to disable it?. [NL]\r\n\t\t\t\t\tthis.enable();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'saveWorkspaceActionUniqueObserver',\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _gotWorkspaceContext() {\r\n\t\t// Override in subclass\r\n\t}\r\n\r\n\toverride async execute() {\r\n\t\tawait this._retrieveWorkspaceContext;\r\n\t\treturn await this._workspaceContext!.requestSubmit();\r\n\t}\r\n}\r\n","import type { Observable } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport { UmbGuardManagerBase, type UmbGuardRule } from '@umbraco-cms/backoffice/utils';\r\n\r\nexport class UmbNameWriteGuardManager extends UmbGuardManagerBase {\r\n\tpublic isPermittedForName(): Observable<boolean> {\r\n\t\treturn this._rules.asObservablePart((rules) => this.#resolvePermission(rules));\r\n\t}\r\n\r\n\t#resolvePermission(rules: Array<UmbGuardRule>): boolean {\r\n\t\tif (rules.some((rule) => rule.permitted === false)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (rules.some((rule) => rule.permitted === true)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn this._fallback;\r\n\t}\r\n}\r\n","import { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbArrayState, UmbStringState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { IComponentRoute, UmbRoute } from '@umbraco-cms/backoffice/router';\r\n\r\n/**\r\n * The workspace route manager.\r\n * @class UmbWorkspaceRouteManager\r\n * @augments {UmbControllerBase}\r\n */\r\nexport class UmbWorkspaceRouteManager extends UmbControllerBase {\r\n\t//\r\n\t#routes = new UmbArrayState<UmbRoute>([], (x) => x.path);\r\n\tpublic readonly routes = this.#routes.asObservable();\r\n\r\n\t#activeLocalPath = new UmbStringState('');\r\n\r\n\t/**\r\n\t * Set the routes for the workspace.\r\n\t * @param {Array<UmbRoute>} routes The routes for the workspace.\r\n\t * @memberof UmbWorkspaceRouteManager\r\n\t */\r\n\tsetRoutes(routes: Array<UmbRoute>) {\r\n\t\tconst allRoutes = [...routes] as Array<IComponentRoute>;\r\n\r\n\t\tif (routes.length > 0) {\r\n\t\t\tallRoutes.push({\r\n\t\t\t\tpath: `**`,\r\n\t\t\t\tcomponent: async () => (await import('@umbraco-cms/backoffice/router')).UmbRouteNotFoundElement,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst mappedRoutes = allRoutes.map((route) => {\r\n\t\t\t// override the setup method to set the active local path\r\n\t\t\tconst oldSetupCallback = route.setup;\r\n\r\n\t\t\troute.setup = (_component: any, info: any) => {\r\n\t\t\t\tthis.#activeLocalPath.setValue(info.match.fragments.consumed);\r\n\r\n\t\t\t\tif (oldSetupCallback) {\r\n\t\t\t\t\toldSetupCallback(_component, info);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\treturn route;\r\n\t\t});\r\n\r\n\t\tthis.#routes.setValue([...mappedRoutes]);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the routes for the workspace.\r\n\t * @returns {Array<UmbRoute>} The routes for the workspace.\r\n\t * @memberof UmbWorkspaceRouteManager\r\n\t */\r\n\tgetRoutes(): Array<UmbRoute> {\r\n\t\treturn this.#routes.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the active local path.\r\n\t * @returns {*}  {string}\r\n\t * @memberof UmbWorkspaceRouteManager\r\n\t */\r\n\tgetActiveLocalPath(): string {\r\n\t\treturn this.#activeLocalPath.getValue();\r\n\t}\r\n}\r\n","import { UmbWorkspaceRouteManager } from '../controllers/workspace-route-manager.controller.js';\r\nimport { UMB_WORKSPACE_CONTEXT } from '../workspace.context-token.js';\r\nimport type { UmbSubmittableWorkspaceContext } from '../contexts/tokens/submittable-workspace-context.interface.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbBooleanState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbModalContext } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_MODAL_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport type { Observable } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport type { UmbValidationController } from '@umbraco-cms/backoffice/validation';\r\n\r\nexport abstract class UmbSubmittableWorkspaceContextBase<WorkspaceDataModelType>\r\n\textends UmbContextBase\r\n\timplements UmbSubmittableWorkspaceContext\r\n{\r\n\tpublic readonly workspaceAlias: string;\r\n\r\n\t// TODO: We could make a base type for workspace modal data, and use this here: As well as a base for the result, to make sure we always include the unique (instead of the object type)\r\n\tpublic readonly modalContext?: UmbModalContext<{ preset: object }>;\r\n\r\n\t#validationContexts: Array<UmbValidationController> = [];\r\n\r\n\t/**\r\n\t * Appends a validation context to the workspace.\r\n\t * @param context\r\n\t */\r\n\taddValidationContext(context: UmbValidationController) {\r\n\t\tthis.#validationContexts.push(context);\r\n\t}\r\n\r\n\t#submitPromise: Promise<void> | undefined;\r\n\t#submitResolve: (() => void) | undefined;\r\n\t#submitReject: ((reason?: any) => void) | undefined;\r\n\r\n\tabstract readonly unique: Observable<string | null | undefined>;\r\n\r\n\t#isNew = new UmbBooleanState(undefined);\r\n\tisNew = this.#isNew.asObservable();\r\n\r\n\treadonly routes = new UmbWorkspaceRouteManager(this);\r\n\r\n\t/*\r\n\t\tConcept notes: [NL]\r\n\t\tConsiderations are, if we bring a dirty state (observable) we need to maintain it all the time.\r\n\t\tThis might be too heavy process, so we might want to consider just having a get dirty state method.\r\n\t*/\r\n\t//#isDirty = new UmbBooleanState(undefined);\r\n\t//isDirty = this.#isNew.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost, workspaceAlias: string) {\r\n\t\tsuper(host, UMB_WORKSPACE_CONTEXT.toString());\r\n\t\tthis.workspaceAlias = workspaceAlias;\r\n\t\t// TODO: Consider if we can move this consumption to #resolveSubmit, just as a getContext, but it depends if others use the modalContext prop.. [NL]\r\n\t\tthis.consumeContext(UMB_MODAL_CONTEXT, (context) => {\r\n\t\t\t(this.modalContext as UmbModalContext | undefined) = context;\r\n\t\t});\r\n\t}\r\n\r\n\tprotected resetState() {\r\n\t\tthis.#validationContexts.forEach((context) => context.reset());\r\n\t\tthis.#isNew.setValue(undefined);\r\n\t}\r\n\r\n\tpublic getIsNew() {\r\n\t\treturn this.#isNew.getValue();\r\n\t}\r\n\r\n\tprotected setIsNew(isNew: boolean) {\r\n\t\tthis.#isNew.setValue(isNew);\r\n\t}\r\n\r\n\t/**\r\n\t * If a Workspace has multiple validation contexts, then this method can be overwritten to return the correct one.\r\n\t * @returns Promise that resolves to void when the validation is complete.\r\n\t */\r\n\tpublic async validate(): Promise<Array<void>> {\r\n\t\treturn await Promise.all(this.#validationContexts.map((context) => context.validate()));\r\n\t}\r\n\r\n\tpublic async requestSubmit(): Promise<void> {\r\n\t\treturn this.validateAndSubmit(\r\n\t\t\t() => this.submit(),\r\n\t\t\t(reason?: any) => this.invalidSubmit(reason),\r\n\t\t);\r\n\t}\r\n\r\n\tprotected async _validateAndLog(): Promise<void> {\r\n\t\tawait this.validate().catch(async () => {\r\n\t\t\t// TODO: Implement developer-mode logging here. [NL]\r\n\t\t\tconsole.warn(\r\n\t\t\t\t'Validation failed because of these validation messages still begin present: ',\r\n\t\t\t\tthis.#validationContexts.flatMap((x) => x.messages.getMessages()),\r\n\t\t\t);\r\n\t\t\treturn Promise.reject();\r\n\t\t});\r\n\t}\r\n\r\n\tpublic async validateAndSubmit(\r\n\t\tonValid: () => Promise<void>,\r\n\t\tonInvalid: (reason?: any) => Promise<void>,\r\n\t): Promise<void> {\r\n\t\tif (this.#submitPromise) {\r\n\t\t\treturn this.#submitPromise;\r\n\t\t}\r\n\t\tthis.#submitPromise = new Promise<void>((resolve, reject) => {\r\n\t\t\tthis.#submitResolve = resolve;\r\n\t\t\tthis.#submitReject = reject;\r\n\t\t});\r\n\t\tthis._validateAndLog().then(\r\n\t\t\tasync () => {\r\n\t\t\t\tonValid().then(this.#completeSubmit, this.#rejectSubmit);\r\n\t\t\t},\r\n\t\t\tasync (error) => {\r\n\t\t\t\tonInvalid(error).then(this.#resolveSubmit, this.#rejectSubmit);\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\treturn await this.#submitPromise;\r\n\t}\r\n\r\n\t#rejectSubmit = (error: any) => {\r\n\t\tif (this.#submitPromise) {\r\n\t\t\t// TODO: Capture the validation contexts messages on open, and then reset to them in this case. [NL]\r\n\r\n\t\t\tthis.#submitReject?.(error);\r\n\t\t\tthis.#submitPromise = undefined;\r\n\t\t\tthis.#submitResolve = undefined;\r\n\t\t\tthis.#submitReject = undefined;\r\n\t\t}\r\n\t};\r\n\r\n\t#resolveSubmit = () => {\r\n\t\t// Resolve the submit promise:\r\n\t\tthis.#submitResolve?.();\r\n\t\tthis.#submitPromise = undefined;\r\n\t\tthis.#submitResolve = undefined;\r\n\t\tthis.#submitReject = undefined;\r\n\t};\r\n\r\n\t#completeSubmit = () => {\r\n\t\tthis.#resolveSubmit();\r\n\r\n\t\t// Calling reset on the validation context here. [NL]\r\n\t\t// TODO: Capture the validation messages on open, and then reset to that.\r\n\t\t//this.validation.reset();\r\n\r\n\t\tthis._closeModal();\r\n\t};\r\n\r\n\tprotected _closeModal() {\r\n\t\tif (this.modalContext) {\r\n\t\t\tthis.modalContext?.setValue(this.getData());\r\n\t\t\tthis.modalContext?.submit();\r\n\t\t}\r\n\t}\r\n\r\n\t//abstract getIsDirty(): Promise<boolean>;\r\n\tabstract getUnique(): string | null | undefined;\r\n\tabstract getEntityType(): string;\r\n\tabstract getData(): WorkspaceDataModelType | undefined;\r\n\tprotected abstract submit(): Promise<void>;\r\n\tprotected invalidSubmit(reason?: any): Promise<void> {\r\n\t\treturn Promise.reject(reason);\r\n\t}\r\n\r\n\toverride destroy(): void {\r\n\t\tthis.#isNew.destroy();\r\n\t\tthis.routes.destroy();\r\n\t\tsuper.destroy();\r\n\t\tthis.#submitPromise = undefined;\r\n\t\tthis.#submitResolve = undefined;\r\n\t\tthis.#submitReject = undefined;\r\n\t\tthis.#validationContexts.forEach((context) => context.destroy());\r\n\t\tthis.#validationContexts = [];\r\n\t}\r\n}\r\n\r\n/*\r\n * @deprecated Use UmbSubmittableWorkspaceContextBase instead — Will be removed before RC.\r\n * Rename `save` to `submit` and return a promise that resolves to true when save is complete.\r\n * TODO: Delete before RC.\r\n */\r\nexport abstract class UmbEditableWorkspaceContextBase<\r\n\tWorkspaceDataModelType,\r\n> extends UmbSubmittableWorkspaceContextBase<WorkspaceDataModelType> {}\r\n","import type { UmbWorkspaceDataManager } from '../data-manager/workspace-data-manager.interface.js';\r\nimport { jsonStringComparison, UmbObjectState, type MappingFunction } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\n\r\n/**\r\n * Manages the workspace data for an entity.\r\n * @class UmbEntityWorkspaceDataManager\r\n * @augments {UmbControllerBase}\r\n * @implements {UmbWorkspaceDataManager<ModelType>}\r\n * @template ModelType\r\n */\r\nexport class UmbEntityWorkspaceDataManager<ModelType>\r\n\textends UmbControllerBase\r\n\timplements UmbWorkspaceDataManager<ModelType>\r\n{\r\n\tprotected readonly _persisted = new UmbObjectState<ModelType | undefined>(undefined);\r\n\tprotected readonly _current = new UmbObjectState<ModelType | undefined>(undefined);\r\n\r\n\t/**\r\n\t * Observable of the persisted data\r\n\t * @memberof UmbEntityWorkspaceDataManager\r\n\t */\r\n\tpublic readonly persisted = this._persisted.asObservable();\r\n\r\n\t/**\r\n\t * Observable of the current data\r\n\t * @memberof UmbEntityWorkspaceDataManager\r\n\t */\r\n\tpublic readonly current = this._current.asObservable();\r\n\r\n\tprotected _sortCurrentData<GivenType extends Partial<ModelType> = Partial<ModelType>>(\r\n\t\tpersistedData: Partial<ModelType>,\r\n\t\tcurrentData: GivenType,\r\n\t): GivenType {\r\n\t\t// do nothing.\r\n\t\treturn currentData;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets persisted data\r\n\t * @returns {(ModelType | undefined)}\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tgetPersisted() {\r\n\t\treturn this._persisted.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the persisted data\r\n\t * @param {(ModelType | undefined)} data\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tsetPersisted(data: ModelType | undefined) {\r\n\t\tthis._persisted.setValue(data);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the persisted data\r\n\t * @param {Partial<ModelType>} partialData\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tupdatePersisted(partialData: Partial<ModelType>) {\r\n\t\tthis._persisted.update(partialData);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an observable part of the persisted data\r\n\t * @template ReturnType\r\n\t * @param {(MappingFunction<ModelType | undefined, ReturnType>)} mappingFunction\r\n\t * @returns {*}\r\n\t * @memberof UmbEntityWorkspaceDataManager\r\n\t */\r\n\tcreateObservablePartOfPersisted<ReturnType>(mappingFunction: MappingFunction<ModelType | undefined, ReturnType>) {\r\n\t\treturn this._persisted.asObservablePart(mappingFunction);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the current data\r\n\t * @returns {(ModelType | undefined)}\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tgetCurrent() {\r\n\t\treturn this._current.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current data\r\n\t * @param {(ModelType | undefined)} data\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tsetCurrent(data: ModelType | undefined) {\r\n\t\tif (data) {\r\n\t\t\tconst persistedData = this._persisted.getValue();\r\n\t\t\tif (persistedData) {\r\n\t\t\t\tdata = this._sortCurrentData(persistedData, data);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._current.setValue(data);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the current data\r\n\t * @param {Partial<ModelType>} partialData\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tupdateCurrent(partialData: Partial<ModelType>) {\r\n\t\tif (partialData) {\r\n\t\t\tconst persistedData = this._persisted.getValue();\r\n\t\t\tif (persistedData) {\r\n\t\t\t\tpartialData = this._sortCurrentData(persistedData, partialData);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._current.update(partialData);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an observable part of the current data\r\n\t * @template ReturnType\r\n\t * @param {(MappingFunction<ModelType | undefined, ReturnType>)} mappingFunction\r\n\t * @returns {*}\r\n\t * @memberof UmbEntityWorkspaceDataManager\r\n\t */\r\n\tcreateObservablePartOfCurrent<ReturnType>(mappingFunction: MappingFunction<ModelType | undefined, ReturnType>) {\r\n\t\treturn this._current.asObservablePart(mappingFunction);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there are unpersisted changes\r\n\t * @returns {*}\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tgetHasUnpersistedChanges() {\r\n\t\tconst persisted = this._persisted.getValue();\r\n\t\tconst current = this._current.getValue();\r\n\t\tconst result = jsonStringComparison(persisted, current) === false;\r\n\t\t// TODO: Implement developer-mode\r\n\t\tif (result) {\r\n\t\t\tconsole.warn('Changes detected based on JSON comparison between', persisted, 'and', current);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the current data to the persisted data\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tresetCurrent() {\r\n\t\tthis._current.setValue(this._persisted.getValue());\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the data\r\n\t * @memberof UmbSubmittableWorkspaceDataManager\r\n\t */\r\n\tclear() {\r\n\t\tthis._persisted.setValue(undefined);\r\n\t\tthis._current.setValue(undefined);\r\n\t}\r\n\r\n\toverride destroy() {\r\n\t\tthis._persisted?.destroy();\r\n\t\tthis._current?.destroy();\r\n\r\n\t\t(this._persisted as any) = undefined;\r\n\t\t(this._current as any) = undefined;\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n","import { UmbSubmittableWorkspaceContextBase } from '../submittable/index.js';\r\nimport { UmbEntityWorkspaceDataManager } from '../entity/entity-workspace-data-manager.js';\r\nimport type { UmbSubmittableTreeEntityWorkspaceContext } from '../contexts/tokens/index.js';\r\nimport type { UmbEntityDetailWorkspaceContextArgs, UmbEntityDetailWorkspaceContextCreateArgs } from './types.js';\r\nimport { UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbEntityContext, type UmbEntityModel, type UmbEntityUnique } from '@umbraco-cms/backoffice/entity';\r\nimport { UMB_DISCARD_CHANGES_MODAL, umbOpenModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport {\r\n\tUmbEntityUpdatedEvent,\r\n\tUmbRequestReloadChildrenOfEntityEvent,\r\n\tUmbRequestReloadStructureForEntityEvent,\r\n} from '@umbraco-cms/backoffice/entity-action';\r\nimport { UmbExtensionApiInitializer } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry, type ManifestRepository } from '@umbraco-cms/backoffice/extension-registry';\r\nimport type {\r\n\tUmbDetailRepository,\r\n\tUmbRepositoryResponse,\r\n\tUmbRepositoryResponseWithAsObservable,\r\n} from '@umbraco-cms/backoffice/repository';\r\nimport { UmbDeprecation, UmbStateManager } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbValidationContext } from '@umbraco-cms/backoffice/validation';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport { UmbApiError } from '@umbraco-cms/backoffice/resources';\r\n\r\nconst LOADING_STATE_UNIQUE = 'umbLoadingEntityDetail';\r\nconst FORBIDDEN_STATE_UNIQUE = 'umbForbiddenEntityDetail';\r\n\r\nexport abstract class UmbEntityDetailWorkspaceContextBase<\r\n\t\tDetailModelType extends UmbEntityModel = UmbEntityModel,\r\n\t\tDetailRepositoryType extends UmbDetailRepository<DetailModelType> = UmbDetailRepository<DetailModelType>,\r\n\t\tCreateArgsType extends\r\n\t\t\tUmbEntityDetailWorkspaceContextCreateArgs<DetailModelType> = UmbEntityDetailWorkspaceContextCreateArgs<DetailModelType>,\r\n\t>\r\n\textends UmbSubmittableWorkspaceContextBase<DetailModelType>\r\n\timplements UmbSubmittableTreeEntityWorkspaceContext\r\n{\r\n\t// Just for context token safety:\r\n\tpublic readonly IS_ENTITY_DETAIL_WORKSPACE_CONTEXT = true;\r\n\r\n\t/**\r\n\t * @description Data manager for the workspace.\r\n\t * @protected\r\n\t * @memberof UmbEntityWorkspaceContextBase\r\n\t */\r\n\tprotected readonly _data = new UmbEntityWorkspaceDataManager<DetailModelType>(this);\r\n\r\n\t#entityContext = new UmbEntityContext(this);\r\n\tpublic readonly entityType = this.#entityContext.entityType;\r\n\tpublic readonly unique = this.#entityContext.unique;\r\n\r\n\tpublic readonly data = this._data.current;\r\n\tpublic readonly persistedData = this._data.persisted;\r\n\tpublic readonly loading = new UmbStateManager(this);\r\n\tpublic readonly forbidden = new UmbStateManager(this);\r\n\r\n\tprotected _getDataPromise?: Promise<\r\n\t\tUmbRepositoryResponse<DetailModelType> | UmbRepositoryResponseWithAsObservable<DetailModelType>\r\n\t>;\r\n\tprotected _detailRepository?: DetailRepositoryType;\r\n\r\n\t#eventContext?: typeof UMB_ACTION_EVENT_CONTEXT.TYPE;\r\n\r\n\t#createUnderParent = new UmbObjectState<UmbEntityModel | undefined>(undefined);\r\n\t_internal_createUnderParent = this.#createUnderParent.asObservable();\r\n\r\n\tpublic readonly _internal_createUnderParentEntityUnique = this.#createUnderParent.asObservablePart((parent) =>\r\n\t\tparent ? parent.unique : undefined,\r\n\t);\r\n\r\n\tpublic readonly _internal_createUnderParentEntityType = this.#createUnderParent.asObservablePart((parent) =>\r\n\t\tparent ? parent.entityType : undefined,\r\n\t);\r\n\r\n\t/**\r\n\t * @deprecated Will be removed in v.18: Use UMB_PARENT_ENTITY_CONTEXT instead to get the parent both when creating and editing.\r\n\t */\r\n\tpublic readonly parentUnique = this.#createUnderParent.asObservablePart((parent) =>\r\n\t\tparent ? parent.unique : undefined,\r\n\t);\r\n\t/**\r\n\t * @deprecated Will be removed in v.18: Use UMB_PARENT_ENTITY_CONTEXT instead to get the parent both when creating and editing.\r\n\t */\r\n\tpublic readonly parentEntityType = this.#createUnderParent.asObservablePart((parent) =>\r\n\t\tparent ? parent.entityType : undefined,\r\n\t);\r\n\r\n\t/**\r\n\t * The base validation context for the workspace. This ensures that at least one validation context is always present.\r\n\t * @example You can manually validate all properties on the context:\r\n\t * ```ts\r\n\t * try {\r\n\t *   await this.validationContext.validate();\r\n\t * } catch (error) {\r\n\t *   console.error(error);\r\n\t * }\r\n\t * ```\r\n\t * @example You can set the data path on the context to map to a specific part of the server validation:\r\n\t * ```ts\r\n\t * this.validationContext.setDataPath('path.to.data');\r\n\t * ```\r\n\t */\r\n\tprotected validationContext = new UmbValidationContext(this);\r\n\r\n\t#initResolver?: () => void;\r\n\t#initialized = false;\r\n\r\n\t#init = new Promise<void>((resolve) => {\r\n\t\tif (this.#initialized) {\r\n\t\t\tresolve();\r\n\t\t} else {\r\n\t\t\tthis.#initResolver = resolve;\r\n\t\t}\r\n\t});\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbEntityDetailWorkspaceContextArgs) {\r\n\t\tsuper(host, args.workspaceAlias);\r\n\t\tthis.addValidationContext(this.validationContext);\r\n\t\tthis.#entityContext.setEntityType(args.entityType);\r\n\t\twindow.addEventListener('willchangestate', this.#onWillNavigate);\r\n\t\tthis.#observeRepository(args.detailRepositoryAlias);\r\n\r\n\t\tthis.consumeContext(UMB_ACTION_EVENT_CONTEXT, (context) => {\r\n\t\t\tthis.#eventContext = context;\r\n\r\n\t\t\tthis.#eventContext?.removeEventListener(\r\n\t\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t\t);\r\n\t\t\tthis.#eventContext?.addEventListener(\r\n\t\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Get the entity type\r\n\t * @returns { string } The entity type\r\n\t */\r\n\tgetEntityType(): string {\r\n\t\tconst entityType = this.#entityContext.getEntityType();\r\n\t\tif (!entityType) throw new Error('Entity type is not set');\r\n\t\treturn entityType;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current data\r\n\t * @returns { DetailModelType | undefined } The entity context\r\n\t */\r\n\tgetData(): DetailModelType | undefined {\r\n\t\treturn this._data.getCurrent();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the persisted data\r\n\t * @returns { DetailModelType | undefined } The persisted data\r\n\t */\r\n\tpublic getPersistedData(): DetailModelType | undefined {\r\n\t\treturn this._data.getPersisted();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the unique\r\n\t * @returns { string | undefined } The unique identifier\r\n\t */\r\n\tgetUnique(): UmbEntityUnique | undefined {\r\n\t\treturn this.#entityContext.getUnique();\r\n\t}\r\n\r\n\tsetUnique(unique: string) {\r\n\t\tthis.#entityContext.setUnique(unique);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the parent that a new entity will be created under.\r\n\t * @returns { UmbEntityModel | undefined } The parent entity\r\n\t */\r\n\t_internal_getCreateUnderParent(): UmbEntityModel | undefined {\r\n\t\treturn this.#createUnderParent.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the parent that a new entity will be created under.\r\n\t * @param {UmbEntityModel} parent The parent entity\r\n\t */\r\n\t_internal_setCreateUnderParent(parent: UmbEntityModel): void {\r\n\t\tthis.#createUnderParent.setValue(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the parent\r\n\t * @deprecated Will be removed in v.18: Use UMB_PARENT_ENTITY_CONTEXT instead to get the parent both when creating and editing.\r\n\t * @returns { UmbEntityModel | undefined } The parent entity\r\n\t */\r\n\tgetParent(): UmbEntityModel | undefined {\r\n\t\treturn this.#createUnderParent.getValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Set the parent\r\n\t * @deprecated Will be removed in v.18.\r\n\t * @param { UmbEntityModel } parent The parent entity\r\n\t */\r\n\tsetParent(parent: UmbEntityModel) {\r\n\t\tthis.#createUnderParent.setValue(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the parent unique\r\n\t * @deprecated Will be removed in v.18: Use UMB_PARENT_ENTITY_CONTEXT instead to get the parent both when creating and editing.\r\n\t * @returns { string | undefined } The parent unique identifier\r\n\t */\r\n\tgetParentUnique(): UmbEntityUnique | undefined {\r\n\t\treturn this.#createUnderParent.getValue()?.unique;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the parent entity type\r\n\t * @deprecated Will be removed in v.18\r\n\t * @returns { string | undefined } The parent entity type\r\n\t */\r\n\tgetParentEntityType() {\r\n\t\treturn this.#createUnderParent.getValue()?.entityType;\r\n\t}\r\n\r\n\tasync load(\r\n\t\tunique: string,\r\n\t): Promise<UmbRepositoryResponse<DetailModelType> | UmbRepositoryResponseWithAsObservable<DetailModelType>> {\r\n\t\tif (unique === this.getUnique() && this._getDataPromise) {\r\n\t\t\treturn await this._getDataPromise;\r\n\t\t}\r\n\t\tthis.resetState();\r\n\t\tthis.setIsNew(false);\r\n\t\tthis.#entityContext.setUnique(unique);\r\n\t\tthis.loading.addState({ unique: LOADING_STATE_UNIQUE, message: `Loading ${this.getEntityType()} Details` });\r\n\t\tawait this.#init;\r\n\t\tthis._getDataPromise = this._detailRepository!.requestByUnique(unique);\r\n\t\tconst response = (await this._getDataPromise) as UmbRepositoryResponseWithAsObservable<DetailModelType>;\r\n\t\tconst { data, error, asObservable } = response;\r\n\r\n\t\tif (error) {\r\n\t\t\tthis.removeUmbControllerByAlias('umbEntityDetailTypeStoreObserver');\r\n\t\t\tif (UmbApiError.isUmbApiError(error)) {\r\n\t\t\t\tif (error.status === 401 || error.status === 403) {\r\n\t\t\t\t\tthis.forbidden.addState({ unique: FORBIDDEN_STATE_UNIQUE, message: error.message });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (data) {\r\n\t\t\tthis._data.setPersisted(data);\r\n\t\t\tthis._data.setCurrent(data);\r\n\r\n\t\t\tthis.observe(asObservable?.(), (entity) => this.#onDetailStoreChange(entity), 'umbEntityDetailTypeStoreObserver');\r\n\t\t}\r\n\r\n\t\tthis.loading.removeState(LOADING_STATE_UNIQUE);\r\n\t\treturn response;\r\n\t}\r\n\r\n\t/**\r\n\t * Reload the workspace data\r\n\t * @returns { Promise<void> } The promise of the reload\r\n\t */\r\n\tpublic async reload(): Promise<void> {\r\n\t\tconst unique = this.getUnique();\r\n\t\tif (!unique) throw new Error('Unique is not set');\r\n\t\tconst { data } = await this._detailRepository!.requestByUnique(unique);\r\n\r\n\t\tif (data) {\r\n\t\t\tthis._data.setPersisted(data);\r\n\t\t\tthis._data.setCurrent(data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Method to check if the workspace data is loaded.\r\n\t * @returns { Promise<any> | undefined } true if the workspace data is loaded.\r\n\t * @memberof UmbEntityWorkspaceContextBase\r\n\t */\r\n\tpublic isLoaded(): Promise<any> | undefined {\r\n\t\treturn this._getDataPromise;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a data scaffold\r\n\t * @param {CreateArgsType} args The arguments to create the scaffold.\r\n\t * @param {UmbEntityModel} args.parent The parent entity.\r\n\t * @param {UmbEntityUnique} args.parent.unique The unique identifier of the parent entity.\r\n\t * @param {string} args.parent.entityType The entity type of the parent entity.\r\n\t * @param {Partial<DetailModelType>} args.preset The preset data.\r\n\t * @returns { Promise<any> | undefined } The data of the scaffold.\r\n\t */\r\n\tpublic async createScaffold(args: CreateArgsType) {\r\n\t\tthis.resetState();\r\n\t\tthis.loading.addState({ unique: LOADING_STATE_UNIQUE, message: `Creating ${this.getEntityType()} scaffold` });\r\n\t\tawait this.#init;\r\n\t\t// keeping setParent for backwards compatibility. Remove in v18.\r\n\t\tthis.setParent(args.parent);\r\n\t\tthis._internal_setCreateUnderParent(args.parent);\r\n\r\n\t\tconst request = this._detailRepository!.createScaffold(args.preset);\r\n\t\tthis._getDataPromise = request;\r\n\t\tlet { data } = await request;\r\n\r\n\t\tif (data) {\r\n\t\t\tdata = await this._scaffoldProcessData(data);\r\n\r\n\t\t\tif (this.modalContext) {\r\n\t\t\t\t// Notice if the preset comes with values, they will overwrite the scaffolded values... [NL]\r\n\t\t\t\tdata = { ...data, ...this.modalContext.data.preset };\r\n\t\t\t}\r\n\r\n\t\t\tthis.setIsNew(true);\r\n\t\t\tthis.#entityContext.setUnique(data.unique);\r\n\t\t\tthis._data.setPersisted(data);\r\n\t\t\tthis._data.setCurrent(data);\r\n\t\t}\r\n\r\n\t\tthis.loading.removeState(LOADING_STATE_UNIQUE);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprotected async _scaffoldProcessData(data: DetailModelType): Promise<DetailModelType> {\r\n\t\treturn data;\r\n\t}\r\n\r\n\tasync submit() {\r\n\t\tawait this.#init;\r\n\t\tconst currentData = this.getData();\r\n\r\n\t\tif (!currentData) {\r\n\t\t\tthrow new Error('Data is not set');\r\n\t\t}\r\n\r\n\t\tif (currentData.unique === undefined) {\r\n\t\t\tthrow new Error('Unique is not set');\r\n\t\t}\r\n\r\n\t\tif (this.getIsNew()) {\r\n\t\t\tconst parent = this.#createUnderParent.getValue();\r\n\t\t\tif (parent?.unique === undefined) throw new Error('Parent unique is missing');\r\n\t\t\tif (!parent.entityType) throw new Error('Parent entity type is missing');\r\n\t\t\tawait this._create(currentData, parent);\r\n\t\t} else {\r\n\t\t\tawait this._update(currentData);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the entity.\r\n\t * @param unique The unique identifier of the entity to delete.\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tawait this.#init;\r\n\t\tawait this._detailRepository!.delete(unique);\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the workspace is about to navigate away.\r\n\t * @protected\r\n\t * @param {string} newUrl The new url that the workspace is navigating to.\r\n\t * @returns { boolean} true if the workspace is navigating away.\r\n\t * @memberof UmbEntityWorkspaceContextBase\r\n\t */\r\n\tprotected _checkWillNavigateAway(newUrl: string): boolean {\r\n\t\treturn !newUrl.includes(this.routes.getActiveLocalPath());\r\n\t}\r\n\r\n\tprotected async _create(currentData: DetailModelType, parent: UmbEntityModel) {\r\n\t\tif (!this._detailRepository) throw new Error('Detail repository is not set');\r\n\r\n\t\tconst { error, data } = await this._detailRepository.create(currentData, parent.unique);\r\n\t\tif (error || !data) {\r\n\t\t\tthrow error?.message ?? 'Repository did not return data after create.';\r\n\t\t}\r\n\r\n\t\tthis.#entityContext.setUnique(data.unique);\r\n\t\tthis._data.setPersisted(data);\r\n\t\tthis._data.setCurrent(data);\r\n\t\tthis.setIsNew(false);\r\n\r\n\t\tconst eventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\tif (!eventContext) throw new Error('Event context not found.');\r\n\t\tconst event = new UmbRequestReloadChildrenOfEntityEvent({\r\n\t\t\tentityType: parent.entityType,\r\n\t\t\tunique: parent.unique,\r\n\t\t});\r\n\t\teventContext.dispatchEvent(event);\r\n\t}\r\n\r\n\tprotected async _update(currentData: DetailModelType) {\r\n\t\tconst { error, data } = await this._detailRepository!.save(currentData);\r\n\t\tif (error || !data) {\r\n\t\t\tthrow error?.message ?? 'Repository did not return data after create.';\r\n\t\t}\r\n\r\n\t\tthis._data.setPersisted(data);\r\n\t\tthis._data.setCurrent(data);\r\n\r\n\t\tconst unique = this.getUnique()!;\r\n\t\tconst entityType = this.getEntityType();\r\n\r\n\t\tconst eventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\tif (!eventContext) throw new Error('Event context not found.');\r\n\t\tconst event = new UmbRequestReloadStructureForEntityEvent({ unique, entityType });\r\n\r\n\t\teventContext.dispatchEvent(event);\r\n\r\n\t\tconst updatedEvent = new UmbEntityUpdatedEvent({\r\n\t\t\tunique,\r\n\t\t\tentityType,\r\n\t\t\teventUnique: this._workspaceEventUnique,\r\n\t\t});\r\n\r\n\t\teventContext.dispatchEvent(updatedEvent);\r\n\t}\r\n\r\n\t#allowNavigateAway = false;\r\n\r\n\t#onWillNavigate = async (e: CustomEvent) => {\r\n\t\tconst newUrl = e.detail.url;\r\n\r\n\t\tif (this.#allowNavigateAway) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this._checkWillNavigateAway(newUrl) && this.getHasUnpersistedChanges()) {\r\n\t\t\t/* Since ours modals are async while events are synchronous, we need to prevent the default behavior of the event, even if the modal hasn’t been resolved yet.\r\n\t\t\tOnce the modal is resolved (the user accepted to discard the changes and navigate away from the route), we will push a new history state.\r\n\t\t\tThis push will make the \"willchangestate\" event happen again and due to this somewhat \"backward\" behavior,\r\n\t\t\twe set an \"allowNavigateAway\"-flag to prevent the \"discard-changes\" functionality from running in a loop.*/\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// navigate to the new url when discarding changes\r\n\t\t\t\tawait umbOpenModal(this, UMB_DISCARD_CHANGES_MODAL);\r\n\t\t\t\tthis.#allowNavigateAway = true;\r\n\t\t\t\thistory.pushState({}, '', e.detail.url);\r\n\t\t\t\treturn true;\r\n\t\t\t} catch {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if there are unpersisted changes.\r\n\t * @returns { boolean } true if there are unpersisted changes.\r\n\t */\r\n\tpublic getHasUnpersistedChanges(): boolean {\r\n\t\treturn this._data.getHasUnpersistedChanges();\r\n\t}\r\n\t// @deprecated use getHasUnpersistedChanges instead, will be removed in v17.0\r\n\tprotected _getHasUnpersistedChanges(): boolean {\r\n\t\tnew UmbDeprecation({\r\n\t\t\tremoveInVersion: '17',\r\n\t\t\tdeprecated: '_getHasUnpersistedChanges',\r\n\t\t\tsolution: 'use public getHasUnpersistedChanges instead.',\r\n\t\t}).warn();\r\n\t\treturn this.getHasUnpersistedChanges();\r\n\t}\r\n\r\n\toverride resetState() {\r\n\t\tsuper.resetState();\r\n\t\tthis.loading.clear();\r\n\t\tthis.forbidden.clear();\r\n\t\tthis._data.clear();\r\n\t\tthis.#allowNavigateAway = false;\r\n\t\tthis._getDataPromise = undefined;\r\n\t}\r\n\r\n\t#checkIfInitialized() {\r\n\t\tif (this._detailRepository) {\r\n\t\t\tthis.#initialized = true;\r\n\t\t\tthis.#initResolver?.();\r\n\t\t}\r\n\t}\r\n\r\n\t#observeRepository(repositoryAlias: string) {\r\n\t\tif (!repositoryAlias) throw new Error('Entity Workspace must have a repository alias.');\r\n\r\n\t\tnew UmbExtensionApiInitializer<ManifestRepository<DetailRepositoryType>>(\r\n\t\t\tthis,\r\n\t\t\tumbExtensionsRegistry,\r\n\t\t\trepositoryAlias,\r\n\t\t\t[],\r\n\t\t\t(permitted, ctrl) => {\r\n\t\t\t\tthis._detailRepository = permitted ? ctrl.api : undefined;\r\n\t\t\t\tthis.#checkIfInitialized();\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t#onDetailStoreChange(entity: DetailModelType | undefined) {\r\n\t\tif (!entity) {\r\n\t\t\tthis._data.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t// Discriminator to identify events from this workspace context\r\n\tprotected readonly _workspaceEventUnique = UmbId.new();\r\n\r\n\t#onEntityUpdatedEvent = (event: UmbEntityUpdatedEvent) => {\r\n\t\tconst eventEntityUnique = event.getUnique();\r\n\t\tconst eventEntityType = event.getEntityType();\r\n\t\tconst eventDiscriminator = event.getEventUnique();\r\n\r\n\t\t// Ignore events for other entities\r\n\t\tif (eventEntityType !== this.getEntityType()) return;\r\n\t\tif (eventEntityUnique !== this.getUnique()) return;\r\n\r\n\t\t// Ignore events from this workspace so we don't reload the data twice. Ex saving this workspace\r\n\t\tif (eventDiscriminator === this._workspaceEventUnique) return;\r\n\r\n\t\tthis.reload();\r\n\t};\r\n\r\n\tpublic override destroy(): void {\r\n\t\twindow.removeEventListener('willchangestate', this.#onWillNavigate);\r\n\t\tthis.#eventContext?.removeEventListener(\r\n\t\t\tUmbEntityUpdatedEvent.TYPE,\r\n\t\t\tthis.#onEntityUpdatedEvent as unknown as EventListener,\r\n\t\t);\r\n\t\tthis._detailRepository?.destroy();\r\n\t\tthis.#entityContext.destroy();\r\n\t\tthis._getDataPromise = undefined;\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n","import type { UmbNamableWorkspaceContext } from '../types.js';\r\nimport { UmbNameWriteGuardManager } from '../namable/index.js';\r\nimport { UmbEntityDetailWorkspaceContextBase } from './entity-detail-workspace-base.js';\r\nimport type { UmbEntityDetailWorkspaceContextArgs, UmbEntityDetailWorkspaceContextCreateArgs } from './types.js';\r\nimport type { UmbNamedEntityModel } from '@umbraco-cms/backoffice/entity';\r\nimport type { UmbDetailRepository } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport abstract class UmbEntityNamedDetailWorkspaceContextBase<\r\n\t\tNamedDetailModelType extends UmbNamedEntityModel = UmbNamedEntityModel,\r\n\t\tNamedDetailRepositoryType extends\r\n\t\t\tUmbDetailRepository<NamedDetailModelType> = UmbDetailRepository<NamedDetailModelType>,\r\n\t\tCreateArgsType extends\r\n\t\t\tUmbEntityDetailWorkspaceContextCreateArgs<NamedDetailModelType> = UmbEntityDetailWorkspaceContextCreateArgs<NamedDetailModelType>,\r\n\t>\r\n\textends UmbEntityDetailWorkspaceContextBase<NamedDetailModelType, NamedDetailRepositoryType, CreateArgsType>\r\n\timplements UmbNamableWorkspaceContext\r\n{\r\n\t// Just for context token safety:\r\n\tpublic readonly IS_ENTITY_NAMED_DETAIL_WORKSPACE_CONTEXT = true;\r\n\r\n\tpublic readonly name = this._data.createObservablePartOfCurrent((data) => data?.name);\r\n\r\n\tpublic readonly nameWriteGuard = new UmbNameWriteGuardManager(this);\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbEntityDetailWorkspaceContextArgs) {\r\n\t\tsuper(host, args);\r\n\t\tthis.nameWriteGuard.fallbackToPermitted();\r\n\t}\r\n\r\n\tgetName() {\r\n\t\treturn this._data.getCurrent()?.name;\r\n\t}\r\n\r\n\tsetName(name: string | undefined) {\r\n\t\t// We have to cast to Partial because TypeScript doesn't understand that the model has a name property due to generic sub-types\r\n\t\tthis._data.updateCurrent({ name } as Partial<NamedDetailModelType>);\r\n\t}\r\n}\r\n","import type { UmbSubmittableWorkspaceContextBase } from '../submittable/index.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbRouterSlotElement } from '@umbraco-cms/backoffice/router';\r\nimport { ensurePathEndsWithSlash, umbUrlPatternToString } from '@umbraco-cms/backoffice/utils';\r\n\r\nexport const UmbWorkspaceIsNewRedirectControllerAlias = Symbol('IsNewRedirectControllerAlias');\r\n\r\n/**\r\n * Observe the workspace context to see if the entity is new or not.\r\n * If that changes redirect to the edit url.\r\n *\r\n * This requires that the edit URL, is edit/:id\r\n * @param host\r\n * @param workspaceContext\r\n * @param router\r\n */\r\nexport class UmbWorkspaceIsNewRedirectController extends UmbControllerBase {\r\n\t/**\r\n\t * TODO: Figure out why we need this timeout. [NL]\r\n\t * The problem this fixes it when save & publishing a document open in a modal, like from a collection.\r\n\t * The redirect triggers something that ends up re-setting the path, making the modal path the one in the browser despite the modal is closed.\r\n\t */\r\n\ttimeout: any | undefined;\r\n\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\tworkspaceContext: UmbSubmittableWorkspaceContextBase<unknown>,\r\n\t\trouter: UmbRouterSlotElement,\r\n\t) {\r\n\t\tsuper(host, UmbWorkspaceIsNewRedirectControllerAlias);\r\n\r\n\t\t// Navigate to edit route when language is created:\r\n\t\tthis.observe(workspaceContext.isNew, (isNew) => {\r\n\t\t\tif (this.timeout) {\r\n\t\t\t\tclearTimeout(this.timeout);\r\n\t\t\t}\r\n\t\t\tif (isNew === false) {\r\n\t\t\t\tthis.timeout = setTimeout(() => {\r\n\t\t\t\t\tconst unique = workspaceContext.getUnique();\r\n\t\t\t\t\tif (router && unique) {\r\n\t\t\t\t\t\tconst routerPath = router.absoluteRouterPath;\r\n\t\t\t\t\t\tif (routerPath) {\r\n\t\t\t\t\t\t\tconst newPath: string = umbUrlPatternToString(ensurePathEndsWithSlash(routerPath) + 'edit/:id', {\r\n\t\t\t\t\t\t\t\tid: unique,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tthis.destroy();\r\n\t\t\t\t\t\t\t// get current url:\r\n\t\t\t\t\t\t\tconst currentUrl = window.location.href;\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\trouter.localActiveViewPath === undefined ||\r\n\t\t\t\t\t\t\t\trouter.localActiveViewPath === '' ||\r\n\t\t\t\t\t\t\t\t!currentUrl.includes(router.localActiveViewPath)\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Check that we are still part of the DOM and thereby relevant:\r\n\t\t\t\t\t\t\twindow.history.replaceState(null, '', newPath);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.timeout = undefined;\r\n\t\t\t\t}, 500);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// TODO: If workspace route changes cause of other reasons then this controller should be destroyed.\r\n\t}\r\n\r\n\toverride destroy() {\r\n\t\tsuper.destroy();\r\n\t\tif (this.timeout) {\r\n\t\t\tclearTimeout(this.timeout);\r\n\t\t\tthis.timeout = undefined;\r\n\t\t}\r\n\t}\r\n}\r\n","import { UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\n\r\nexport type ActiveVariant = {\r\n\tindex: number;\r\n\tculture: string | null;\r\n\tsegment: string | null;\r\n};\r\n\r\n/**\r\n * @class UmbWorkspaceSplitViewManager\r\n * @description - Class managing the split view state for a workspace context.\r\n */\r\nexport class UmbWorkspaceSplitViewManager {\r\n\t#activeVariantsInfo = new UmbArrayState<ActiveVariant>([], (x) => x.index).sortBy(\r\n\t\t(a, b) => (a.index || 0) - (b.index || 0),\r\n\t);\r\n\tpublic readonly activeVariantsInfo = this.#activeVariantsInfo.asObservable();\r\n\tpublic readonly splitViewActive = this.#activeVariantsInfo.asObservablePart((x) => x.length > 1);\r\n\r\n\tprivate _routeBase?: string;\r\n\tpublic getWorkspaceRoute(): string | undefined {\r\n\t\treturn this._routeBase;\r\n\t}\r\n\tpublic setWorkspaceRoute(route: string | undefined) {\r\n\t\tthis._routeBase = route;\r\n\t}\r\n\r\n\tsetActiveVariant(index: number, culture: string | null, segment: string | null) {\r\n\t\tthis.#activeVariantsInfo.appendOneAt({ index, culture: culture ?? null, segment: segment ?? null }, index);\r\n\t}\r\n\r\n\tgetActiveVariants() {\r\n\t\treturn this.#activeVariantsInfo.getValue();\r\n\t}\r\n\r\n\tpublic removeActiveVariant(index: number) {\r\n\t\tif (this.getActiveVariants().length > 1) {\r\n\t\t\tthis.#activeVariantsInfo.removeOne(index);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic activeVariantByIndex(index: number) {\r\n\t\treturn this.#activeVariantsInfo.asObservablePart((data) => data.find((x) => x.index === index) || undefined);\r\n\t}\r\n\r\n\tpublic switchVariant(index: number, variantId: UmbVariantId) {\r\n\t\t// TODO: remember current path and extend url with it.\r\n\t\t// TODO: construct URl with all active routes:\r\n\t\t// TODO: use method for generating variant url:\r\n\t\tconst workspaceRoute = this.getWorkspaceRoute();\r\n\t\tif (workspaceRoute) {\r\n\t\t\tconst activeVariants = this.getActiveVariants();\r\n\t\t\tif (activeVariants && index < activeVariants.length) {\r\n\t\t\t\tconst newVariants = [...activeVariants];\r\n\t\t\t\tnewVariants[index] = { index, culture: variantId.culture, segment: variantId.segment };\r\n\r\n\t\t\t\tconst variantPart: string = newVariants.map((v) => UmbVariantId.Create(v).toString()).join('_&_');\r\n\r\n\t\t\t\thistory.pushState(null, '', `${workspaceRoute}/${variantPart}`);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic openSplitView(newVariant: UmbVariantId) {\r\n\t\t// TODO: remember current path and extend url with it.\r\n\t\t// TODO: construct URl with all active routes:\r\n\t\t// TODO: use method for generating variant url:\r\n\r\n\t\tconst currentVariant = this.getActiveVariants()[0];\r\n\t\tconst workspaceRoute = this.getWorkspaceRoute();\r\n\t\tif (currentVariant && workspaceRoute) {\r\n\t\t\thistory.pushState(null, '', `${workspaceRoute}/${UmbVariantId.Create(currentVariant)}_&_${newVariant}`);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic closeSplitView(index: number) {\r\n\t\tconst workspaceRoute = this.getWorkspaceRoute();\r\n\t\tif (workspaceRoute) {\r\n\t\t\tconst activeVariants = this.getActiveVariants();\r\n\t\t\tif (activeVariants && index < activeVariants.length) {\r\n\t\t\t\tconst newVariants = activeVariants.filter((x) => x.index !== index);\r\n\r\n\t\t\t\tconst variantPart: string = newVariants.map((v) => UmbVariantId.Create(v)).join('_&_');\r\n\r\n\t\t\t\thistory.pushState(null, '', `${workspaceRoute}/${variantPart}`);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n","import type { UmbPropertyValueData } from '../../property/types.js';\r\n\r\n/**\r\n * @function UmbObjectToPropertyValueArray\r\n * @param {object} data - an object with properties to be converted.\r\n * @returns {Array<UmbPropertyValueData> | undefined} - and array of property values or undefined\r\n */\r\nexport function umbObjectToPropertyValueArray(data: object | undefined): Array<UmbPropertyValueData> | undefined {\r\n\tif (!data) return;\r\n\treturn Object.keys(data).map((key) => ({\r\n\t\talias: key,\r\n\t\tvalue: (data as any)[key],\r\n\t}));\r\n}\r\n","import type { UmbInvariantDatasetWorkspaceContext } from '../contexts/index.js';\r\nimport type {\r\n\tUmbPropertyDatasetContext,\r\n\tUmbNameablePropertyDatasetContext,\r\n\tUmbPropertyValueData,\r\n} from '@umbraco-cms/backoffice/property';\r\nimport { UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbVariantContext, UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport { UmbBooleanState, type Observable } from '@umbraco-cms/backoffice/observable-api';\r\n\r\n/**\r\n * A property dataset context that hooks directly into the workspace context.\r\n */\r\nexport class UmbInvariantWorkspacePropertyDatasetContext<\r\n\t\tWorkspaceType extends UmbInvariantDatasetWorkspaceContext = UmbInvariantDatasetWorkspaceContext,\r\n\t>\r\n\textends UmbContextBase\r\n\timplements UmbPropertyDatasetContext, UmbNameablePropertyDatasetContext\r\n{\r\n\t#readOnly = new UmbBooleanState(false);\r\n\tpublic readOnly = this.#readOnly.asObservable();\r\n\r\n\t#workspace: WorkspaceType;\r\n\t#variantContext = new UmbVariantContext(this).inherit();\r\n\r\n\tname;\r\n\r\n\t// default data:\r\n\r\n\tgetVariantId() {\r\n\t\treturn UmbVariantId.CreateInvariant();\r\n\t}\r\n\tgetEntityType() {\r\n\t\treturn this.#workspace.getEntityType();\r\n\t}\r\n\tgetUnique() {\r\n\t\treturn this.#workspace.getUnique();\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.#workspace.getName();\r\n\t}\r\n\tsetName(name: string) {\r\n\t\tthis.#workspace.setName(name);\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost, workspace: WorkspaceType) {\r\n\t\tsuper(host, UMB_PROPERTY_DATASET_CONTEXT);\r\n\t\tthis.#workspace = workspace;\r\n\r\n\t\tthis.name = this.#workspace.name;\r\n\t\tthis.#variantContext.setVariantId(this.getVariantId());\r\n\t}\r\n\r\n\tget properties(): Observable<Array<UmbPropertyValueData> | undefined> {\r\n\t\treturn this.#workspace.values;\r\n\t}\r\n\tgetProperties(): Promise<Array<UmbPropertyValueData> | undefined> {\r\n\t\treturn this.#workspace.getValues();\r\n\t}\r\n\r\n\t/**\r\n\t * @function propertyValueByAlias\r\n\t * @param {string} propertyAlias\r\n\t * @returns {Promise<Observable<ReturnType | undefined> | undefined>}\r\n\t * @description Get an Observable for the value of this property.\r\n\t */\r\n\tasync propertyValueByAlias<ReturnType = unknown>(propertyAlias: string) {\r\n\t\treturn await this.#workspace.propertyValueByAlias<ReturnType>(propertyAlias);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} propertyAlias - The alias of the property\r\n\t * @param {unknown} value - The value to be set for this property\r\n\t * @returns {Promise<void>} - an promise which resolves once the value has been set.\r\n\t */\r\n\tasync setPropertyValue(propertyAlias: string, value: unknown) {\r\n\t\treturn this.#workspace.setPropertyValue(propertyAlias, value);\r\n\t}\r\n\r\n\tgetReadOnly() {\r\n\t\treturn this.#readOnly.getValue();\r\n\t}\r\n}\r\n"],"names":["UmbWorkspaceActionMenuItemBase","UmbActionBase","UmbWorkspaceActionBase","UmbBooleanState","UmbSaveWorkspaceAction","host","args","UMB_SAVEABLE_WORKSPACE_CONTEXT","context","#observeUnique","unique","UmbSubmitWorkspaceAction","UMB_SUBMITTABLE_WORKSPACE_CONTEXT","UmbNameWriteGuardManager","UmbGuardManagerBase","rules","#resolvePermission","rule","UmbWorkspaceRouteManager","UmbControllerBase","#routes","UmbArrayState","x","#activeLocalPath","UmbStringState","routes","allRoutes","mappedRoutes","route","oldSetupCallback","_component","info","UmbSubmittableWorkspaceContextBase","UmbContextBase","workspaceAlias","UMB_WORKSPACE_CONTEXT","#validationContexts","#isNew","#rejectSubmit","error","#submitPromise","#submitReject","#submitResolve","#resolveSubmit","#completeSubmit","UMB_MODAL_CONTEXT","isNew","reason","onValid","onInvalid","resolve","reject","UmbEditableWorkspaceContextBase","UmbEntityWorkspaceDataManager","UmbObjectState","persistedData","currentData","data","partialData","mappingFunction","persisted","current","result","jsonStringComparison","LOADING_STATE_UNIQUE","FORBIDDEN_STATE_UNIQUE","UmbEntityDetailWorkspaceContextBase","#entityContext","UmbEntityContext","UmbStateManager","#createUnderParent","parent","UmbValidationContext","#initialized","#init","#initResolver","#allowNavigateAway","#onWillNavigate","newUrl","umbOpenModal","UMB_DISCARD_CHANGES_MODAL","UmbId","#onEntityUpdatedEvent","event","eventEntityUnique","eventEntityType","eventDiscriminator","#observeRepository","UMB_ACTION_EVENT_CONTEXT","#eventContext","UmbEntityUpdatedEvent","entityType","response","asObservable","UmbApiError","entity","#onDetailStoreChange","request","eventContext","UmbRequestReloadChildrenOfEntityEvent","UmbRequestReloadStructureForEntityEvent","updatedEvent","UmbDeprecation","#checkIfInitialized","repositoryAlias","UmbExtensionApiInitializer","umbExtensionsRegistry","permitted","ctrl","UmbEntityNamedDetailWorkspaceContextBase","name","UmbWorkspaceIsNewRedirectControllerAlias","UmbWorkspaceIsNewRedirectController","workspaceContext","router","routerPath","newPath","umbUrlPatternToString","ensurePathEndsWithSlash","currentUrl","UmbWorkspaceSplitViewManager","#activeVariantsInfo","a","b","index","culture","segment","variantId","workspaceRoute","activeVariants","newVariants","variantPart","v","UmbVariantId","newVariant","currentVariant","umbObjectToPropertyValueArray","key","UmbInvariantWorkspacePropertyDatasetContext","workspace","UMB_PROPERTY_DATASET_CONTEXT","#readOnly","#variantContext","UmbVariantContext","#workspace","propertyAlias","value"],"mappings":"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"}