{"version":3,"file":"index.js","sources":["../../../../src/packages/core/server/server-connection.ts","../../../../src/packages/core/server/server.context-token.ts","../../../../src/packages/core/server/server.context.ts"],"sourcesContent":["import { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { RuntimeLevelModel, ServerService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UmbBooleanState, UmbNumberState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\nexport class UmbServerConnection extends UmbControllerBase {\r\n\t#url: string;\r\n\t#status: RuntimeLevelModel = RuntimeLevelModel.UNKNOWN;\r\n\r\n\t#isConnected = new UmbBooleanState(false);\r\n\tisConnected = this.#isConnected.asObservable();\r\n\r\n\t#versionCheckPeriod = new UmbNumberState(undefined);\r\n\tversionCheckPeriod = this.#versionCheckPeriod.asObservable();\r\n\r\n\t#allowLocalLogin = new UmbBooleanState(false);\r\n\tallowLocalLogin = this.#allowLocalLogin.asObservable();\r\n\r\n\t#allowPasswordReset = new UmbBooleanState(false);\r\n\tallowPasswordReset = this.#allowPasswordReset.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost, serverUrl: string) {\r\n\t\tsuper(host);\r\n\t\tthis.#url = serverUrl;\r\n\t}\r\n\r\n\t/**\r\n\t * Connects to the server.\r\n\t * @memberof UmbServerConnection\r\n\t */\r\n\tasync connect() {\r\n\t\tawait this.#setStatus();\r\n\t\tawait this.#setServerConfiguration();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the URL of the server.\r\n\t * @returns {*}\r\n\t * @memberof UmbServerConnection\r\n\t */\r\n\tgetUrl() {\r\n\t\treturn this.#url;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the status of the server.\r\n\t * @returns {string}\r\n\t * @memberof UmbServerConnection\r\n\t */\r\n\tgetStatus() {\r\n\t\tif (!this.getIsConnected()) throw new Error('Server is not connected. Remember to await connect()');\r\n\t\treturn this.#status;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the server is connected.\r\n\t * @returns {boolean}\r\n\t * @memberof UmbServerConnection\r\n\t */\r\n\tgetIsConnected() {\r\n\t\treturn this.#isConnected.getValue();\r\n\t}\r\n\r\n\tasync #setStatus() {\r\n\t\tconst { data, error } = await tryExecute(this._host, ServerService.getServerStatus(), {\r\n\t\t\tdisableNotifications: true,\r\n\t\t});\r\n\t\tif (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tthis.#isConnected.setValue(true);\r\n\t\tthis.#status = data?.serverStatus ?? RuntimeLevelModel.UNKNOWN;\r\n\t}\r\n\r\n\tasync #setServerConfiguration() {\r\n\t\tconst { data, error } = await tryExecute(this._host, ServerService.getServerConfiguration(), {\r\n\t\t\tdisableNotifications: true,\r\n\t\t});\r\n\t\tif (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tthis.#versionCheckPeriod.setValue(data?.versionCheckPeriod);\r\n\t\tthis.#allowLocalLogin.setValue(data?.allowLocalLogin ?? false);\r\n\t\tthis.#allowPasswordReset.setValue(data?.allowPasswordReset ?? false);\r\n\t}\r\n}\r\n","import type { UmbServerContext } from './server.context.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_SERVER_CONTEXT = new UmbContextToken<UmbServerContext>('UmbServerContext');\r\n","import { UMB_SERVER_CONTEXT } from './server.context-token.js';\r\nimport type { UmbServerContextConfig } from './types.js';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbServerContext extends UmbContextBase {\r\n\t#serverUrl: string;\r\n\t#backofficePath: string;\r\n\t#serverConnection;\r\n\r\n\tconstructor(host: UmbControllerHost, config: UmbServerContextConfig) {\r\n\t\tsuper(host, UMB_SERVER_CONTEXT.toString());\r\n\t\tthis.#serverUrl = config.serverUrl;\r\n\t\tthis.#backofficePath = config.backofficePath;\r\n\t\tthis.#serverConnection = config.serverConnection;\r\n\t}\r\n\r\n\tgetBackofficePath() {\r\n\t\treturn this.#backofficePath;\r\n\t}\r\n\r\n\tgetServerUrl() {\r\n\t\treturn this.#serverUrl;\r\n\t}\r\n\r\n\tgetServerConnection() {\r\n\t\treturn this.#serverConnection;\r\n\t}\r\n}\r\n"],"names":["UmbServerConnection","UmbControllerBase","host","serverUrl","#status","RuntimeLevelModel","#isConnected","UmbBooleanState","#versionCheckPeriod","UmbNumberState","#allowLocalLogin","#allowPasswordReset","#url","#setStatus","#setServerConfiguration","data","error","tryExecute","ServerService","UMB_SERVER_CONTEXT","UmbContextToken","UmbServerContext","UmbContextBase","#serverUrl","#backofficePath","#serverConnection","config"],"mappings":";;;;;AAMO,MAAMA,UAA4BC,EAAkB;AAAA,EAgB1D,YAAYC,GAAyBC,GAAmB;AACvD,UAAMD,CAAI,GAfX,KAAAE,KAA6BC,EAAkB,SAEhC,KAAAC,KAAA,IAAIC,EAAgB,EAAK,GAC1B,KAAA,cAAA,KAAKD,GAAa,aAAa,GAEvB,KAAAE,KAAA,IAAIC,EAAe,MAAS,GAC7B,KAAA,qBAAA,KAAKD,GAAoB,aAAa,GAExC,KAAAE,KAAA,IAAIH,EAAgB,EAAK,GAC1B,KAAA,kBAAA,KAAKG,GAAiB,aAAa,GAE/B,KAAAC,KAAA,IAAIJ,EAAgB,EAAK,GAC1B,KAAA,qBAAA,KAAKI,GAAoB,aAAa,GAI1D,KAAKC,KAAOT;AAAA,EAAA;AAAA,EAjBbS;AAAA,EACAR;AAAA,EAEAE;AAAA,EAGAE;AAAA,EAGAE;AAAA,EAGAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,UAAU;AACf,iBAAM,KAAKE,GAAW,GACtB,MAAM,KAAKC,GAAwB,GAC5B;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQR,SAAS;AACR,WAAO,KAAKF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQb,YAAY;AACX,QAAI,CAAC,KAAK,eAAA,EAAwB,OAAA,IAAI,MAAM,sDAAsD;AAClG,WAAO,KAAKR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQb,iBAAiB;AACT,WAAA,KAAKE,GAAa,SAAS;AAAA,EAAA;AAAA,EAGnC,MAAMO,KAAa;AACZ,UAAA,EAAE,MAAAE,GAAM,OAAAC,EAAA,IAAU,MAAMC,EAAW,KAAK,OAAOC,EAAc,mBAAmB;AAAA,MACrF,sBAAsB;AAAA,IAAA,CACtB;AACD,QAAIF;AACG,YAAAA;AAGF,SAAAV,GAAa,SAAS,EAAI,GAC1B,KAAAF,KAAUW,GAAM,gBAAgBV,EAAkB;AAAA,EAAA;AAAA,EAGxD,MAAMS,KAA0B;AACzB,UAAA,EAAE,MAAAC,GAAM,OAAAC,EAAA,IAAU,MAAMC,EAAW,KAAK,OAAOC,EAAc,0BAA0B;AAAA,MAC5F,sBAAsB;AAAA,IAAA,CACtB;AACD,QAAIF;AACG,YAAAA;AAGF,SAAAR,GAAoB,SAASO,GAAM,kBAAkB,GAC1D,KAAKL,GAAiB,SAASK,GAAM,mBAAmB,EAAK,GAC7D,KAAKJ,GAAoB,SAASI,GAAM,sBAAsB,EAAK;AAAA,EAAA;AAErE;ACtFa,MAAAI,IAAqB,IAAIC,EAAkC,kBAAkB;ACEnF,MAAMC,UAAyBC,EAAe;AAAA,EACpDC;AAAA,EACAC;AAAA,EACAC;AAAA,EAEA,YAAYvB,GAAyBwB,GAAgC;AAC9D,UAAAxB,GAAMiB,EAAmB,UAAU,GACzC,KAAKI,KAAaG,EAAO,WACzB,KAAKF,KAAkBE,EAAO,gBAC9B,KAAKD,KAAoBC,EAAO;AAAA,EAAA;AAAA,EAGjC,oBAAoB;AACnB,WAAO,KAAKF;AAAA,EAAA;AAAA,EAGb,eAAe;AACd,WAAO,KAAKD;AAAA,EAAA;AAAA,EAGb,sBAAsB;AACrB,WAAO,KAAKE;AAAA,EAAA;AAEd;"}