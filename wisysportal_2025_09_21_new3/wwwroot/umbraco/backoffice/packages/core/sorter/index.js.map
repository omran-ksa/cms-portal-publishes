{"version":3,"file":"index.js","sources":["../../../../src/packages/core/sorter/sorter.controller.ts","../../../../src/packages/core/sorter/replacement-resolver-as-grid.function.ts"],"sourcesContent":["import { isWithinRect } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHostElement } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nconst autoScrollSensitivity = 50;\r\nconst autoScrollSpeed = 16;\r\n\r\n/**\r\n *\r\n * @param {Element} el - The element to check for ability to scroll\r\n * @param {Boolean} includeSelf - If true, the element itself will be included in the check\r\n * @returns {Element | null}\r\n */\r\nfunction getParentScrollElement(el: Element, includeSelf: boolean) {\r\n\tif (!el || !el.getBoundingClientRect) return null;\r\n\r\n\tlet elem = el;\r\n\tlet gotSelf = false;\r\n\r\n\twhile (elem) {\r\n\t\t// we don't need to get elem css if it isn't even overflowing in the first place (performance)\r\n\t\tif (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\r\n\t\t\tconst elemCSS = getComputedStyle(elem);\r\n\r\n\t\t\tif (\r\n\t\t\t\t(elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) ||\r\n\t\t\t\t(elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll'))\r\n\t\t\t) {\r\n\t\t\t\tif (!elem.getBoundingClientRect || elem === document.body) return null;\r\n\t\t\t\tif (gotSelf || includeSelf) return elem;\r\n\t\t\t\tgotSelf = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (elem.parentNode === document) {\r\n\t\t\treturn null;\r\n\t\t} else if (elem.parentNode instanceof ShadowRoot) {\r\n\t\t\telem = elem.parentNode.host;\r\n\t\t} else {\r\n\t\t\telem = elem.parentNode as Element;\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element - The element to check\r\n * @param {string} ignorerSelectors - A comma separated list of selectors to ignore\r\n */\r\nfunction setupIgnorerElements(element: HTMLElement, ignorerSelectors: string) {\r\n\tconst selectors = ignorerSelectors.split(',');\r\n\tselectors.push('[draggable=\"false\"]');\r\n\tselectors.forEach(function (criteria) {\r\n\t\telement.querySelectorAll(criteria.trim()).forEach(setupPreventEvent);\r\n\t});\r\n}\r\n/**\r\n *\r\n * @param {HTMLElement} element - The element to check\r\n * @param {string} ignorerSelectors - A comma separated list of selectors to ignore\r\n */\r\nfunction destroyIgnorerElements(element: HTMLElement, ignorerSelectors: string) {\r\n\tconst selectors = ignorerSelectors.split(',');\r\n\tselectors.push('[draggable=\"false\"]');\r\n\tselectors.forEach(function (criteria: string) {\r\n\t\telement.querySelectorAll(criteria.trim()).forEach(destroyPreventEvent);\r\n\t});\r\n}\r\n/**\r\n *\r\n * @param {Element} element - The element to check\r\n */\r\nfunction setupPreventEvent(element: Element) {\r\n\t(element as HTMLElement).draggable = false;\r\n\t//(element as HTMLElement).setAttribute('draggable', 'false');\r\n}\r\n/**\r\n *\r\n * @param {Element} element - The element to check\r\n */\r\nfunction destroyPreventEvent(element: Element) {\r\n\t(element as HTMLElement).draggable = false;\r\n\t//element.removeAttribute('draggable');\r\n}\r\n\r\nexport type UmbSorterResolvePlacementReturn =\r\n\t| boolean\r\n\t| null\r\n\t| {\r\n\t\t\tplaceAfter: boolean;\r\n\t\t\tverticalDirection?: boolean;\r\n\t  };\r\n\r\nexport type UmbSorterResolvePlacementArgs<T, ElementType extends HTMLElement = HTMLElement> = {\r\n\tcontainerElement: Element;\r\n\tcontainerRect: DOMRect;\r\n\titem: T;\r\n\titemIndex: number | null;\r\n\telement: ElementType | undefined;\r\n\telementRect: DOMRect;\r\n\trelatedElement: ElementType;\r\n\trelatedModel: T;\r\n\trelatedRect: DOMRect;\r\n\trelatedIndex: number | null;\r\n\tplaceholderIsInThisRow: boolean;\r\n\thorizontalPlaceAfter: boolean;\r\n\tpointerX: number;\r\n\tpointerY: number;\r\n};\r\n\r\n/**\r\n * @deprecated will be removed in v.17, use `UmbSorterResolvePlacementArgs`\r\n */\r\nexport type resolvePlacementArgs<T, ElementType extends HTMLElement = HTMLElement> = UmbSorterResolvePlacementArgs<\r\n\tT,\r\n\tElementType\r\n>;\r\n\r\ntype UniqueType = string | symbol | number;\r\n\r\n/**\r\n * Internal type, which is adjusted to become the public one.\r\n  @internal */\r\ntype INTERNAL_UmbSorterConfig<T, ElementType extends HTMLElement> = {\r\n\t/**\r\n\t * Define how to retrive the unique identifier of an element. If this method returns undefined, the move will be cancelled.\r\n\t */\r\n\tgetUniqueOfElement: (element: ElementType) => UniqueType | null | undefined;\r\n\tgetUniqueOfModel: (modeEntry: T) => UniqueType | null | undefined;\r\n\t/**\r\n\t * Optionally define a unique identifier for each sorter experience, all Sorters that uses the same identifier to connect with other sorters.\r\n\t */\r\n\tidentifier: UniqueType;\r\n\t/**\r\n\t * A query selector for the item element.\r\n\t */\r\n\titemSelector: string;\r\n\tdisabledItemSelector?: string;\r\n\t/**\r\n\t * A selector for the container element, if not defined the host element will be used as container.\r\n\t */\r\n\tcontainerSelector: string;\r\n\t/**\r\n\t * A selector for elements to ignore, elements that should not be draggable when within an draggable item, This defaults to links, images & iframes.\r\n\t */\r\n\tignorerSelector: string;\r\n\t/**\r\n\t * An class to set on the placeholder element.\r\n\t */\r\n\tplaceholderClass?: string;\r\n\t/**\r\n\t * An attribute to set on the placeholder element.\r\n\t */\r\n\tplaceholderAttr?: string;\r\n\t/**\r\n\t * The selector to find the draggable element within the item.\r\n\t */\r\n\tdraggableSelector?: string;\r\n\t/**\r\n\t * The selector to define the interactive element within the item, this element will then become the only interactive part, the item can only be dragged by mouse when interacting with this element.\r\n\t */\r\n\thandleSelector?: string;\r\n\r\n\t//boundarySelector?: string;\r\n\tdataTransferResolver?: (dataTransfer: DataTransfer | null, currentItem: T) => void;\r\n\tonStart?: (argument: { item: T; element: ElementType }) => void;\r\n\t/**\r\n\t * This callback is executed every time where is a change to this model, this could be a move, insert or remove.\r\n\t * But notice its not called if a more specific callback is provided, such would be the performItemMove, performItemInsert or performItemRemove or performItemRemove.\r\n\t */\r\n\tonChange?: (argument: { item: T; model: Array<T> }) => void;\r\n\t/**\r\n\t * This callback is executed when an item is moved from another container to this container.\r\n\t */\r\n\tonContainerChange?: (argument: {\r\n\t\titem: T;\r\n\t\tmodel: Array<T>;\r\n\t\tfrom: UmbSorterController<T, ElementType> | undefined;\r\n\t}) => void;\r\n\tonEnd?: (argument: { item: T; element: ElementType }) => void;\r\n\titemHasNestedContainersResolver?: (element: HTMLElement) => boolean;\r\n\t/**\r\n\t * Callback when a item move is disallowed.\r\n\t * This should make a visual indication for the user to understand that the move is not allowed.\r\n\t */\r\n\tonDisallowed?: (argument: { item: T; element: ElementType }) => void;\r\n\t/**\r\n\t * Callback when a item move is allowed.\r\n\t * This should remove any visual indication of the disallowing, reverting the work of the onDisallowed callback.\r\n\t */\r\n\tonAllowed?: (argument: { item: T; element: ElementType }) => void;\r\n\t/**\r\n\t * Callback when user tries to move an item from another Sorter to this Sorter, return true or false to allow or disallow the move.\r\n\t */\r\n\tonRequestMove?: (argument: { item: T }) => boolean;\r\n\t/**\r\n\t * Callback when user tries to drop an item from another window/tab/source.\r\n\t */\r\n\tonRequestDrop?: (argument: { unique: string }) => Promise<T | undefined>;\r\n\t/**\r\n\t * Callback when user tries to remove an item from another Sorter to this Sorter, return true or false to allow or disallow the move.\r\n\t */\r\n\trequestExternalRemove?: (argument: { item: T }) => Promise<boolean>;\r\n\t/**\r\n\t * Callback when user tries to remove an item from another Sorter to this Sorter, return true or false to allow or disallow the move.\r\n\t */\r\n\trequestExternalInsert?: (argument: { item: T }) => Promise<boolean>;\r\n\t/**\r\n\t * This callback is executed when an item is hovered within this container.\r\n\t * The callback should return true if the item should be placed after the hovered item, or false if it should be placed before the hovered item.\r\n\t * In this way the callback can control the placement of the item.\r\n\t * If it returns null the placement will be prevented.\r\n\t * @example\r\n\t * This is equivalent to the default behavior:\r\n\t * ```ts\r\n\t * resolvePlacement: (argument) => {\r\n\t * \tif(argument.pointerY > argument.relatedRect.top + argument.relatedRect.height * 0.5) {\r\n\t * \t\treturn true; // Place after\r\n\t * \t} else {\r\n\t * \t\treturn false; // Place before\r\n\t * \t}\r\n\t * }\r\n\t */\r\n\tresolvePlacement?: (argument: UmbSorterResolvePlacementArgs<T, ElementType>) => UmbSorterResolvePlacementReturn;\r\n\t/**\r\n\t * This callback is executed when an item is moved within this container.\r\n\t */\r\n\tperformItemMove?: (argument: { item: T; newIndex: number; oldIndex: number }) => Promise<boolean> | boolean;\r\n\t/**\r\n\t * This callback is executed when an item should be inserted into this container.\r\n\t */\r\n\tperformItemInsert?: (argument: { item: T; newIndex: number }) => Promise<boolean> | boolean;\r\n\t/**\r\n\t * This callback is executed when an item should be removed from this container.\r\n\t */\r\n\tperformItemRemove?: (argument: { item: T }) => Promise<boolean> | boolean;\r\n};\r\n\r\n// External type with some properties optional, as they have fallback values:\r\nexport type UmbSorterConfig<T, ElementType extends HTMLElement = HTMLElement> = Omit<\r\n\tINTERNAL_UmbSorterConfig<T, ElementType>,\r\n\t'ignorerSelector' | 'containerSelector' | 'identifier'\r\n> &\r\n\tPartial<Pick<INTERNAL_UmbSorterConfig<T, ElementType>, 'ignorerSelector' | 'containerSelector' | 'identifier'>>;\r\n\r\n/**\r\n\r\n * @class UmbSorterController\r\n * @implements {UmbControllerInterface}\r\n * @description This controller can make user able to sort items.\r\n * @example\r\n *\r\n * This example shows how to setup a sorter controller with no special needs.\r\n * Assuming your declaring this on a Umbraco Element(UmbControllerHostElement):\r\n *\r\n * ```ts\r\n * const sorter = new UmbSorterController(this, {\r\n * \titemSelector: '.item',\r\n * \tcontainerSelector: '.container',\r\n * \tgetUniqueOfElement: (element) => element.dataset.id,\r\n * \tgetUniqueOfModel: (model) => model.id\r\n * });\r\n * ```\r\n */\r\nexport class UmbSorterController<T, ElementType extends HTMLElement = HTMLElement> extends UmbControllerBase {\r\n\t//\r\n\t// The sorter who last indicated that it was okay or not okay to drop here:\r\n\tstatic lastIndicationSorter?: UmbSorterController<unknown>;\r\n\r\n\t// A sorter that is requested to become the next sorter:\r\n\tstatic originalSorter?: UmbSorterController<unknown>;\r\n\tstatic originalIndex?: number;\r\n\r\n\t// A sorter that is requested to become the next sorter:\r\n\tstatic dropSorter?: UmbSorterController<unknown>;\r\n\r\n\t// The sorter of which the element is located within:\r\n\tstatic activeSorter?: UmbSorterController<unknown>;\r\n\r\n\t// Information about the current dragged item/element:\r\n\tstatic activeIndex?: number;\r\n\tstatic activeItem?: any;\r\n\tstatic activeElement?: HTMLElement;\r\n\tstatic activeDragElement?: HTMLElement;\r\n\r\n\t#host;\r\n\t#isConnected = false;\r\n\t#config: INTERNAL_UmbSorterConfig<T, ElementType>;\r\n\t#observer;\r\n\r\n\t#model: Array<T> = [];\r\n\tstatic rqaId?: number;\r\n\r\n\t#containerElement!: HTMLElement;\r\n\t#useContainerShadowRoot?: boolean;\r\n\r\n\t#scrollElement?: Element | null;\r\n\r\n\t#enabled = true;\r\n\r\n\t#dragX = 0;\r\n\t#dragY = 0;\r\n\r\n\t#elements = Array<ElementType>();\r\n\r\n\tpublic get identifier() {\r\n\t\treturn this.#config.identifier;\r\n\t}\r\n\tpublic set identifier(identifier: UniqueType) {\r\n\t\tthis.#config.identifier = identifier;\r\n\t}\r\n\t#isActiveIdentifier() {\r\n\t\treturn UmbSorterController.activeSorter?.identifier === this.identifier;\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHostElement, config: UmbSorterConfig<T, ElementType>) {\r\n\t\tsuper(host);\r\n\t\tthis.#host = host;\r\n\r\n\t\t// Set defaults:\r\n\t\tconfig.identifier ??= Symbol();\r\n\t\tconfig.ignorerSelector ??= 'a,img,iframe,input,textarea,select,option';\r\n\t\tif (!config.placeholderClass && !config.placeholderAttr) {\r\n\t\t\tconfig.placeholderAttr = 'drag-placeholder';\r\n\t\t}\r\n\r\n\t\tthis.#config = config as INTERNAL_UmbSorterConfig<T, ElementType>;\r\n\t\thost.addUmbController(this);\r\n\r\n\t\tthis.#observer = new MutationObserver((mutations) => {\r\n\t\t\tmutations.forEach((mutation) => {\r\n\t\t\t\tmutation.addedNodes.forEach((addedNode) => {\r\n\t\t\t\t\tif ((addedNode as HTMLElement).matches && (addedNode as HTMLElement).matches(this.#config.itemSelector)) {\r\n\t\t\t\t\t\tthis.setupItem(addedNode as ElementType);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tmutation.removedNodes.forEach((removedNode) => {\r\n\t\t\t\t\tif ((removedNode as HTMLElement).matches && (removedNode as HTMLElement).matches(this.#config.itemSelector)) {\r\n\t\t\t\t\t\tthis.destroyItem(removedNode as ElementType);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Enables the sorter, this will allow sorting to happen.\r\n\t * @returns {*}  {void}\r\n\t * @memberof UmbSorterController\r\n\t */\r\n\tenable(): void {\r\n\t\tif (this.#enabled) return;\r\n\t\tthis.#enabled = true;\r\n\t\tif (this.#isConnected) {\r\n\t\t\trequestAnimationFrame(this.#initialize);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disables the sorter, this will prevent any sorting to happen.\r\n\t * @returns {*}  {void}\r\n\t * @memberof UmbSorterController\r\n\t */\r\n\tdisable(): void {\r\n\t\tif (!this.#enabled) return;\r\n\t\tthis.#enabled = false;\r\n\t\tif (this.#isConnected) {\r\n\t\t\tthis.#uninitialize();\r\n\t\t}\r\n\t}\r\n\r\n\tsetModel(model: Array<T> | undefined): void {\r\n\t\tthis.#model = model ?? [];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the model of the sorter.\r\n\t * @returns {Array<T>} The model of this sorter.\r\n\t * @memberof UmbSorterController\r\n\t */\r\n\tgetModel(): Array<T> {\r\n\t\treturn this.#model;\r\n\t}\r\n\r\n\thasItem(unique: UniqueType) {\r\n\t\treturn this.#model.find((x) => this.#config.getUniqueOfModel(x) === unique) !== undefined;\r\n\t}\r\n\r\n\tgetItem(unique: UniqueType) {\r\n\t\treturn this.#model.find((x) => this.#config.getUniqueOfModel(x) === unique);\r\n\t}\r\n\r\n\toverride hostConnected() {\r\n\t\tif (this.#isConnected) return;\r\n\t\tthis.#isConnected = true;\r\n\t\tif (this.#enabled) {\r\n\t\t\trequestAnimationFrame(this.#initialize);\r\n\t\t}\r\n\t}\r\n\r\n\toverride hostDisconnected() {\r\n\t\tthis.#isConnected = false;\r\n\t\tif (this.#enabled) {\r\n\t\t\tthis.#uninitialize();\r\n\t\t}\r\n\t}\r\n\r\n\t#initialize = () => {\r\n\t\tif (this.#isConnected === false) return;\r\n\t\tif (this.#containerElement) {\r\n\t\t\t// This can happen, so no need to show an error as it seems to be happening in some cases. We will just reject. [NL]\r\n\t\t\t//console.error('Container element already initialized', this.#containerElement);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst containerEl = this.#config.containerSelector\r\n\t\t\t? this.#host.shadowRoot!.querySelector(this.#config.containerSelector)\r\n\t\t\t: this.#host;\r\n\r\n\t\tif (!containerEl) {\r\n\t\t\tif (this.#config.containerSelector) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t`Sorter could not find the container element, using this query selector '${this.#config.containerSelector}'.`,\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Sorter could not get its host element.');\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.#containerElement = containerEl as HTMLElement;\r\n\t\tthis.#useContainerShadowRoot = this.#containerElement === this.#host;\r\n\r\n\t\t// Only look at the shadowRoot if the containerElement is host.\r\n\t\tconst containerElement = this.#useContainerShadowRoot\r\n\t\t\t? (this.#containerElement.shadowRoot ?? this.#containerElement)\r\n\t\t\t: this.#containerElement;\r\n\t\tcontainerElement.addEventListener('dragover', this.#itemDraggedOver as unknown as EventListener);\r\n\t\tcontainerElement.addEventListener('drop', this.#itemDropped as unknown as EventListener);\r\n\r\n\t\tthis.#observer.disconnect();\r\n\r\n\t\tcontainerElement.querySelectorAll(this.#config.itemSelector).forEach((child) => {\r\n\t\t\tif (child.matches && child.matches(this.#config.itemSelector)) {\r\n\t\t\t\tthis.setupItem(child as ElementType);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.#observer.observe(containerElement, {\r\n\t\t\tchildList: true,\r\n\t\t\tsubtree: false,\r\n\t\t});\r\n\t};\r\n\r\n\t#uninitialize() {\r\n\t\t// Do something when host element is disconnected.\r\n\t\tif (UmbSorterController.activeSorter === (this as unknown as UmbSorterController<unknown>)) {\r\n\t\t\tUmbSorterController.activeSorter = undefined;\r\n\t\t\tif (UmbSorterController.activeElement) {\r\n\t\t\t\tthis.#handleDragEnd();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (UmbSorterController.dropSorter === (this as unknown as UmbSorterController<unknown>)) {\r\n\t\t\t// If we are the drop sorter, we can now remove out self to get into pure Native Drag n' drop.\r\n\t\t\tUmbSorterController.dropSorter = undefined;\r\n\t\t}\r\n\r\n\t\tif (UmbSorterController.lastIndicationSorter === (this as unknown as UmbSorterController<unknown>)) {\r\n\t\t\t// If we are the lastIndicationSorter, we can now remove out self to get into pure Native Drag n' drop.\r\n\t\t\tUmbSorterController.lastIndicationSorter = undefined;\r\n\t\t}\r\n\r\n\t\tthis.#observer.disconnect();\r\n\r\n\t\t// For auto scroller:\r\n\t\tthis.#scrollElement = null;\r\n\r\n\t\tif (this.#containerElement) {\r\n\t\t\t// Only look at the shadowRoot if the containerElement is host.\r\n\t\t\tconst containerElement = this.#useContainerShadowRoot\r\n\t\t\t\t? (this.#containerElement.shadowRoot ?? this.#containerElement)\r\n\t\t\t\t: this.#containerElement;\r\n\r\n\t\t\tcontainerElement.removeEventListener('dragover', this.#itemDraggedOver as unknown as EventListener);\r\n\t\t\tcontainerElement.removeEventListener('drop', this.#itemDropped as unknown as EventListener);\r\n\t\t\t(this.#containerElement as unknown) = undefined;\r\n\t\t}\r\n\r\n\t\tthis.#elements.forEach((item) => this.destroyItem(item));\r\n\t}\r\n\r\n\tasync #obtainIncomingItem(e: DragEvent) {\r\n\t\tif (\r\n\t\t\t!UmbSorterController.dropSorter &&\r\n\t\t\te.dataTransfer?.types.includes('text/umb-sorter-identifier#' + this.identifier.toString())\r\n\t\t) {\r\n\t\t\t// If we have no drop-sorter, and we share the same identifier, then we like to accept this drag.\r\n\t\t\tconst activeType: string | undefined = e.dataTransfer?.types.find((x) =>\r\n\t\t\t\tx.startsWith('text/umb-sorter-item-unique#'),\r\n\t\t\t);\r\n\t\t\tif (activeType) {\r\n\t\t\t\tconst activeUnique = activeType.split('#')?.[1];\r\n\r\n\t\t\t\tlet activeItem = this.#model.find((x) => this.#config.getUniqueOfModel(x) === activeUnique);\r\n\t\t\t\tif (activeItem) {\r\n\t\t\t\t\tUmbSorterController.activeSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\t}\r\n\t\t\t\t// test if unique is already in the model:\r\n\t\t\t\tif (!activeItem) {\r\n\t\t\t\t\t// Find the active item:\r\n\t\t\t\t\tactiveItem = await this.#config.onRequestDrop?.({ unique: activeUnique });\r\n\t\t\t\t\tUmbSorterController.activeSorter = undefined; // Important as we use this to know if we can remove the item via these Sorter references or if it is a Native Drop.\r\n\t\t\t\t\tif (!activeItem) {\r\n\t\t\t\t\t\t// Then we assume this item was not part of this sorters scope. This is the spot where inserting a new item from dataTransfer could be implemented.\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.hasItem(activeUnique)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\te.dataTransfer.setData('text/umb-sorter-item-accepted', 'true');\r\n\r\n\t\t\t\t// Set states:\r\n\t\t\t\tUmbSorterController.activeItem = activeItem;\r\n\t\t\t\tUmbSorterController.activeElement = undefined;\r\n\t\t\t\tUmbSorterController.activeDragElement = undefined;\r\n\t\t\t\tUmbSorterController.dropSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\tUmbSorterController.originalIndex = undefined;\r\n\t\t\t\tUmbSorterController.originalSorter = undefined;\r\n\r\n\t\t\t\t//UmbSorterController.activeSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\t//UmbSorterController.originalSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\twindow.addEventListener('mouseup', this.#handleMouseUp);\r\n\t\t\t\twindow.addEventListener('mouseout', this.#handleMouseUp);\r\n\t\t\t\twindow.addEventListener('mouseleave', this.#handleMouseUp);\r\n\t\t\t\twindow.addEventListener('mousemove', this.#handleMouseMove);\r\n\r\n\t\t\t\tif (!this.#scrollElement) {\r\n\t\t\t\t\tthis.#scrollElement = getParentScrollElement(this.#containerElement, true);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t#itemDraggedOver = async (e: DragEvent) => {\r\n\t\tconst newDrop = await this.#obtainIncomingItem(e);\r\n\t\tconst dropSorter = UmbSorterController.dropSorter as unknown as UmbSorterController<T, ElementType>;\r\n\r\n\t\tif (!dropSorter || dropSorter.identifier !== this.identifier) return;\r\n\r\n\t\tif (dropSorter === this) {\r\n\t\t\te.preventDefault();\r\n\t\t\tif (e.dataTransfer) {\r\n\t\t\t\te.dataTransfer.dropEffect = 'move';\r\n\t\t\t}\r\n\r\n\t\t\t// Do nothing as we are the active sorter.\r\n\t\t\tthis.#handleDragMove(e, newDrop);\r\n\r\n\t\t\t// Maybe we need to stop the event in this case.\r\n\r\n\t\t\t// Do not bubble up to parent sorters:\r\n\t\t\te.stopPropagation();\r\n\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\t// Indication if drop is good:\r\n\t\t\tif (this.updateAllowIndication(UmbSorterController.activeItem) === false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If so lets set the approaching sorter:\r\n\t\t\tUmbSorterController.dropSorter = this as unknown as UmbSorterController<unknown>;\r\n\r\n\t\t\t// Do not bubble up to parent sorters:\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\t};\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t#itemDropped = async (_e: DragEvent) => {\r\n\t\tthis.#handleMoveEnd();\r\n\t};\r\n\r\n\t#getDraggableElement(element: HTMLElement) {\r\n\t\tif (this.#config.draggableSelector) {\r\n\t\t\t// Concept for enabling getting element within ShadowRoot: (But it might need to be configurable, so its still possible to get light dom element(slotted), despite the host is a web-component with shadow-dom.) [NL]\r\n\t\t\tconst queryFromEl = element.shadowRoot ?? element;\r\n\t\t\treturn (queryFromEl.querySelector(this.#config.draggableSelector) as HTMLElement | undefined) ?? element;\r\n\t\t}\r\n\t\treturn element;\r\n\t}\r\n\r\n\t#getHandleElement(element: HTMLElement) {\r\n\t\tif (this.#config.handleSelector) {\r\n\t\t\t// Concept for enabling getting element within ShadowRoot: (But it might need to be configurable, so its still possible to get light dom element(slotted), despite the host is a web-component with shadow-dom.) [NL]\r\n\t\t\tconst queryFromEl = element.shadowRoot ?? element;\r\n\t\t\treturn (queryFromEl.querySelector(this.#config.handleSelector) as HTMLElement | undefined) ?? element;\r\n\t\t}\r\n\t\treturn element;\r\n\t}\r\n\r\n\t#getElement(innerElement: HTMLElement): HTMLElement | null {\r\n\t\tlet source = innerElement;\r\n\t\tlet element: HTMLElement | null = null;\r\n\t\twhile (!element) {\r\n\t\t\telement = source.closest(this.#config.itemSelector);\r\n\t\t\tif (!element) {\r\n\t\t\t\tconst containingElement = (source.getRootNode() as ShadowRoot).host;\r\n\t\t\t\tconst newSource =\r\n\t\t\t\t\tsource === containingElement\r\n\t\t\t\t\t\t? ((source.parentElement?.getRootNode() as ShadowRoot | undefined)?.host as HTMLElement | undefined)\r\n\t\t\t\t\t\t: (containingElement as HTMLElement);\r\n\t\t\t\tif (newSource) {\r\n\t\t\t\t\tsource = newSource;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn element;\r\n\t}\r\n\r\n\tsetupItem(element: ElementType) {\r\n\t\tif (this.#elements.includes(element)) {\r\n\t\t\tconsole.error('Element already setup', element);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.#config.ignorerSelector) {\r\n\t\t\tsetupIgnorerElements(element, this.#config.ignorerSelector);\r\n\t\t}\r\n\r\n\t\tif (!this.#config.disabledItemSelector || !element.matches(this.#config.disabledItemSelector)) {\r\n\t\t\t// Idea: to make sure on does not get initialized twice: if ((element as HTMLElement).draggable === true) return;\r\n\t\t\tconst draggableElement = this.#getDraggableElement(element);\r\n\t\t\tconst handleElement = this.#getHandleElement(element);\r\n\t\t\thandleElement.addEventListener('mousedown', this.#handleHandleMouseDown);\r\n\t\t\t// Will be set to true by the 'mousedown' event if approved:\r\n\t\t\t(draggableElement as HTMLElement).draggable = false;\r\n\t\t\tdraggableElement.addEventListener('dragstart', this.#handleDragStart);\r\n\t\t\tdraggableElement.addEventListener('dragend', this.#handleDragEnd);\r\n\t\t}\r\n\r\n\t\t// If we have a currentItem and the element matches, we should set the currentElement to this element.\r\n\t\tif (UmbSorterController.activeItem && this.#isActiveIdentifier()) {\r\n\t\t\tconst elUnique = this.#config.getUniqueOfElement(element);\r\n\t\t\tconst modelUnique = this.#config.getUniqueOfModel(UmbSorterController.activeItem);\r\n\t\t\tif (elUnique === modelUnique && elUnique !== undefined) {\r\n\t\t\t\tif (UmbSorterController.activeElement !== element) {\r\n\t\t\t\t\tthis.#setCurrentElement(element);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.#elements.push(element);\r\n\t\tthis.#elements = Array.from(new Set(this.#elements));\r\n\t}\r\n\r\n\tdestroyItem(element: HTMLElement) {\r\n\t\tif (this.#config.ignorerSelector) {\r\n\t\t\tdestroyIgnorerElements(element, this.#config.ignorerSelector);\r\n\t\t}\r\n\r\n\t\tconst draggableElement = this.#getDraggableElement(element);\r\n\t\tdraggableElement.removeEventListener('dragstart', this.#handleDragStart);\r\n\t\tdraggableElement.removeEventListener('dragend', this.#handleDragEnd);\r\n\r\n\t\tconst handleElement = this.#getHandleElement(element);\r\n\t\thandleElement.removeEventListener('mousedown', this.#handleHandleMouseDown);\r\n\r\n\t\t(draggableElement as HTMLElement).draggable = false;\r\n\r\n\t\tthis.#elements = this.#elements.filter((x) => x !== element);\r\n\t}\r\n\r\n\t#setupPlaceholderStyle() {\r\n\t\tif (this.#config.placeholderClass) {\r\n\t\t\tUmbSorterController.activeElement?.classList.add(this.#config.placeholderClass);\r\n\t\t}\r\n\t\tif (this.#config.placeholderAttr) {\r\n\t\t\tUmbSorterController.activeElement?.setAttribute(this.#config.placeholderAttr, '');\r\n\t\t}\r\n\t}\r\n\t#removePlaceholderStyle() {\r\n\t\tif (this.#config.placeholderClass) {\r\n\t\t\tUmbSorterController.activeElement?.classList.remove(this.#config.placeholderClass);\r\n\t\t}\r\n\t\tif (this.#config.placeholderAttr) {\r\n\t\t\tUmbSorterController.activeElement?.removeAttribute(this.#config.placeholderAttr);\r\n\t\t}\r\n\t}\r\n\r\n\t#setCurrentElement(element: ElementType) {\r\n\t\tUmbSorterController.activeElement = element;\r\n\t\tUmbSorterController.activeDragElement = this.#getDraggableElement(element);\r\n\r\n\t\tif (!UmbSorterController.activeDragElement) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'Could not find drag element, query was made with the `draggableSelector` of \"' +\r\n\t\t\t\t\tthis.#config.draggableSelector +\r\n\t\t\t\t\t'\"',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t//UmbSorterController.activeDragElement?.addEventListener('dragend', this.#handleDragEnd);\r\n\t\tthis.#setupPlaceholderStyle();\r\n\t}\r\n\r\n\t#handleHandleMouseDown = (event: MouseEvent) => {\r\n\t\tconst target = event.target as HTMLElement;\r\n\t\tconst composedPath = event.composedPath();\r\n\r\n\t\t// Test for a match with the ignore selectors:\r\n\t\tif (this.#config.ignorerSelector) {\r\n\t\t\tif (target.matches(this.#config.ignorerSelector)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// filter composedPath for only elements descending from the event.target:\r\n\t\t\tconst index = composedPath.indexOf(target);\r\n\t\t\tconst composedPathBelowTarget = index !== -1 ? composedPath.slice(0, index) : undefined;\r\n\r\n\t\t\tif (composedPathBelowTarget) {\r\n\t\t\t\tconst ignoreThis = composedPathBelowTarget.some((x) =>\r\n\t\t\t\t\t(x as HTMLElement).matches?.('[draggable=\"false\"],' + this.#config.ignorerSelector),\r\n\t\t\t\t);\r\n\t\t\t\tif (ignoreThis) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (event.target && event.button === 0) {\r\n\t\t\tconst element = this.#getElement(event.target as HTMLElement);\r\n\t\t\tif (!element) return;\r\n\t\t\tconst dragElement = this.#getDraggableElement(element);\r\n\t\t\tif (!dragElement) return;\r\n\r\n\t\t\tdragElement.addEventListener('mouseup', this.#handleDragElementMouseUp);\r\n\t\t\tdragElement.draggable = true;\r\n\t\t}\r\n\t};\r\n\r\n\t#handleDragElementMouseUp = (event: MouseEvent) => {\r\n\t\tconst target = event.target as HTMLElement | null;\r\n\t\tif (target) {\r\n\t\t\ttarget.removeEventListener('mouseup', this.#handleDragElementMouseUp);\r\n\t\t\ttarget.draggable = false;\r\n\t\t}\r\n\t};\r\n\r\n\t#handleDragStart = (event: DragEvent) => {\r\n\t\tconst element = (event.target as HTMLElement).closest(this.#config.itemSelector) as HTMLElement | null;\r\n\t\tif (!element) return;\r\n\r\n\t\tif (UmbSorterController.activeElement && UmbSorterController.activeElement !== element) {\r\n\t\t\t// TODO: Remove this console log at one point.\r\n\t\t\tconsole.error('drag start ws cancelled due to another drag was still active');\r\n\t\t\tthis.#handleDragEnd();\r\n\t\t}\r\n\r\n\t\tif (!this.#scrollElement) {\r\n\t\t\tthis.#scrollElement = getParentScrollElement(this.#containerElement, true);\r\n\t\t}\r\n\r\n\t\tconst containerRect = this.#containerElement.getBoundingClientRect();\r\n\t\tthis.#containerElement.style.minHeight = containerRect.height + 'px';\r\n\r\n\t\tthis.#setCurrentElement(element as ElementType);\r\n\r\n\t\t//UmbSorterController.activeDragElement?.addEventListener('dragend', this.#handleDragEnd);\r\n\t\twindow.addEventListener('mouseup', this.#handleMouseUp);\r\n\t\twindow.addEventListener('mouseout', this.#handleMouseUp);\r\n\t\twindow.addEventListener('mouseleave', this.#handleMouseUp);\r\n\t\twindow.addEventListener('mousemove', this.#handleMouseMove);\r\n\r\n\t\tUmbSorterController.activeItem = this.getItemOfElement(UmbSorterController.activeElement! as ElementType);\r\n\t\tif (!UmbSorterController.activeItem) {\r\n\t\t\tconsole.error('Could not find item related to this element.', UmbSorterController.activeElement);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst activeUnique = this.#config.getUniqueOfModel(UmbSorterController.activeItem);\r\n\r\n\t\tevent.stopPropagation();\r\n\t\tif (event.dataTransfer) {\r\n\t\t\tconst dragElement = UmbSorterController.activeDragElement ?? element;\r\n\t\t\tconst activeDragRect = dragElement.getBoundingClientRect();\r\n\t\t\tevent.dataTransfer.setDragImage(dragElement, event.clientX - activeDragRect.x, event.clientY - activeDragRect.y);\r\n\t\t\tevent.dataTransfer.dropEffect = 'move';\r\n\t\t\tevent.dataTransfer.effectAllowed = 'all'; // copyMove when we enhance the drag with clipboard data.// defaults to 'all'\r\n\t\t\tevent.dataTransfer.setData('text/umb-sorter-identifier#' + this.identifier.toString(), 'true');\r\n\t\t\tevent.dataTransfer.setData('text/umb-sorter-item-unique#' + activeUnique?.toString(), 'true');\r\n\t\t}\r\n\r\n\t\tUmbSorterController.originalSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t// Notice, it is acceptable here to get index via object reference, but only cause there has been no change at this stage, otherwise we cannot trust the object instance is represented in the model — it could have mutated or been cloned [NL]\r\n\t\tUmbSorterController.originalIndex = this.#model.findIndex((x) => this.#config.getUniqueOfModel(x) === activeUnique);\r\n\r\n\t\t// Get the current index of the item:\r\n\t\tUmbSorterController.activeIndex = UmbSorterController.originalIndex;\r\n\t\tUmbSorterController.activeDragElement!.style.transform = 'translateZ(0)'; // Solves problem with FireFox and ShadowDom in the drag-image.\r\n\r\n\t\tif (this.#config.dataTransferResolver) {\r\n\t\t\tthis.#config.dataTransferResolver(event.dataTransfer, UmbSorterController.activeItem as T);\r\n\t\t}\r\n\r\n\t\tif (this.#config.onStart) {\r\n\t\t\tthis.#config.onStart({\r\n\t\t\t\titem: UmbSorterController.activeItem,\r\n\t\t\t\telement: UmbSorterController.activeElement! as ElementType,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Assuming we can only drag one thing at the time.\r\n\t\tUmbSorterController.activeSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\tUmbSorterController.dropSorter = this as unknown as UmbSorterController<unknown>;\r\n\r\n\t\t// We must wait one frame before changing the look of the block.\r\n\t\tUmbSorterController.rqaId = requestAnimationFrame(() => {\r\n\t\t\t// It should be okay to use the same rqaId, as the move does not, or is okay not, to happen on first frame/drag-move.\r\n\t\t\tUmbSorterController.rqaId = undefined;\r\n\t\t\tif (UmbSorterController.activeDragElement) {\r\n\t\t\t\tUmbSorterController.activeDragElement.style.transform = '';\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t#handleDragEnd = (event?: DragEvent) => {\r\n\t\t// If browser thinks this was a cancelled move, we should revert the move. (based on dropEffect === 'none') [NL]\r\n\t\t// But notice, this also count when releasing the mouse outside the sorters element, this i'm not sure if I agree on, would be ideal only to revert if ESC was pressed. [NL]\r\n\t\tif (UmbSorterController.originalSorter && event?.dataTransfer != null && event.dataTransfer.dropEffect === 'none') {\r\n\t\t\t// Revert move, to start position.\r\n\t\t\tUmbSorterController.originalSorter.moveItemInModel(\r\n\t\t\t\tUmbSorterController.originalIndex ?? 0,\r\n\t\t\t\tUmbSorterController.activeSorter,\r\n\t\t\t);\r\n\t\t} else if (UmbSorterController.originalSorter === undefined) {\r\n\t\t\t// The external dropped item, should be reverted back to where it came from.\r\n\t\t\t// TODO: Revert back to original position.\r\n\t\t}\r\n\r\n\t\tthis.#handleMoveEnd();\r\n\t};\r\n\r\n\t/**\r\n\t * Listen to mouse move, to check if the mouse is still down.\r\n\t * This event does not happen while dragging, so its a indication that the drag is over.\r\n\t */\r\n\t#handleMouseMove = (event: MouseEvent) => {\r\n\t\t// buttons should reprensent which buttons are held, and 0 => represents no button is pressed. [NL]\r\n\t\tif (event.buttons === 0) {\r\n\t\t\tthis.#handleMoveEnd();\r\n\t\t}\r\n\t};\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\t#handleMouseUp = (event?: MouseEvent) => {\r\n\t\tthis.#handleMoveEnd();\r\n\t};\r\n\r\n\t#handleMoveEnd() {\r\n\t\tthis.#cleanupMove();\r\n\t\tthis.#stopAutoScroll();\r\n\t\tthis.removeAllowIndication();\r\n\r\n\t\tif (UmbSorterController.activeElement && UmbSorterController.activeItem) {\r\n\t\t\tconst element = UmbSorterController.activeElement;\r\n\t\t\tif (this.#config.onEnd) {\r\n\t\t\t\tthis.#config.onEnd({\r\n\t\t\t\t\titem: UmbSorterController.activeItem,\r\n\t\t\t\t\telement: element as ElementType,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (UmbSorterController.activeDragElement) {\r\n\t\t\tUmbSorterController.activeDragElement.style.transform = '';\r\n\t\t\tUmbSorterController.activeDragElement.draggable = false;\r\n\t\t\tUmbSorterController.activeDragElement.removeEventListener('dragend', this.#handleDragEnd);\r\n\t\t}\r\n\r\n\t\tthis.#removePlaceholderStyle();\r\n\r\n\t\tif (UmbSorterController.rqaId) {\r\n\t\t\tcancelAnimationFrame(UmbSorterController.rqaId);\r\n\t\t\tUmbSorterController.rqaId = undefined;\r\n\t\t}\r\n\r\n\t\tUmbSorterController.activeItem = undefined;\r\n\t\tUmbSorterController.activeElement = undefined;\r\n\t\tUmbSorterController.activeDragElement = undefined;\r\n\t\tUmbSorterController.activeSorter = undefined;\r\n\t\tUmbSorterController.dropSorter = undefined;\r\n\t\tUmbSorterController.originalIndex = undefined;\r\n\t\tUmbSorterController.originalSorter = undefined;\r\n\t\tthis.#dragX = 0;\r\n\t\tthis.#dragY = 0;\r\n\t}\r\n\r\n\t#cleanupMove() {\r\n\t\tif (this.#containerElement) {\r\n\t\t\tthis.#containerElement.style.minHeight = '';\r\n\t\t}\r\n\t\twindow.removeEventListener('mouseup', this.#handleMouseUp);\r\n\t\twindow.removeEventListener('mouseout', this.#handleMouseUp);\r\n\t\twindow.removeEventListener('mouseleave', this.#handleMouseUp);\r\n\t\twindow.removeEventListener('mousemove', this.#handleMouseMove);\r\n\t}\r\n\r\n\t#handleDragMove(event: DragEvent, instant?: boolean) {\r\n\t\tif (!UmbSorterController.activeItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst clientX = (event as unknown as TouchEvent).touches\r\n\t\t\t? (event as unknown as TouchEvent).touches[0].clientX\r\n\t\t\t: event.clientX;\r\n\t\tconst clientY = (event as unknown as TouchEvent).touches\r\n\t\t\t? (event as unknown as TouchEvent).touches[0].clientY\r\n\t\t\t: event.clientY;\r\n\t\tif (clientX !== 0 && clientY !== 0) {\r\n\t\t\tif (this.#dragX === clientX && this.#dragY === clientY) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.#dragX = clientX;\r\n\t\t\tthis.#dragY = clientY;\r\n\r\n\t\t\tthis.handleAutoScroll(this.#dragX, this.#dragY);\r\n\r\n\t\t\tif (instant) {\r\n\t\t\t\tthis.#updateDragMove();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst activeDragRect = UmbSorterController.activeDragElement?.getBoundingClientRect();\r\n\t\t\tconst insideCurrentRect = activeDragRect ? isWithinRect(this.#dragX, this.#dragY, activeDragRect) : false;\r\n\t\t\tif (!insideCurrentRect) {\r\n\t\t\t\tif (UmbSorterController.rqaId === undefined) {\r\n\t\t\t\t\tUmbSorterController.rqaId = requestAnimationFrame(this.#updateDragMove);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#updateDragMove = () => {\r\n\t\tUmbSorterController.rqaId = undefined;\r\n\t\tif (!UmbSorterController.activeItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ((UmbSorterController.dropSorter as any) !== this) {\r\n\t\t\tthrow new Error('Drop sorter is not this sorter');\r\n\t\t}\r\n\r\n\t\t// Maybe no need to check this twice, like we do it before the RAF an inside it, I think its fine to choose one of them.\r\n\t\tconst currentElementRect = UmbSorterController.activeElement?.getBoundingClientRect() ?? new DOMRect(0, 0, 0, 0);\r\n\t\tconst insideCurrentRect = isWithinRect(this.#dragX, this.#dragY, currentElementRect);\r\n\t\tif (insideCurrentRect) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst containerElement = this.#useContainerShadowRoot\r\n\t\t\t? (this.#containerElement.shadowRoot ?? this.#containerElement)\r\n\t\t\t: this.#containerElement;\r\n\r\n\t\t// We want to retrieve the children of the container, every time to ensure we got the right order and index\r\n\t\tconst orderedContainerElements = Array.from(containerElement.querySelectorAll(this.#config.itemSelector));\r\n\r\n\t\tconst currentContainerRect = this.#containerElement.getBoundingClientRect();\r\n\r\n\t\t// gather elements on the same row.\r\n\t\tconst elementsInSameRow = [];\r\n\t\tlet placeholderIsInThisRow = false;\r\n\t\tfor (const el of orderedContainerElements) {\r\n\t\t\tconst elRect = el.getBoundingClientRect();\r\n\t\t\t// gather elements on the same row.\r\n\t\t\tif (this.#dragY >= elRect.top && this.#dragY <= elRect.bottom) {\r\n\t\t\t\tconst dragElement = this.#getDraggableElement(el as unknown as HTMLElement);\r\n\t\t\t\tif (dragElement) {\r\n\t\t\t\t\tconst dragElementRect = dragElement.getBoundingClientRect();\r\n\t\t\t\t\tif (el !== UmbSorterController.activeElement) {\r\n\t\t\t\t\t\telementsInSameRow.push({ el: el, dragRect: dragElementRect });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tplaceholderIsInThisRow = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet lastDistance = Infinity;\r\n\t\tlet foundEl: HTMLElement | undefined = undefined;\r\n\t\tlet foundElDragRect!: DOMRect;\r\n\t\tlet placeAfter = false;\r\n\t\telementsInSameRow.forEach((sameRow) => {\r\n\t\t\tconst centerX = sameRow.dragRect.left + sameRow.dragRect.width * 0.5;\r\n\t\t\tconst distance = Math.abs(this.#dragX - centerX);\r\n\t\t\t/*const distance = Math.min(\r\n\t\t\t\tMath.abs(this.#dragX - sameRow.dragRect.left),\r\n\t\t\t\tMath.abs(this.#dragX - sameRow.dragRect.right),\r\n\t\t\t);*/\r\n\t\t\tif (distance < lastDistance) {\r\n\t\t\t\tfoundEl = sameRow.el as HTMLElement;\r\n\t\t\t\tfoundElDragRect = sameRow.dragRect;\r\n\t\t\t\tlastDistance = distance;\r\n\t\t\t\tplaceAfter = this.#dragX > centerX;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst activeUnique = this.#config.getUniqueOfModel(UmbSorterController.activeItem);\r\n\t\tlet activeIndex: number | null = this.#model.findIndex((x) => this.#config.getUniqueOfModel(x) === activeUnique);\r\n\t\tif (activeIndex === -1) {\r\n\t\t\tactiveIndex = null;\r\n\t\t}\r\n\r\n\t\tif (foundEl) {\r\n\t\t\t// If we are on top or closest to our self, we should not do anything.\r\n\t\t\tif (foundEl === UmbSorterController.activeElement) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst foundModel = this.getItemOfElement(foundEl);\r\n\t\t\tif (!foundModel) {\r\n\t\t\t\tthrow new Error('Could not find model of found element');\r\n\t\t\t}\r\n\r\n\t\t\tlet relatedIndex: number | null = this.#model.indexOf(foundModel);\r\n\t\t\tif (relatedIndex === -1) {\r\n\t\t\t\trelatedIndex = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (activeIndex !== null && relatedIndex !== null) {\r\n\t\t\t\t// We have both indexes, aka. both elements are in this list.\r\n\t\t\t\tconst widthDiff = Math.max(foundElDragRect.width - currentElementRect.width, 0);\r\n\t\t\t\tif (activeIndex < relatedIndex && foundElDragRect.left + widthDiff < this.#dragX) {\r\n\t\t\t\t\t// If we are located before and we are just enough over to get located after, then lets do it already.\r\n\t\t\t\t\tplaceAfter = true;\r\n\t\t\t\t} else if (activeIndex > relatedIndex && foundElDragRect.right - widthDiff > this.#dragX) {\r\n\t\t\t\t\t// If we are located after and we are just enough over to get located before, then lets do it already.\r\n\t\t\t\t\tplaceAfter = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst placementResult: UmbSorterResolvePlacementReturn = this.#config.resolvePlacement\r\n\t\t\t\t? this.#config.resolvePlacement({\r\n\t\t\t\t\t\tcontainerElement: this.#containerElement,\r\n\t\t\t\t\t\tcontainerRect: currentContainerRect,\r\n\t\t\t\t\t\titem: UmbSorterController.activeItem,\r\n\t\t\t\t\t\titemIndex: activeIndex,\r\n\t\t\t\t\t\telement: UmbSorterController.activeElement as ElementType | undefined,\r\n\t\t\t\t\t\telementRect: currentElementRect,\r\n\t\t\t\t\t\trelatedElement: foundEl,\r\n\t\t\t\t\t\trelatedModel: foundModel,\r\n\t\t\t\t\t\trelatedRect: foundElDragRect,\r\n\t\t\t\t\t\trelatedIndex: relatedIndex,\r\n\t\t\t\t\t\tplaceholderIsInThisRow: placeholderIsInThisRow,\r\n\t\t\t\t\t\thorizontalPlaceAfter: placeAfter,\r\n\t\t\t\t\t\tpointerX: this.#dragX,\r\n\t\t\t\t\t\tpointerY: this.#dragY,\r\n\t\t\t\t\t})\r\n\t\t\t\t: true;\r\n\r\n\t\t\tif (placementResult === null) {\r\n\t\t\t\t// The resolvePlacement method has chosen to back out of this move.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet verticalDirection = true;\r\n\t\t\tif (typeof placementResult === 'object') {\r\n\t\t\t\tverticalDirection = placementResult.verticalDirection ?? false;\r\n\t\t\t\tplaceAfter = placementResult.placeAfter;\r\n\t\t\t} else {\r\n\t\t\t\tverticalDirection = placementResult ?? false;\r\n\t\t\t\tif (verticalDirection === true) {\r\n\t\t\t\t\t// Lets check if we should place after or before, based on a vertical algortihm.\r\n\t\t\t\t\tplaceAfter = this.#dragY > foundElDragRect.top + foundElDragRect.height * 0.5;\r\n\r\n\t\t\t\t\t// There is room for improvements, if we are in the same model:\r\n\t\t\t\t\tif (activeIndex !== null && relatedIndex !== null) {\r\n\t\t\t\t\t\t// We have both indexes, aka. both elements are in this list.\r\n\t\t\t\t\t\tconst heightDiff = Math.max(foundElDragRect.height - currentElementRect.height, 0);\r\n\t\t\t\t\t\tif (activeIndex < relatedIndex && this.#dragY > foundElDragRect.top + heightDiff) {\r\n\t\t\t\t\t\t\t// If active is located above and we are just enough above to get located after, then lets do it already.\r\n\t\t\t\t\t\t\tplaceAfter = true;\r\n\t\t\t\t\t\t} else if (activeIndex > relatedIndex && this.#dragY < foundElDragRect.bottom - heightDiff) {\r\n\t\t\t\t\t\t\t// If active is located below and we are just enough above to get located before, then lets do it already.\r\n\t\t\t\t\t\t\tplaceAfter = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (verticalDirection === true) {\r\n\t\t\t\tlet el;\r\n\t\t\t\tif (placeAfter === false) {\r\n\t\t\t\t\tlet lastLeft = foundElDragRect.left;\r\n\t\t\t\t\telementsInSameRow.map((x) => {\r\n\t\t\t\t\t\tif (x.dragRect.left < lastLeft) {\r\n\t\t\t\t\t\t\tlastLeft = x.dragRect.left;\r\n\t\t\t\t\t\t\tel = x.el;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet lastRight = foundElDragRect.right;\r\n\t\t\t\t\telementsInSameRow.map((x) => {\r\n\t\t\t\t\t\tif (x.dragRect.right > lastRight) {\r\n\t\t\t\t\t\t\tlastRight = x.dragRect.right;\r\n\t\t\t\t\t\t\tel = x.el;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (el) {\r\n\t\t\t\t\tfoundEl = el;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst foundElIndex = orderedContainerElements.indexOf(foundEl);\r\n\t\t\tconst newIndex = placeAfter ? foundElIndex + 1 : foundElIndex;\r\n\t\t\tthis.#moveElementTo(newIndex);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// We skipped the above part cause we are above or below container, or within an empty container, or in a blank space:\r\n\r\n\t\t// Indication if drop is good:\r\n\t\tif (this.updateAllowIndication(UmbSorterController.activeItem) === false) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.#model.length === 0) {\r\n\t\t\t// Here is no items, so we should just move into the top of the container.\r\n\t\t\tthis.#moveElementTo(0);\r\n\t\t} else if (this.#dragY < currentContainerRect.top) {\r\n\t\t\tthis.#moveElementTo(0);\r\n\t\t} else if (this.#dragY > currentContainerRect.bottom) {\r\n\t\t\tthis.#moveElementTo(-1);\r\n\t\t} else {\r\n\t\t\t// There was no target, but we are still inside. aka. in a vertical gap/gutter/blankspace.\r\n\t\t\tif (this.#model.length > 1 && activeIndex !== null) {\r\n\t\t\t\tconst belowActive = this.#dragY > currentElementRect.bottom;\r\n\r\n\t\t\t\tconst foundTarget =\r\n\t\t\t\t\tbelowActive === false\r\n\t\t\t\t\t\t? this.#findIndexToMoveTo(0, activeIndex)\r\n\t\t\t\t\t\t: this.#findIndexToMoveTo(activeIndex, this.#model.length);\r\n\r\n\t\t\t\tif (foundTarget) {\r\n\t\t\t\t\tthis.#moveElementTo(foundTarget);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t#findIndexToMoveTo(a: number, b: number): number | undefined {\r\n\t\tif (a === b) {\r\n\t\t\treturn a;\r\n\t\t}\r\n\t\tconst halfWay = a + Math.round((b - a) * 0.5);\r\n\r\n\t\t// if we hit one of the points, then lets just move to the other point.\r\n\t\tif (halfWay === a || halfWay === b) {\r\n\t\t\treturn b;\r\n\t\t}\r\n\r\n\t\tconst belowHalf = this.#isPointerBelowTargetElement(halfWay);\r\n\t\tif (belowHalf === null) {\r\n\t\t\tthrow new Error('Could not determine if below target');\r\n\t\t}\r\n\r\n\t\tif (belowHalf) {\r\n\t\t\treturn this.#findIndexToMoveTo(halfWay, b);\r\n\t\t} else {\r\n\t\t\treturn this.#findIndexToMoveTo(a, halfWay);\r\n\t\t}\r\n\t}\r\n\r\n\t#isPointerBelowTargetElement(targetIndex: number) {\r\n\t\tif (targetIndex > 0 && targetIndex < this.#model.length) {\r\n\t\t\tconst element = this.getElementOfItem(this.#model[targetIndex]);\r\n\t\t\tif (element) {\r\n\t\t\t\t// Below this one == true, otherwise false.\r\n\t\t\t\treturn this.#dragY > element?.getBoundingClientRect().bottom;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t//\r\n\t// TODO: Should rename to move item to.. [NL]\r\n\tasync #moveElementTo(newIndex: number) {\r\n\t\tif (!UmbSorterController.activeItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst requestingSorter = UmbSorterController.dropSorter;\r\n\t\tif (!requestingSorter) {\r\n\t\t\tthrow new Error('Could not find requestingSorter');\r\n\t\t}\r\n\t\tif ((requestingSorter as any) !== this) {\r\n\t\t\tthrow new Error('Requesting sorter is not this sorter');\r\n\t\t}\r\n\r\n\t\t// If same container and same index, do nothing:\r\n\t\tif (requestingSorter === UmbSorterController.activeSorter && UmbSorterController.activeIndex === newIndex) return;\r\n\r\n\t\tawait requestingSorter.moveItemInModel(newIndex, UmbSorterController.activeSorter);\r\n\t}\r\n\r\n\t/** Management methods: */\r\n\r\n\tpublic getItemOfElement(element: ElementType) {\r\n\t\tif (!element) {\r\n\t\t\tthrow new Error('Element was not defined');\r\n\t\t}\r\n\t\tconst elementUnique = this.#config.getUniqueOfElement(element);\r\n\t\tif (elementUnique === undefined) {\r\n\t\t\tconsole.error('Could not find unique of element', element);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn this.#model.find((entry: T) => elementUnique === this.#config.getUniqueOfModel(entry));\r\n\t}\r\n\r\n\tpublic getElementOfItem(item: T) {\r\n\t\tconst unique = this.#config.getUniqueOfModel(item);\r\n\t\tif (unique === undefined) {\r\n\t\t\tconsole.error('Sorter could not find unique of item', item);\r\n\t\t\t//throw new Error('Sorter could not find unique of item');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn this.#elements.find((element) => unique === this.#config.getUniqueOfElement(element));\r\n\t}\r\n\r\n\tpublic async removeItem(item: T) {\r\n\t\tif (!item) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.#config.performItemRemove) {\r\n\t\t\treturn (await this.#config.performItemRemove({ item })) ?? false;\r\n\t\t} else {\r\n\t\t\tconst itemUnique = this.#config.getUniqueOfModel(item);\r\n\t\t\tconst newModel = this.#model.filter((x) => this.#config.getUniqueOfModel(x) !== itemUnique);\r\n\t\t\tif (this.#model.length !== newModel.length) {\r\n\t\t\t\tthis.#model = newModel;\r\n\t\t\t\tthis.#config.onChange?.({ model: newModel, item });\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic hasOtherItemsThan(item: T) {\r\n\t\treturn this.#model.filter((x) => x !== item).length > 0;\r\n\t}\r\n\r\n\tpublic async moveItemInModel(newIndex: number, fromCtrl: UmbSorterController<T, ElementType> | undefined) {\r\n\t\tif (!UmbSorterController.activeItem) {\r\n\t\t\tconsole.error('There is no active item to move');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst itemUnique = this.#config.getUniqueOfModel(UmbSorterController.activeItem);\r\n\t\tif (!itemUnique) {\r\n\t\t\tconsole.error('Failed to retrieve active item unique');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet item: T | undefined;\r\n\t\tif (fromCtrl) {\r\n\t\t\t// If we got a fromCtrl, we should use it to get the item, to verify that it holds the model.\r\n\t\t\t// We use the getItem method to find the current item/object of this entry, as we cannot trust the object instance(activeItem) to be the same as in the model. [NL]\r\n\t\t\t// So notice, item in this method is the real modal entry reference, where in many other cases we use the activeItem which might not be up to date with the real entry of the model. [NL]\r\n\t\t\tconst foundTheItem = fromCtrl.getItem(itemUnique);\r\n\t\t\tif (!foundTheItem) {\r\n\t\t\t\tconsole.error('Could not find item of model to move', itemUnique, this.#model);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\titem = foundTheItem;\r\n\t\t} else {\r\n\t\t\titem = UmbSorterController.activeItem; //this.#model.find((x) => this.#config.getUniqueOfModel(x) === itemUnique) as T | undefined;\r\n\t\t\tif (!item) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If we do not have a formCtrl, then it means that we dont know where it comes from, like via native drag across the Sorters awareness.\r\n\r\n\t\tif (this.notifyRequestMove({ item }) === false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet localMove = fromCtrl === (this as any);\r\n\r\n\t\tif (!localMove) {\r\n\t\t\t// Not a local move, so we have to switch container to continue:\r\n\r\n\t\t\t// Notice if fromCtrl is not defined this is properly a native drop.\r\n\t\t\tif (fromCtrl) {\r\n\t\t\t\tif ((await fromCtrl.removeItem(item)) !== true) {\r\n\t\t\t\t\tconsole.error('Sorter could not remove item before moving to a new container');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else if (!fromCtrl) {\r\n\t\t\t\t// Before we react to the external factor, lets see if we already got it in our model.\r\n\t\t\t\t// Remove from the external model.\r\n\t\t\t\tif (!this.#config.requestExternalRemove) {\r\n\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t'Sorter needs the requestExternalRemove to be defined, therefor we cannot drop the external item',\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tUmbSorterController.activeSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\tfromCtrl = this as unknown as UmbSorterController<T, ElementType>;\r\n\r\n\t\t\t\tif ((await this.#config.requestExternalRemove({ item })) !== true) {\r\n\t\t\t\t\tconsole.error('Sorter could not remove the item before moving to a new container');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif ((await this.#config.requestExternalInsert?.({ item })) !== true) {\r\n\t\t\t\t\tconsole.error('Sorter could not insert the item into the new container');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t// This requestExternalInsert ^^ could have updated the model already. if so we should skip ahead to just move the item as a local move.\r\n\t\t\t\tif (this.#model.find((x) => this.#config.getUniqueOfModel(x) === itemUnique)) {\r\n\t\t\t\t\tlocalMove = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!localMove) {\r\n\t\t\tif (this.#config.performItemInsert) {\r\n\t\t\t\tconst result = await this.#config.performItemInsert({ item, newIndex });\r\n\t\t\t\tif (result === false) {\r\n\t\t\t\t\tconsole.error('Sync could not insert after a move a new container');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If everything went well, we can set the new activeSorter (and dropSorter) to this, as we are switching container. [NL]\r\n\t\t\t\tUmbSorterController.activeSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\tUmbSorterController.dropSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\tUmbSorterController.activeIndex =\r\n\t\t\t\t\tthis.#model.findIndex((x) => this.#config.getUniqueOfModel(x) === itemUnique) ?? 0;\r\n\t\t\t} else {\r\n\t\t\t\tconst newModel = [...this.#model];\r\n\t\t\t\tnewModel.splice(newIndex, 0, item);\r\n\t\t\t\tthis.#model = newModel;\r\n\r\n\t\t\t\tthis.#config.onContainerChange?.({\r\n\t\t\t\t\tmodel: newModel,\r\n\t\t\t\t\titem,\r\n\t\t\t\t\tfrom: fromCtrl as unknown as UmbSorterController<T, ElementType> | undefined,\r\n\t\t\t\t});\r\n\t\t\t\tthis.#config.onChange?.({ model: newModel, item });\r\n\r\n\t\t\t\t// If everything went well, we can set the new activeSorter (and dropSorter) to this, as we are switching container. [NL]\r\n\t\t\t\tUmbSorterController.activeSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\tUmbSorterController.dropSorter = this as unknown as UmbSorterController<unknown>;\r\n\t\t\t\tUmbSorterController.activeIndex = newIndex;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (localMove) {\r\n\t\t\t// Local move:\r\n\r\n\t\t\tconst oldIndex = this.#model.findIndex((x) => this.#config.getUniqueOfModel(x) === itemUnique);\r\n\t\t\tif (oldIndex === -1) {\r\n\t\t\t\tconsole.error('Could not find item in model when performing internal move', this.getHostElement(), this.#model);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.#config.performItemMove) {\r\n\t\t\t\tconst result = await this.#config.performItemMove({ item, newIndex, oldIndex });\r\n\t\t\t\tif (result === false) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst newModel = [...this.#model];\r\n\t\t\t\tnewModel.splice(oldIndex, 1);\r\n\t\t\t\tif (oldIndex <= newIndex) {\r\n\t\t\t\t\tnewIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tnewModel.splice(newIndex, 0, item);\r\n\t\t\t\tthis.#model = newModel;\r\n\t\t\t\tthis.#config.onChange?.({ model: newModel, item });\r\n\t\t\t}\r\n\r\n\t\t\tUmbSorterController.activeIndex = newIndex;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tupdateAllowIndication(item: T) {\r\n\t\t// Remove old indication:\r\n\t\tif (UmbSorterController.lastIndicationSorter && UmbSorterController.lastIndicationSorter !== (this as unknown)) {\r\n\t\t\tUmbSorterController.lastIndicationSorter.notifyAllowed();\r\n\t\t}\r\n\t\tUmbSorterController.lastIndicationSorter = this as unknown as UmbSorterController<unknown>;\r\n\r\n\t\tif (this.notifyRequestMove({ item: item }) === true) {\r\n\t\t\tthis.notifyAllowed();\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tthis.notifyDisallowed(); // This block is not accepted to we will indicate that its not allowed.\r\n\t\treturn false;\r\n\t}\r\n\tremoveAllowIndication() {\r\n\t\t// Remove old indication:\r\n\t\tif (UmbSorterController.lastIndicationSorter) {\r\n\t\t\tUmbSorterController.lastIndicationSorter.notifyAllowed();\r\n\t\t}\r\n\t\tUmbSorterController.lastIndicationSorter = undefined;\r\n\t}\r\n\r\n\t// TODO: Move auto scroll into its own class?\r\n\t#autoScrollRAF: number | null = null;\r\n\t#autoScrollEl = document.scrollingElement || document.documentElement;\r\n\tprivate autoScrollX = 0;\r\n\tprivate autoScrollY = 0;\r\n\r\n\tprivate handleAutoScroll(clientX: number, clientY: number) {\r\n\t\tlet scrollRect: DOMRect | null = null;\r\n\t\tif (this.#scrollElement) {\r\n\t\t\tthis.#autoScrollEl = this.#scrollElement;\r\n\t\t\tscrollRect = this.#autoScrollEl.getBoundingClientRect();\r\n\t\t} else {\r\n\t\t\tthis.#autoScrollEl = document.scrollingElement || document.documentElement;\r\n\t\t\tscrollRect = {\r\n\t\t\t\ttop: 0,\r\n\t\t\t\tleft: 0,\r\n\t\t\t\tbottom: window.innerHeight,\r\n\t\t\t\tright: window.innerWidth,\r\n\t\t\t\theight: window.innerHeight,\r\n\t\t\t\twidth: window.innerWidth,\r\n\t\t\t} as DOMRect;\r\n\t\t}\r\n\r\n\t\tconst scrollWidth = this.#autoScrollEl.scrollWidth;\r\n\t\tconst scrollHeight = this.#autoScrollEl.scrollHeight;\r\n\t\tconst canScrollX = scrollRect.width < scrollWidth;\r\n\t\tconst canScrollY = scrollRect.height < scrollHeight;\r\n\t\tconst scrollPosX = this.#autoScrollEl.scrollLeft;\r\n\t\tconst scrollPosY = this.#autoScrollEl.scrollTop;\r\n\r\n\t\tcancelAnimationFrame(this.#autoScrollRAF!);\r\n\r\n\t\tif (canScrollX || canScrollY) {\r\n\t\t\tthis.autoScrollX =\r\n\t\t\t\tMath.abs(scrollRect.right - clientX) <= autoScrollSensitivity && scrollPosX + scrollRect.width < scrollWidth\r\n\t\t\t\t\t? 1\r\n\t\t\t\t\t: Math.abs(scrollRect.left - clientX) <= autoScrollSensitivity && !!scrollPosX\r\n\t\t\t\t\t\t? -1\r\n\t\t\t\t\t\t: 0;\r\n\r\n\t\t\tthis.autoScrollY =\r\n\t\t\t\tMath.abs(scrollRect.bottom - clientY) <= autoScrollSensitivity && scrollPosY + scrollRect.height < scrollHeight\r\n\t\t\t\t\t? 1\r\n\t\t\t\t\t: Math.abs(scrollRect.top - clientY) <= autoScrollSensitivity && !!scrollPosY\r\n\t\t\t\t\t\t? -1\r\n\t\t\t\t\t\t: 0;\r\n\r\n\t\t\tthis.#autoScrollRAF = requestAnimationFrame(this.#performAutoScroll);\r\n\t\t}\r\n\t}\r\n\t#performAutoScroll = () => {\r\n\t\tthis.#autoScrollEl!.scrollLeft += this.autoScrollX * autoScrollSpeed;\r\n\t\tthis.#autoScrollEl!.scrollTop += this.autoScrollY * autoScrollSpeed;\r\n\t\tthis.#autoScrollRAF = requestAnimationFrame(this.#performAutoScroll);\r\n\t};\r\n\t#stopAutoScroll() {\r\n\t\tcancelAnimationFrame(this.#autoScrollRAF!);\r\n\t\tthis.#autoScrollRAF = null;\r\n\t}\r\n\r\n\tpublic notifyDisallowed() {\r\n\t\tif (this.#config.onDisallowed) {\r\n\t\t\tthis.#config.onDisallowed({\r\n\t\t\t\titem: UmbSorterController.activeItem,\r\n\t\t\t\telement: UmbSorterController.activeElement! as ElementType,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tpublic notifyAllowed() {\r\n\t\tif (this.#config.onAllowed) {\r\n\t\t\tthis.#config.onAllowed({\r\n\t\t\t\titem: UmbSorterController.activeItem,\r\n\t\t\t\telement: UmbSorterController.activeElement! as ElementType,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tpublic notifyRequestMove(data: any) {\r\n\t\tif (this.#config.onRequestMove) {\r\n\t\t\treturn this.#config.onRequestMove(data) || false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n","import type { UmbSorterResolvePlacementArgs } from './sorter.controller.js';\r\n\r\n/**\r\n * This function is used to resolve the placement of an item in a simple grid layout.\r\n * @param args\r\n * @returns { null | true }\r\n */\r\nexport function UmbSorterResolvePlacementAsGrid(args: UmbSorterResolvePlacementArgs<unknown>) {\r\n\t// If we are part of the same Sorter model\r\n\tif (args.itemIndex !== null && args.relatedIndex !== null) {\r\n\t\t// and the pointer is within the related rect\r\n\t\tif (args.relatedRect.left < args.pointerX && args.relatedRect.right > args.pointerX) {\r\n\t\t\t// Then we control the placeAfter property, making the active-drag-element allow to be placed at a spot already when just hovering that spot. (This only works when items have the same size)\r\n\t\t\treturn {\r\n\t\t\t\tplaceAfter: args.itemIndex < args.relatedIndex,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n"],"names":["autoScrollSensitivity","autoScrollSpeed","getParentScrollElement","el","includeSelf","elem","elemCSS","setupIgnorerElements","element","ignorerSelectors","selectors","criteria","setupPreventEvent","destroyIgnorerElements","destroyPreventEvent","UmbSorterController","UmbControllerBase","host","config","#isConnected","#model","#enabled","#dragX","#dragY","#elements","#initialize","#containerElement","containerEl","#config","#host","#useContainerShadowRoot","containerElement","#itemDraggedOver","#itemDropped","#observer","child","e","newDrop","#obtainIncomingItem","dropSorter","#handleDragMove","_e","#handleMoveEnd","#handleHandleMouseDown","event","target","composedPath","index","composedPathBelowTarget","x","#getElement","dragElement","#getDraggableElement","#handleDragElementMouseUp","#handleDragStart","#handleDragEnd","#scrollElement","containerRect","#setCurrentElement","#handleMouseUp","#handleMouseMove","activeUnique","activeDragRect","#updateDragMove","currentElementRect","isWithinRect","orderedContainerElements","currentContainerRect","elementsInSameRow","placeholderIsInThisRow","elRect","dragElementRect","lastDistance","foundEl","foundElDragRect","placeAfter","sameRow","centerX","distance","activeIndex","foundModel","relatedIndex","widthDiff","placementResult","verticalDirection","heightDiff","lastLeft","lastRight","foundElIndex","newIndex","#moveElementTo","foundTarget","#findIndexToMoveTo","#autoScrollRAF","#autoScrollEl","#performAutoScroll","mutations","mutation","addedNode","removedNode","identifier","#isActiveIdentifier","#uninitialize","model","unique","item","activeType","activeItem","#getHandleElement","innerElement","source","containingElement","newSource","draggableElement","elUnique","modelUnique","#setupPlaceholderStyle","#removePlaceholderStyle","#cleanupMove","#stopAutoScroll","instant","clientX","clientY","a","b","halfWay","belowHalf","#isPointerBelowTargetElement","targetIndex","requestingSorter","elementUnique","entry","itemUnique","newModel","fromCtrl","foundTheItem","localMove","oldIndex","scrollRect","scrollWidth","scrollHeight","canScrollX","canScrollY","scrollPosX","scrollPosY","data","UmbSorterResolvePlacementAsGrid","args"],"mappings":"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"}