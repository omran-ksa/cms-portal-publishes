{"version":3,"file":"index.js","sources":["../../../../src/packages/core/router/route/forbidden/route-forbidden.element.ts","../../../../src/packages/core/router/route/not-found/route-not-found.element.ts","../../../../src/packages/core/router/router-slot/config.ts","../../../../src/packages/core/router/router-slot/util/events.ts","../../../../src/packages/core/router/router-slot/util/history.ts","../../../../src/packages/core/router/router-slot/util/url.ts","../../../../src/packages/core/router/router-slot/util/router.ts","../../../../src/packages/core/router/router-slot/util/shadow.ts","../../../../src/packages/core/router/router-slot/util/anchor.ts","../../../../src/packages/core/router/generate-route-path-builder.function.ts","../../../../src/packages/core/router/route/route.context.ts","../../../../src/packages/core/router/route/router-slot-change.event.ts","../../../../src/packages/core/router/route/router-slot-init.event.ts","../../../../src/packages/core/router/contexts/route-path-addendum.context-token.ts","../../../../src/packages/core/router/contexts/route-path-addendum-reset.context.ts","../../../../src/packages/core/router/route/router-slot.element.ts","../../../../src/packages/core/router/contexts/route-path-addendum.context.ts","../../../../src/packages/core/router/encode-folder-name.function.ts","../../../../src/packages/core/router/modal-registration/modal-route-registration.controller.ts","../../../../src/packages/core/router/router-slot/router-slot.ts"],"sourcesContent":["import { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { css, html, customElement } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * A component that displays a \"Forbidden\" message when a user tries to access a route they do not have permission for.\r\n * This is typically used in routing scenarios where access control is enforced.\r\n * It informs the user that they do not have the necessary permissions to view the requested resource.\r\n * @element umb-route-forbidden\r\n */\r\n@customElement('umb-route-forbidden')\r\nexport class UmbRouteForbiddenElement extends UmbLitElement {\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<div class=\"uui-text\">\r\n\t\t\t\t<h4><umb-localize key=\"routing_routeForbiddenTitle\">Access denied</umb-localize></h4>\r\n\t\t\t\t<umb-localize key=\"routing_routeForbiddenDescription\">\r\n\t\t\t\t\tYou do not have permission to access this resource. Please contact your administrator for assistance.\r\n\t\t\t\t</umb-localize>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\tmin-width: 0;\r\n\t\t\t}\r\n\r\n\t\t\t:host > div {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\topacity: 0;\r\n\t\t\t\tanimation: fadeIn 2s 2s forwards;\r\n\t\t\t}\r\n\r\n\t\t\t@keyframes fadeIn {\r\n\t\t\t\t100% {\r\n\t\t\t\t\topacity: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbRouteForbiddenElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-route-forbidden': UmbRouteForbiddenElement;\r\n\t}\r\n}\r\n","import { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport { css, html, customElement } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n * A fallback view to be used in Workspace Views, maybe this can be upgraded at a later point.\r\n */\r\n@customElement('umb-route-not-found')\r\nexport class UmbRouteNotFoundElement extends UmbLitElement {\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<div class=\"uui-text\">\r\n\t\t\t\t<h4><umb-localize key=\"routing_routeNotFoundTitle\"></umb-localize></h4>\r\n\t\t\t\t<umb-localize key=\"routing_routeNotFoundDescription\"></umb-localize>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\tmin-width: 0;\r\n\t\t\t}\r\n\r\n\t\t\t:host > div {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\topacity: 0;\r\n\t\t\t\tanimation: fadeIn 5s 5s forwards;\r\n\t\t\t}\r\n\r\n\t\t\t@keyframes fadeIn {\r\n\t\t\t\t100% {\r\n\t\t\t\t\topacity: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbRouteNotFoundElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-route-not-found': UmbRouteNotFoundElement;\r\n\t}\r\n}\r\n","import type { PathMatch } from './model.js';\r\n\r\n/* eslint-disable local-rules/exported-string-constant-naming */\r\nexport const CATCH_ALL_WILDCARD: string = '**';\r\nexport const TRAVERSE_FLAG: string = '\\\\.\\\\.\\\\/';\r\nexport const PARAM_IDENTIFIER: RegExp = /:([^\\\\/]+)/g;\r\nexport const ROUTER_SLOT_TAG_NAME: string = 'router-slot';\r\nexport const GLOBAL_ROUTER_EVENTS_TARGET = window;\r\nexport const HISTORY_PATCH_NATIVE_KEY: string = `native`;\r\nexport const DEFAULT_PATH_MATCH: PathMatch = 'prefix';\r\n","import { GLOBAL_ROUTER_EVENTS_TARGET } from '../config.js';\r\nimport type { EventListenerSubscription, GlobalRouterEvent, IRoutingInfo } from '../model.js';\r\n\r\n/**\r\n * Dispatches a did change route event.\r\n * @param $elem\r\n * @param {IRoute} detail\r\n */\r\nexport function dispatchRouteChangeEvent<D = any>($elem: HTMLElement, detail: IRoutingInfo<D>) {\r\n\t$elem.dispatchEvent(new CustomEvent('changestate', { detail }));\r\n}\r\n\r\n/**\r\n * Dispatches an event on the window object.\r\n * @param name\r\n * @param detail\r\n */\r\nexport function dispatchGlobalRouterEvent<D = any>(name: GlobalRouterEvent, detail?: IRoutingInfo<D>) {\r\n\tGLOBAL_ROUTER_EVENTS_TARGET.dispatchEvent(new CustomEvent(name, { detail }));\r\n}\r\n\r\n/**\r\n * Adds an event listener (or more) to an element and returns a function to unsubscribe.\r\n * @param $elem\r\n * @param type\r\n * @param listener\r\n * @param options\r\n */\r\nexport function addListener<T extends Event, eventType extends string>(\r\n\t$elem: EventTarget,\r\n\ttype: eventType[] | eventType,\r\n\tlistener: (e: T) => void,\r\n\toptions?: boolean | AddEventListenerOptions,\r\n): EventListenerSubscription {\r\n\tconst types = Array.isArray(type) ? type : [type];\r\n\ttypes.forEach((t) => $elem.addEventListener(t, listener as EventListenerOrEventListenerObject, options));\r\n\treturn () =>\r\n\t\ttypes.forEach((t) => $elem.removeEventListener(t, listener as EventListenerOrEventListenerObject, options));\r\n}\r\n\r\n/**\r\n * Removes the event listeners in the array.\r\n * @param listeners\r\n */\r\nexport function removeListeners(listeners: EventListenerSubscription[]) {\r\n\tlisteners.forEach((unsub) => unsub());\r\n}\r\n","import { GLOBAL_ROUTER_EVENTS_TARGET, HISTORY_PATCH_NATIVE_KEY } from '../config.js';\r\nimport type { GlobalRouterEvent } from '../model.js';\r\nimport { dispatchGlobalRouterEvent } from './events.js';\r\n\r\n// Mapping a history functions to the events they are going to dispatch.\r\nexport const historyPatches: [string, GlobalRouterEvent[]][] = [\r\n\t['pushState', ['pushstate', 'changestate']],\r\n\t['replaceState', ['replacestate', 'changestate']],\r\n\t['forward', ['pushstate', 'changestate']],\r\n\t['go', ['pushstate', 'changestate']],\r\n\r\n\t// We need to handle the popstate a little differently when it comes to the change state event.\r\n\t['back', ['popstate']],\r\n];\r\n\r\n/**\r\n * Patches the history object by ensuring correct events are dispatches when the history changes.\r\n */\r\nexport function ensureHistoryEvents() {\r\n\tfor (const [name, events] of historyPatches) {\r\n\t\tfor (const event of events) {\r\n\t\t\tattachCallback(history, name, event);\r\n\t\t}\r\n\t}\r\n\r\n\t// The popstate is the only event natively dispatched when using the hardware buttons.\r\n\t// Therefore we need to handle this case a little different. To ensure the changestate event\r\n\t// is fired also when the hardware back button is used, we make sure to listen for the popstate\r\n\t// event and dispatch a change state event right after. The reason for the setTimeout is because we\r\n\t// want the popstate event to bubble up before the changestate event is dispatched.\r\n\twindow.addEventListener('popstate', (e: PopStateEvent) => {\r\n\t\t// Check if the state should be allowed to change\r\n\t\t// [NL] I injected the url property here, cause we need that when URL is changed by the browser back/forth button.\r\n\t\tif (shouldCancelChangeState({ url: window.location.pathname, eventName: 'popstate' })) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Dispatch the global router event to change the routes after the popstate has bubbled up\r\n\t\tsetTimeout(() => dispatchGlobalRouterEvent('changestate'), 0);\r\n\t});\r\n}\r\n\r\n/**\r\n * Attaches a global router event after the native function on the object has been invoked.\r\n * Stores the original function at the _name.\r\n * @param obj\r\n * @param functionName\r\n * @param eventName\r\n */\r\nexport function attachCallback(obj: any, functionName: string, eventName: GlobalRouterEvent) {\r\n\tconst func = obj[functionName];\r\n\tsaveNativeFunction(obj, functionName, func);\r\n\tobj[functionName] = (...args: any[]) => {\r\n\t\t// If its push/replace state we want to send the url to the should cancel change state event\r\n\t\tconst url = args.length > 2 ? args[2] : null;\r\n\r\n\t\t// Check if the state should be allowed to change\r\n\t\tif (shouldCancelChangeState({ url, eventName })) return;\r\n\r\n\t\t// Navigate\r\n\t\tfunc.apply(obj, args);\r\n\t\tdispatchGlobalRouterEvent(eventName);\r\n\t};\r\n}\r\n\r\n/**\r\n * Saves the native function on the history object.\r\n * @param obj\r\n * @param name\r\n * @param func\r\n */\r\nexport function saveNativeFunction(obj: any, name: string, func: () => void) {\r\n\t// Ensure that the native object exists.\r\n\tif (obj[HISTORY_PATCH_NATIVE_KEY] == null) {\r\n\t\tobj[HISTORY_PATCH_NATIVE_KEY] = {};\r\n\t}\r\n\r\n\t// Save the native function.\r\n\tobj[HISTORY_PATCH_NATIVE_KEY][`${name}`] = func.bind(obj);\r\n}\r\n\r\n/**\r\n * Dispatches and event and returns whether the state change should be cancelled.\r\n * The state will be considered as cancelled if the \"willChangeState\" event was cancelled.\r\n * @param data\r\n * @param data.url\r\n * @param data.eventName\r\n */\r\nfunction shouldCancelChangeState(data: { url?: string | null; eventName: GlobalRouterEvent }): boolean {\r\n\treturn !GLOBAL_ROUTER_EVENTS_TARGET.dispatchEvent(\r\n\t\tnew CustomEvent('willchangestate', {\r\n\t\t\tcancelable: true,\r\n\t\t\tdetail: data,\r\n\t\t}),\r\n\t);\r\n}\r\n\r\n// Expose the native history functions.\r\ndeclare global {\r\n\tinterface History {\r\n\t\tnative: {\r\n\t\t\tback: (distance?: any) => void;\r\n\t\t\tforward: (distance?: any) => void;\r\n\t\t\tgo: (delta?: any) => void;\r\n\t\t\tpushState: (data: any, title?: string, url?: string | null) => void;\r\n\t\t\treplaceState: (data: any, title?: string, url?: string | null) => void;\r\n\t\t};\r\n\t}\r\n}\r\n","import type { ISlashOptions, Query } from '../model.js';\r\n\r\nconst $anchor = document.createElement('a');\r\n\r\n/**\r\n * The current path of the location.\r\n * As default slashes are included at the start and end.\r\n * @param options\r\n */\r\nexport function path(options: Partial<ISlashOptions> = {}): string {\r\n\treturn slashify(window.location.pathname, options);\r\n}\r\n\r\n/**\r\n * Returns the path without the base path.\r\n * @param options\r\n */\r\nexport function pathWithoutBasePath(options: Partial<ISlashOptions> = {}): string {\r\n\treturn slashify(stripStart(path(), basePath()), options);\r\n}\r\n\r\n/**\r\n * Returns the base path as defined in the <base> tag in the head in a reliable way.\r\n * If eg. <base href=\"/router-slot/\"> is defined this function will return \"/router-slot/\".\r\n *\r\n * An alternative would be to use regex on document.baseURI,\r\n * but that will be unreliable in some cases because it\r\n * doesn't use the built in HTMLHyperlinkElementUtils.\r\n *\r\n * To make this method more performant we could cache the anchor element.\r\n * As default it will return the base path with slashes in front and at the end.\r\n * @param options\r\n */\r\nexport function basePath(options: Partial<ISlashOptions> = {}): string {\r\n\treturn constructPathWithBasePath('.', options);\r\n}\r\n\r\n/**\r\n * Creates an URL using the built in HTMLHyperlinkElementUtils.\r\n * An alternative would be to use regex on document.baseURI,\r\n * but that will be unreliable in some cases because it\r\n * doesn't use the built in HTMLHyperlinkElementUtils.\r\n *\r\n * As default it will return the base path with slashes in front and at the end.\r\n * @param path\r\n * @param options\r\n */\r\nexport function constructPathWithBasePath(path: string, options: Partial<ISlashOptions> = {}) {\r\n\t$anchor.href = path;\r\n\treturn slashify($anchor.pathname, options);\r\n}\r\n\r\n/**\r\n * Removes the start of the path that matches the part.\r\n * @param path\r\n * @param part\r\n */\r\nexport function stripStart(path: string, part: string) {\r\n\treturn path.replace(new RegExp(`^${part}`), '');\r\n}\r\n\r\n/**\r\n * Returns the query string.\r\n */\r\nexport function queryString(): string {\r\n\treturn window.location.search;\r\n}\r\n\r\n/**\r\n * Returns the params for the current path.\r\n * @returns Params\r\n */\r\nexport function query(): Query {\r\n\treturn toQuery(queryString().substring(1));\r\n}\r\n\r\n/**\r\n * Strips the slash from the start and end of a path.\r\n * @param path\r\n */\r\nexport function stripSlash(path: string): string {\r\n\treturn slashify(path, { start: false, end: false });\r\n}\r\n\r\n/**\r\n * Ensures the path starts and ends with a slash\r\n * @param path\r\n */\r\nexport function ensureSlash(path: string): string {\r\n\treturn slashify(path, { start: true, end: true });\r\n}\r\n\r\n/**\r\n * Makes sure that the start and end slashes are present or not depending on the options.\r\n * @param path\r\n * @param start.start\r\n * @param start\r\n * @param end\r\n * @param start.end\r\n */\r\nexport function slashify(path: string, { start = true, end = true }: Partial<ISlashOptions> = {}): string {\r\n\tpath = start && !path.startsWith('/') ? `/${path}` : !start && path.startsWith('/') ? path.slice(1) : path;\r\n\treturn end && !path.endsWith('/') ? `${path}/` : !end && path.endsWith('/') ? path.slice(0, path.length - 1) : path;\r\n}\r\n\r\n/**\r\n * Turns a query string into an object.\r\n * @param {string} queryString (example: (\"test=123&hejsa=LOL&wuhuu\"))\r\n * @returns {Query}\r\n */\r\nexport function toQuery(queryString: string): Query {\r\n\t// If the query does not contain anything, return an empty object.\r\n\tif (queryString.length === 0) {\r\n\t\treturn {};\r\n\t}\r\n\r\n\t// Grab the atoms ([\"test=123\", \"hejsa=LOL\", \"wuhuu\"])\r\n\tconst atoms = queryString.split('&');\r\n\r\n\t// Split by the values ([[\"test\", \"123\"], [\"hejsa\", \"LOL\"], [\"wuhuu\"]])\r\n\tconst arrayMap = atoms.map((atom) => atom.split('='));\r\n\r\n\t// Assign the values to an object ({ test: \"123\", hejsa: \"LOL\", wuhuu: \"\" })\r\n\treturn Object.assign(\r\n\t\t{},\r\n\t\t...arrayMap.map((arr) => ({\r\n\t\t\t[decodeURIComponent(arr[0])]: arr.length > 1 ? decodeURIComponent(arr[1]) : '',\r\n\t\t})),\r\n\t);\r\n}\r\n\r\n/**\r\n * Turns a query object into a string query.\r\n * @param query\r\n */\r\nexport function toQueryString(query: Query): string {\r\n\treturn Object.entries(query)\r\n\t\t.map(([key, value]) => `${key}${value != '' ? `=${encodeURIComponent(value)}` : ''}`)\r\n\t\t.join('&');\r\n}\r\n","/* eslint-disable no-useless-escape */\r\nimport { CATCH_ALL_WILDCARD, DEFAULT_PATH_MATCH, PARAM_IDENTIFIER, TRAVERSE_FLAG } from '../config.js';\r\nimport type {\r\n\tIComponentRoute,\r\n\tIRedirectRoute,\r\n\tIResolverRoute,\r\n\tIRoute,\r\n\tIRouteMatch,\r\n\tIRouterSlot,\r\n\tModuleResolver,\r\n\tPageComponent,\r\n\tParams,\r\n\tPathFragment,\r\n\tRouterTree,\r\n\tIRoutingInfo,\r\n} from '../model.js';\r\nimport { constructPathWithBasePath, path as getPath, queryString, stripSlash } from './url.js';\r\n\r\n/**\r\n * Determines whether the path is active.\r\n * If the full path starts with the path and is followed by the end of the string or a \"/\" the path is considered active.\r\n * @param path\r\n * @param fullPath\r\n */\r\nexport function isPathActive(path: string | PathFragment, fullPath: string = getPath()): boolean {\r\n\treturn new RegExp(`^${stripSlash(path)}(\\/|$)`, 'gm').test(stripSlash(fullPath));\r\n}\r\n\r\n/**\r\n * Matches a route.\r\n * @param route\r\n * @param path\r\n */\r\nexport function matchRoute<D = any>(route: IRoute<D>, path: string | PathFragment): IRouteMatch<D> | null {\r\n\t// We start by preparing the route path by replacing the param names with a regex that matches everything\r\n\t// until either the end of the path or the next \"/\". While replacing the param placeholders we make sure\r\n\t// to store the names of the param placeholders.\r\n\tconst paramNames: string[] = [];\r\n\tconst routePath = stripSlash(\r\n\t\troute.path.replace(PARAM_IDENTIFIER, (substring: string, ...args: string[]) => {\r\n\t\t\tparamNames.push(args[0]);\r\n\t\t\treturn `([^\\/]+)`;\r\n\t\t}),\r\n\t);\r\n\r\n\t// Construct the regex to match with the path or fragment\r\n\t// If path is wildcard:\r\n\t// - We match with /^/ to not consume any characters.\r\n\t// If path is empty and pathmatch is not full\r\n\t// - We match with /^/ to not consume any characters.\r\n\t// If pathmatch is prefix\r\n\t// - We start the match with [/]? to allow a slash in front of the path.\r\n\t// - We end the match with (?:/|$) to make sure the match ends at either the end of the fragment or end of the path.\r\n\t// If pathmatch is suffix:\r\n\t// - We start the match with .*? to allow anything to be in front of what we are trying to match.\r\n\t// - We end the match with $ to make sure the match ends at the end of the path.\r\n\t// If pathmatch is full:\r\n\t// - We end the match with $ to make sure the match ends at the end of the path.\r\n\t// If pathmatch is fuzzy\r\n\t// - We start the match with .*? to allow anything to be in front of what we are trying to match.\r\n\t// - We end the match with .*? to allow anything to be after what we are trying to match.\r\n\t// All matches starts with ^ to make sure the match is done from the beginning of the path.\r\n\tconst regex =\r\n\t\troute.path === CATCH_ALL_WILDCARD || (route.path.length === 0 && route.pathMatch != 'full')\r\n\t\t\t? /^/\r\n\t\t\t: (() => {\r\n\t\t\t\t\tswitch (route.pathMatch || DEFAULT_PATH_MATCH) {\r\n\t\t\t\t\t\tcase 'full':\r\n\t\t\t\t\t\t\treturn new RegExp(`^${routePath}\\/?$`);\r\n\t\t\t\t\t\tcase 'suffix':\r\n\t\t\t\t\t\t\treturn new RegExp(`^.*?${routePath}\\/?$`);\r\n\t\t\t\t\t\tcase 'fuzzy':\r\n\t\t\t\t\t\t\treturn new RegExp(`^.*?${routePath}.*?$`);\r\n\t\t\t\t\t\tcase 'prefix':\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn new RegExp(`^[\\/]?${routePath}(?:\\/|$)`);\r\n\t\t\t\t\t}\r\n\t\t\t\t})();\r\n\r\n\t// Check if there's a match\r\n\tconst match = path.match(regex);\r\n\tif (match != null) {\r\n\t\t// Match the param names with the matches. The matches starts from index 1 which is the\r\n\t\t// reason why we add 1. match[0] is the entire string.\r\n\t\tconst params = paramNames.reduce((acc: Params, name: string, i: number) => {\r\n\t\t\tacc[name] = match[i + 1];\r\n\t\t\treturn acc;\r\n\t\t}, {});\r\n\r\n\t\t// Split up the path into two fragments: the one consumed and the rest.\r\n\t\tconst consumed = stripSlash(path.slice(0, match[0].length));\r\n\t\tconst rest = stripSlash(path.slice(match[0].length, path.length));\r\n\r\n\t\treturn {\r\n\t\t\troute,\r\n\t\t\tmatch,\r\n\t\t\tparams,\r\n\t\t\tfragments: {\r\n\t\t\t\tconsumed,\r\n\t\t\t\trest,\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * Matches the first route that matches the given path.\r\n * @param routes\r\n * @param path\r\n */\r\nexport function matchRoutes<D = any>(routes: IRoute<D>[], path: string | PathFragment): IRouteMatch<D> | null {\r\n\tfor (const route of routes) {\r\n\t\tconst match = matchRoute(route, path);\r\n\t\tif (match != null) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * Returns the page from the route.\r\n * If the component provided is a function (and not a class) call the function to get the promise.\r\n * @param route\r\n * @param info\r\n */\r\nexport async function resolvePageComponent(route: IComponentRoute, info: IRoutingInfo): Promise<PageComponent> {\r\n\t// Figure out if the component were given as an import or class.\r\n\tlet cmp = route.component;\r\n\tif (cmp instanceof Function) {\r\n\t\ttry {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\r\n\t\t\tcmp = (cmp as Function)();\r\n\t\t} catch (err) {\r\n\t\t\t// The invocation most likely failed because the function is a class.\r\n\t\t\t// If it failed due to the \"new\" keyword not being used, the error will be of type \"TypeError\".\r\n\t\t\t// This is the most reliable way to check whether the provided function is a class or a function.\r\n\t\t\tif (!(err instanceof TypeError)) {\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Load the module or component.\r\n\tconst moduleClassOrPage = await Promise.resolve(<ModuleResolver>cmp);\r\n\r\n\t// Instantiate the component\r\n\tlet component!: PageComponent;\r\n\r\n\tif (!(moduleClassOrPage instanceof HTMLElement)) {\r\n\t\tcomponent = new (moduleClassOrPage.default\r\n\t\t\t? moduleClassOrPage.default\r\n\t\t\t: moduleClassOrPage.element\r\n\t\t\t\t? moduleClassOrPage.element\r\n\t\t\t\t: moduleClassOrPage)() as PageComponent;\r\n\t} else {\r\n\t\tcomponent = moduleClassOrPage as PageComponent;\r\n\t}\r\n\r\n\t// Setup the component using the callback.\r\n\tif (route.setup != null) {\r\n\t\tawait route.setup(component, info);\r\n\t}\r\n\r\n\treturn component;\r\n}\r\n\r\n/**\r\n * Determines if a route is a redirect route.\r\n * @param route\r\n */\r\nexport function isRedirectRoute(route: IRoute): route is IRedirectRoute {\r\n\treturn 'redirectTo' in route;\r\n}\r\n\r\n/**\r\n * Determines if a route is a resolver route.\r\n * @param route\r\n */\r\nexport function isResolverRoute(route: IRoute): route is IResolverRoute {\r\n\treturn 'resolve' in route;\r\n}\r\n\r\n/**\r\n * Traverses the router tree up to the root route.\r\n * @param slot\r\n */\r\nexport function traverseRouterTree(slot: IRouterSlot): { tree: RouterTree; depth: number } {\r\n\t// Find the nodes from the route up to the root route\r\n\tconst routes: IRouterSlot[] = [slot];\r\n\twhile (slot.parent != null) {\r\n\t\tslot = slot.parent;\r\n\t\troutes.push(slot);\r\n\t}\r\n\r\n\t// Create the tree\r\n\tconst tree: RouterTree = routes.reduce((acc: RouterTree, slot: IRouterSlot) => {\r\n\t\treturn { slot, child: acc };\r\n\t}, undefined);\r\n\r\n\tconst depth = routes.length;\r\n\r\n\treturn { tree, depth };\r\n}\r\n\r\n/**\r\n * Generates a path based on the router tree.\r\n * @param tree\r\n * @param depth\r\n */\r\nexport function getFragments(tree: RouterTree, depth: number): PathFragment[] {\r\n\tlet child = tree;\r\n\tconst fragments: PathFragment[] = [];\r\n\r\n\t// Look through all of the path fragments\r\n\twhile (child != null && child.slot.match != null && depth > 0) {\r\n\t\tfragments.push(child.slot.match.fragments.consumed);\r\n\t\tchild = child.child;\r\n\t\tdepth--;\r\n\t}\r\n\r\n\treturn fragments;\r\n}\r\n\r\n/**\r\n * Constructs the correct absolute path based on a router.\r\n * - Handles relative paths: \"mypath\"\r\n * - Handles absolute paths: \"/mypath\"\r\n * - Handles traversing paths: \"../../mypath\"\r\n * @param slot\r\n * @param path\r\n */\r\nexport function constructAbsolutePath<D = any, P = any>(\r\n\tslot: IRouterSlot<D, P>,\r\n\tpath: string | PathFragment = '',\r\n): string {\r\n\t// Grab the router tree\r\n\tconst { tree, depth } = traverseRouterTree(slot);\r\n\r\n\t// If the path starts with \"/\" we treat it as an absolute path\r\n\t// and therefore don't continue because it is already absolute.\r\n\tif (!path.startsWith('/')) {\r\n\t\tlet traverseDepth = 0;\r\n\r\n\t\t// If the path starts with \"./\" we can remove that part\r\n\t\t// because we know the path is relative to its route.\r\n\t\tif (path.startsWith('./')) {\r\n\t\t\tpath = path.slice(2);\r\n\t\t}\r\n\r\n\t\t// Match with the traverse flag.\r\n\t\tconst match = path.match(new RegExp(TRAVERSE_FLAG, 'g'));\r\n\t\tif (match != null) {\r\n\t\t\t// If the path matched with the traverse flag we know that we have to construct\r\n\t\t\t// a route until a certain depth. The traverse depth is the amount of \"../\" in the path\r\n\t\t\t// and the depth is the part of the path we a slicing away.\r\n\t\t\ttraverseDepth = match.length;\r\n\r\n\t\t\t// Count the amount of characters that the matches add up to and remove it from the path.\r\n\t\t\tconst length = match.reduce((acc: number, m: string) => acc + m.length, 0);\r\n\t\t\tpath = path.slice(length);\r\n\t\t}\r\n\r\n\t\t// Grab the fragments and construct the new path, taking the traverse depth into account.\r\n\t\t// Always subtract at least 1 because we the path is relative to its parent.\r\n\t\t// Filter away the empty fragments from the path.\r\n\t\tconst fragments = getFragments(tree, depth - 1 - traverseDepth).filter((fragment) => fragment.length > 0);\r\n\t\tpath = `${fragments.join('/')}${fragments.length > 0 ? '/' : ''}${path}`;\r\n\t}\r\n\r\n\t// Add the base path in front of the path. If the path is already absolute, the path wont get the base path added.\r\n\treturn constructPathWithBasePath(path, { end: false });\r\n}\r\n\r\n/**\r\n * Handles a redirect.\r\n * @param slot\r\n * @param route\r\n */\r\nexport function handleRedirect(slot: IRouterSlot, route: IRedirectRoute) {\r\n\thistory.replaceState(\r\n\t\thistory.state,\r\n\t\t'',\r\n\t\t`${constructAbsolutePath(slot, route.redirectTo)}${route.preserveQuery ? queryString() : ''}`,\r\n\t);\r\n}\r\n\r\n/**\r\n * Determines whether the navigation should start based on the current match and the new match.\r\n * @param currentMatch\r\n * @param newMatch\r\n */\r\nexport function shouldNavigate<D>(currentMatch: IRouteMatch<D> | null, newMatch: IRouteMatch<D>) {\r\n\t// If the current match is not defined we should always route.\r\n\tif (currentMatch == null) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Extract information about the matches\r\n\tconst { route: currentRoute, fragments: currentFragments } = currentMatch;\r\n\tconst { route: newRoute, fragments: newFragments } = newMatch;\r\n\r\n\tconst isSameRoute = currentRoute.path == newRoute.path;\r\n\tconst isSameFragments = currentFragments.consumed == newFragments.consumed;\r\n\tconst isSameBasedOnUnique = currentRoute.unique === newRoute.unique;\r\n\r\n\t// Only navigate if the URL consumption is new or if the two routes are no longer the same.\r\n\treturn !isSameFragments || !isSameRoute || !isSameBasedOnUnique;\r\n}\r\n","import { ROUTER_SLOT_TAG_NAME } from '../config.js';\r\nimport type { IRouterSlot } from '../model.js';\r\n\r\n/**\r\n * Queries the parent router.\r\n * @param $elem\r\n */\r\nexport function queryParentRouterSlot<D = any>($elem: Element): IRouterSlot<D> | null {\r\n\treturn queryParentRoots<IRouterSlot<D>>($elem, ROUTER_SLOT_TAG_NAME);\r\n}\r\n\r\n/**\r\n * Traverses the roots and returns the first match.\r\n * The minRoots parameter indicates how many roots should be traversed before we started matching with the query.\r\n * @param $elem\r\n * @param query\r\n * @param minRoots\r\n * @param roots\r\n */\r\nexport function queryParentRoots<T>($elem: Element, query: string, minRoots: number = 0, roots: number = 0): T | null {\r\n\t// Grab the rood node and query it\r\n\tconst $root = (<any>$elem).getRootNode();\r\n\r\n\t// If we are at the right level or above we can query!\r\n\tif (roots >= minRoots) {\r\n\t\t// See if there's a match\r\n\t\tconst match = $root.querySelector(query);\r\n\t\tif (match != null && match != $elem) {\r\n\t\t\treturn match;\r\n\t\t}\r\n\t}\r\n\r\n\t// If a parent root with a host doesn't exist we don't continue the traversal\r\n\tconst $rootRootNode = $root.getRootNode();\r\n\tif ($rootRootNode.host == null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// We continue the traversal if there was not matches\r\n\treturn queryParentRoots($rootRootNode.host, query, minRoots, ++roots);\r\n}\r\n","/**\r\n * Hook up a click listener to the window that, for all anchor tags\r\n * that has a relative HREF, uses the history API instead.\r\n */\r\nexport function ensureAnchorHistory() {\r\n\tconst isWindows = navigator.platform.toUpperCase().indexOf('WIN') !== -1;\r\n\r\n\twindow.addEventListener('click', (e: MouseEvent) => {\r\n\t\t// If we try to open link in a new tab, then we want to skip skip:\r\n\t\tif ((isWindows && e.ctrlKey) || (!isWindows && e.metaKey)) return;\r\n\r\n\t\t// Find the target by using the composed path to get the element through the shadow boundaries.\r\n\t\tconst $anchor = (('composedPath' in e) as any)\r\n\t\t\t? e.composedPath().find(($elem) => $elem instanceof HTMLAnchorElement)\r\n\t\t\t: e.target;\r\n\r\n\t\t// Abort if the event is not about the anchor tag\r\n\t\tif ($anchor == null || !($anchor instanceof HTMLAnchorElement)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get the HREF value from the anchor tag\r\n\t\tconst href = $anchor.href;\r\n\r\n\t\t// Only handle the anchor tag if the follow holds true:\r\n\t\t// - The HREF is relative to the origin of the current location.\r\n\t\t// - The target is targeting the current frame.\r\n\t\t// - The anchor doesn't have the attribute [data-router-slot]=\"disabled\"\r\n\t\tif (\r\n\t\t\t!href.startsWith(location.origin) ||\r\n\t\t\t($anchor.target !== '' && $anchor.target !== '_self') ||\r\n\t\t\t$anchor.dataset['routerSlot'] === 'disabled'\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove the origin from the start of the HREF to get the path\r\n\t\tconst path = $anchor.pathname + $anchor.search + $anchor.hash;\r\n\r\n\t\t// Prevent the default behavior\r\n\t\te.preventDefault();\r\n\r\n\t\t// Change the history!\r\n\t\thistory.pushState(null, '', path);\r\n\t});\r\n}\r\n","import { stripSlash } from './router-slot/util.js';\r\nimport { umbUrlPatternToString, type UrlParametersRecord } from '@umbraco-cms/backoffice/utils';\r\n\r\n/**\r\n *\r\n * @param path\r\n */\r\nexport function umbGenerateRoutePathBuilder(path: string) {\r\n\treturn (params: UrlParametersRecord | null) => {\r\n\t\treturn '/' + stripSlash(umbUrlPatternToString(path, params)) + '/';\r\n\t};\r\n}\r\n\r\n/**\r\n * @deprecated Use `umbGenerateRoutePathBuilder` instead.\r\n */\r\nexport { umbGenerateRoutePathBuilder as umbCreateRoutePathBuilder };\r\n","import type { IRouterSlot } from '../router-slot/index.js';\r\nimport type { UmbModalRouteRegistration } from '../modal-registration/modal-route-registration.interface.js';\r\nimport { umbGenerateRoutePathBuilder } from '../generate-route-path-builder.function.js';\r\nimport type { UmbRoute } from './route.interface.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_MODAL_MANAGER_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbStringState, mergeObservables } from '@umbraco-cms/backoffice/observable-api';\r\n\r\nconst EmptyDiv = document.createElement('div');\r\n\r\ntype UmbRoutePlusModalKey = UmbRoute & { __modalKey: string };\r\n\r\nexport class UmbRouteContext extends UmbContextBase {\r\n\t#modalRouter: IRouterSlot;\r\n\t#modalRegistrations: UmbModalRouteRegistration[] = [];\r\n\t#modalContext?: typeof UMB_MODAL_MANAGER_CONTEXT.TYPE;\r\n\t#modalRoutes: UmbRoutePlusModalKey[] = [];\r\n\t#activeModalPath?: string;\r\n\r\n\t#basePath = new UmbStringState(undefined);\r\n\tpublic readonly basePath = this.#basePath.asObservable();\r\n\r\n\t#activeLocalPath = new UmbStringState(undefined);\r\n\tpublic readonly activeLocalPath = this.#activeLocalPath.asObservable();\r\n\tpublic readonly activePath = mergeObservables([this.basePath, this.activeLocalPath], ([basePath, localPath]) => {\r\n\t\treturn basePath + '/' + localPath;\r\n\t});\r\n\r\n\tconstructor(host: UmbControllerHost, mainRouter: IRouterSlot, modalRouter: IRouterSlot) {\r\n\t\tsuper(host, UMB_ROUTE_CONTEXT);\r\n\t\tthis.#modalRouter = modalRouter;\r\n\t\tthis.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (context) => {\r\n\t\t\tthis.#modalContext = context;\r\n\t\t\tthis.#generateModalRoutes();\r\n\t\t});\r\n\t}\r\n\r\n\tgetBasePath() {\r\n\t\treturn this.#basePath.getValue();\r\n\t}\r\n\tgetActivePath() {\r\n\t\treturn this.getBasePath() + '/' + this.#activeLocalPath;\r\n\t}\r\n\r\n\tpublic registerModal(registration: UmbModalRouteRegistration) {\r\n\t\tthis.#modalRegistrations.push(registration);\r\n\t\tthis.#createNewUrlBuilder(registration);\r\n\t\tthis.#generateModalRoutes();\r\n\t}\r\n\r\n\tpublic unregisterModal(registrationToken: UmbModalRouteRegistration) {\r\n\t\tconst index = this.#modalRegistrations.indexOf(registrationToken);\r\n\t\tif (index === -1) return;\r\n\t\tthis.#modalRegistrations.splice(index, 1);\r\n\t\tthis.#generateModalRoutes();\r\n\t}\r\n\r\n\t#generateRoute(modalRegistration: UmbModalRouteRegistration): UmbRoutePlusModalKey {\r\n\t\treturn {\r\n\t\t\t__modalKey: modalRegistration.key,\r\n\t\t\tunique: 'umbModalKey_' + modalRegistration.key,\r\n\t\t\tpath: '/' + modalRegistration.generateModalPath(),\r\n\t\t\tcomponent: EmptyDiv,\r\n\t\t\tsetup: async (component, info) => {\r\n\t\t\t\tif (!this.#modalContext) return;\r\n\t\t\t\tconst modalContext = await modalRegistration.routeSetup(\r\n\t\t\t\t\tthis.#modalRouter,\r\n\t\t\t\t\tthis.#modalContext,\r\n\t\t\t\t\tinfo.match.params,\r\n\t\t\t\t);\r\n\t\t\t\tif (modalContext) {\r\n\t\t\t\t\tmodalContext._internal_setCurrentModalPath(info.match.fragments.consumed);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\t_internal_removeModalPath(folderToRemove?: string) {\r\n\t\t// Reset the URL to the routerBasePath + routerActiveLocalPath [NL]\r\n\t\tif (folderToRemove && window.location.href.includes(folderToRemove)) {\r\n\t\t\tconst url = this.#basePath.getValue() + '/' + this.#activeLocalPath.getValue();\r\n\t\t\twindow.history.pushState({}, '', url);\r\n\t\t}\r\n\t}\r\n\r\n\t#generateModalRoutes() {\r\n\t\tconst newModals = this.#modalRegistrations.filter(\r\n\t\t\t(x) => !this.#modalRoutes.find((route) => x.key === route.__modalKey),\r\n\t\t);\r\n\t\tconst routesToRemove = this.#modalRoutes.filter(\r\n\t\t\t(route) => !this.#modalRegistrations.find((x) => x.key === route.__modalKey),\r\n\t\t);\r\n\t\t// If one the of the removed modals are active we should close it.\r\n\t\troutesToRemove.some((route) => {\r\n\t\t\tif (route.path === this.#activeModalPath) {\r\n\t\t\t\tthis.#modalContext?.close(route.__modalKey);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\t\tconst cleanedRoutes = this.#modalRoutes.filter((route) => !routesToRemove.includes(route));\r\n\r\n\t\tthis.#modalRoutes = [\r\n\t\t\t...cleanedRoutes,\r\n\t\t\t...newModals.map((modalRegistration) => {\r\n\t\t\t\treturn this.#generateRoute(modalRegistration);\r\n\t\t\t}),\r\n\t\t];\r\n\r\n\t\t// Add an empty route, so there is a route for the router to react on when no modals are open.\r\n\t\tthis.#modalRoutes.push({\r\n\t\t\t__modalKey: '_empty_',\r\n\t\t\tunique: 'umbEmptyModal',\r\n\t\t\tpath: '',\r\n\t\t\tcomponent: EmptyDiv,\r\n\t\t});\r\n\r\n\t\t// TODO: Should we await one frame, to ensure we don't call back too much?.\r\n\t\tthis.#modalRouter.routes = this.#modalRoutes;\r\n\t\tthis.#modalRouter.render();\r\n\t}\r\n\r\n\tpublic _internal_routerGotBasePath(routerBasePath: string) {\r\n\t\tif (this.#basePath.getValue() === routerBasePath) return;\r\n\t\tthis.#basePath.setValue(routerBasePath);\r\n\t\tthis.#createNewUrlBuilders();\r\n\t}\r\n\r\n\tpublic _internal_routerGotActiveLocalPath(routerActiveLocalPath: string | undefined) {\r\n\t\tif (this.#activeLocalPath.getValue() === routerActiveLocalPath) return;\r\n\t\tthis.#activeLocalPath.setValue(routerActiveLocalPath);\r\n\t\tthis.#createNewUrlBuilders();\r\n\t}\r\n\r\n\t// Also notice each registration should now hold its handler when its active.\r\n\tpublic _internal_modalRouterChanged(activeModalPath: string | undefined) {\r\n\t\tif (this.#activeModalPath === activeModalPath) return;\r\n\t\tif (this.#activeModalPath) {\r\n\t\t\t// If if there is a modal using the old path.\r\n\t\t\tconst activeModal = this.#modalRegistrations.find((registration) => {\r\n\t\t\t\treturn '/' + registration.generateModalPath() === this.#activeModalPath;\r\n\t\t\t});\r\n\t\t\tif (activeModal) {\r\n\t\t\t\tthis.#modalContext?.close(activeModal.key);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.#activeModalPath = activeModalPath;\r\n\t}\r\n\r\n\t#createNewUrlBuilders() {\r\n\t\tthis.#modalRegistrations.forEach(this.#createNewUrlBuilder);\r\n\t}\r\n\r\n\t#createNewUrlBuilder = (modalRegistration: UmbModalRouteRegistration) => {\r\n\t\tconst routerBasePath = this.#basePath.getValue();\r\n\t\tif (!routerBasePath) return;\r\n\r\n\t\tconst activeLocalPath = this.#activeLocalPath.getValue();\r\n\r\n\t\tconst routeBasePath = routerBasePath.endsWith('/') ? routerBasePath : routerBasePath + '/';\r\n\t\tconst routeActiveLocalPath = activeLocalPath\r\n\t\t\t? activeLocalPath.endsWith('/')\r\n\t\t\t\t? activeLocalPath\r\n\t\t\t\t: activeLocalPath + '/'\r\n\t\t\t: '';\r\n\t\tconst localPath = routeBasePath + routeActiveLocalPath + modalRegistration.generateModalPath();\r\n\t\tconst urlBuilder = umbGenerateRoutePathBuilder(localPath);\r\n\r\n\t\tmodalRegistration._internal_setRouteBuilder(urlBuilder);\r\n\t};\r\n\r\n\toverride hostDisconnected(): void {\r\n\t\tsuper.hostDisconnected();\r\n\t\tthis._internal_modalRouterChanged(undefined);\r\n\t}\r\n}\r\n\r\nexport const UMB_ROUTE_CONTEXT = new UmbContextToken<UmbRouteContext>('UmbRouterContext');\r\n","import type { UmbRouterSlotElement } from './router-slot.element.js';\r\nimport { UUIEvent } from '@umbraco-cms/backoffice/external/uui';\r\nexport class UmbRouterSlotChangeEvent extends UUIEvent<never, UmbRouterSlotElement> {\r\n\tstatic readonly CHANGE = 'change';\r\n\tconstructor() {\r\n\t\tsuper(UmbRouterSlotChangeEvent.CHANGE);\r\n\t}\r\n}\r\n","import type { UmbRouterSlotElement } from './router-slot.element.js';\r\nimport { UUIEvent } from '@umbraco-cms/backoffice/external/uui';\r\nexport class UmbRouterSlotInitEvent extends UUIEvent<never, UmbRouterSlotElement> {\r\n\tstatic readonly INIT = 'init';\r\n\tconstructor() {\r\n\t\tsuper(UmbRouterSlotInitEvent.INIT);\r\n\t}\r\n}\r\n","import type { UmbRoutePathAddendum } from './route-path-addendum.interface.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_ROUTE_PATH_ADDENDUM_CONTEXT = new UmbContextToken<UmbRoutePathAddendum>('UmbRoutePathAddendum');\r\n","import type { UmbRoutePathAddendum } from './route-path-addendum.interface.js';\r\nimport { UMB_ROUTE_PATH_ADDENDUM_CONTEXT } from './route-path-addendum.context-token.js';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbStringState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbRoutePathAddendumResetContext extends UmbContextBase implements UmbRoutePathAddendum {\r\n\t#appendum = new UmbStringState('');\r\n\treadonly addendum = this.#appendum.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_ROUTE_PATH_ADDENDUM_CONTEXT);\r\n\t}\r\n}\r\n","import type { IRouterSlot } from '../router-slot/index.js';\r\nimport { UmbRoutePathAddendumResetContext } from '../contexts/route-path-addendum-reset.context.js';\r\nimport { UmbRouterSlotInitEvent } from './router-slot-init.event.js';\r\nimport { UmbRouterSlotChangeEvent } from './router-slot-change.event.js';\r\nimport type { UmbRoute } from './route.interface.js';\r\nimport { UmbRouteContext } from './route.context.js';\r\nimport { css, html, type PropertyValueMap, customElement, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n/**\r\n *  @element umb-router-slot\r\n *  @description - Component for wrapping Router Slot element, providing some local events for implementation.\r\n *  @augments UmbLitElement\r\n * @fires {UmbRouterSlotInitEvent} init - fires when the router is connected\r\n * @fires {UmbRouterSlotChangeEvent} change - fires when a path of this router is changed\r\n */\r\n@customElement('umb-router-slot')\r\nexport class UmbRouterSlotElement extends UmbLitElement {\r\n\t#router: IRouterSlot = document.createElement('router-slot') as IRouterSlot;\r\n\t#modalRouter: IRouterSlot = document.createElement('router-slot') as IRouterSlot;\r\n\t#listening = false;\r\n\r\n\t@property({ type: Boolean, attribute: 'inherit-addendum', reflect: false })\r\n\tpublic inheritAddendum?: boolean;\r\n\r\n\t@property({ attribute: false })\r\n\tpublic get routes(): UmbRoute[] | undefined {\r\n\t\treturn this.#router.routes;\r\n\t}\r\n\tpublic set routes(value: UmbRoute[] | undefined) {\r\n\t\tvalue ??= [];\r\n\t\tconst oldValue = this.#router.routes;\r\n\t\tif (\r\n\t\t\tvalue.length !== oldValue?.length ||\r\n\t\t\tvalue.filter((route) => oldValue?.findIndex((r) => r.path === route.path) === -1).length > 0\r\n\t\t) {\r\n\t\t\tthis.#router.routes = value;\r\n\t\t}\r\n\t}\r\n\r\n\t@property({ attribute: false })\r\n\tpublic get parent(): IRouterSlot | null | undefined {\r\n\t\treturn this.#router.parent;\r\n\t}\r\n\tpublic set parent(parent: IRouterSlot | null | undefined) {\r\n\t\tthis.#router.parent = parent;\r\n\t}\r\n\r\n\tprivate _routerPath?: string;\r\n\tpublic get absoluteRouterPath() {\r\n\t\treturn this._routerPath;\r\n\t}\r\n\r\n\tprivate _activeLocalPath?: string;\r\n\tpublic get localActiveViewPath() {\r\n\t\treturn this._activeLocalPath;\r\n\t}\r\n\r\n\tpublic get absoluteActiveViewPath() {\r\n\t\treturn this._routerPath + '/' + this._activeLocalPath;\r\n\t}\r\n\r\n\t#routeContext = new UmbRouteContext(this, this.#router, this.#modalRouter);\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.#modalRouter.parent = this.#router;\r\n\t\tthis.#modalRouter.style.display = 'none';\r\n\t\tthis.#router.addEventListener('changestate', this._updateRouterPath.bind(this));\r\n\t\tthis.#router.appendChild(document.createElement('slot'));\r\n\t}\r\n\r\n\tprotected _constructAbsoluteRouterPath() {\r\n\t\treturn this.#router.constructAbsolutePath('') || '';\r\n\t}\r\n\r\n\tprotected _constructLocalRouterPath() {\r\n\t\treturn this.#router.match?.fragments.consumed ?? '';\r\n\t}\r\n\r\n\toverride connectedCallback() {\r\n\t\tif (this.inheritAddendum !== true) {\r\n\t\t\tnew UmbRoutePathAddendumResetContext(this);\r\n\t\t}\r\n\r\n\t\tsuper.connectedCallback();\r\n\t\t// Currently we have to set this every time as RouteSlot looks for its parent every-time it is connected. Aka it has not way to explicitly set the parent.\r\n\t\t// And we cannot insert the modal router as a slotted-child of the router, as it flushes its children on every route change.\r\n\t\tthis.#modalRouter.parent = this.#router;\r\n\t\tif (this.#listening === false) {\r\n\t\t\twindow.addEventListener('navigationsuccess', this._onNavigationChanged);\r\n\t\t\tthis.#listening = true;\r\n\t\t}\r\n\t}\r\n\r\n\toverride disconnectedCallback() {\r\n\t\twindow.removeEventListener('navigationsuccess', this._onNavigationChanged);\r\n\t\tthis.#listening = false;\r\n\r\n\t\t// Close modals opened by this router slot.\r\n\t\tthis.#routeContext._internal_modalRouterChanged(undefined);\r\n\r\n\t\tsuper.disconnectedCallback();\r\n\t}\r\n\r\n\tprotected override firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\t\tthis._updateRouterPath();\r\n\t}\r\n\r\n\tprotected _updateRouterPath() {\r\n\t\tconst newAbsolutePath = this._constructAbsoluteRouterPath();\r\n\t\tif (this._routerPath !== newAbsolutePath) {\r\n\t\t\tthis._routerPath = newAbsolutePath;\r\n\t\t\tthis.#routeContext._internal_routerGotBasePath(this._routerPath);\r\n\t\t\tthis.dispatchEvent(new UmbRouterSlotInitEvent());\r\n\r\n\t\t\tconst newActiveLocalPath = this._constructLocalRouterPath();\r\n\t\t\tif (this._activeLocalPath !== newActiveLocalPath) {\r\n\t\t\t\tthis._activeLocalPath = newActiveLocalPath;\r\n\t\t\t\tthis.#routeContext._internal_routerGotActiveLocalPath(this._activeLocalPath);\r\n\t\t\t\tthis.dispatchEvent(new UmbRouterSlotChangeEvent());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _onNavigationChanged = (event?: any) => {\r\n\t\tif (event.detail.slot === this.#router) {\r\n\t\t\tconst newActiveLocalPath = this._constructLocalRouterPath();\r\n\t\t\tif (this._activeLocalPath !== newActiveLocalPath) {\r\n\t\t\t\tthis._activeLocalPath = newActiveLocalPath;\r\n\t\t\t\tthis.#routeContext._internal_routerGotActiveLocalPath(newActiveLocalPath);\r\n\t\t\t\tthis.dispatchEvent(new UmbRouterSlotChangeEvent());\r\n\t\t\t}\r\n\t\t} else if (event.detail.slot === this.#modalRouter) {\r\n\t\t\tconst newActiveModalLocalPath = this.#modalRouter.match?.route.path ?? '';\r\n\t\t\tthis.#routeContext._internal_modalRouterChanged(newActiveModalLocalPath);\r\n\t\t}\r\n\t};\r\n\r\n\toverride render() {\r\n\t\treturn html`${this.#router}${this.#modalRouter}`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\r\n\t\t\trouter-slot {\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-router-slot': UmbRouterSlotElement;\r\n\t}\r\n}\r\n","import type { UmbRoutePathAddendum } from './route-path-addendum.interface.js';\r\nimport { UMB_ROUTE_PATH_ADDENDUM_CONTEXT } from './route-path-addendum.context-token.js';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbStringState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbRoutePathAddendumContext extends UmbContextBase implements UmbRoutePathAddendum {\r\n\t#parent?: string;\r\n\t#current?: string;\r\n\r\n\t#addendum = new UmbStringState(undefined);\r\n\treadonly addendum = this.#addendum.asObservable();\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_ROUTE_PATH_ADDENDUM_CONTEXT);\r\n\r\n\t\tthis.consumeContext(UMB_ROUTE_PATH_ADDENDUM_CONTEXT, (context) => {\r\n\t\t\tthis.observe(context?.addendum, (addendum) => {\r\n\t\t\t\tthis.#parent = addendum;\r\n\t\t\t\tthis.#update();\r\n\t\t\t});\r\n\t\t}).skipHost();\r\n\t}\r\n\r\n\tsetAddendum(addendum: string | undefined) {\r\n\t\tthis.#current = addendum;\r\n\t\tthis.#update();\r\n\t}\r\n\r\n\t#update() {\r\n\t\tif (this.#parent === undefined || this.#current === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if none of the strings are empty strings, then we should add a slash in front of the currentAddendum. So we get one in between.\r\n\t\tconst add = this.#current === '' || this.#parent === '' ? this.#current : '/' + this.#current;\r\n\t\tthis.#addendum.setValue(this.#parent + add);\r\n\t}\r\n}\r\n","export const encodeFolderName = (path: string) =>\r\n\tencodeURIComponent(path.toLowerCase().replace(/\\s+/g, '-'))\r\n\t\t.replace(/_/g, '-')\r\n\t\t.replace(/\\./g, '-')\r\n\t\t.replace(/!/g, '-')\r\n\t\t.replace(/~/g, '-')\r\n\t\t.replace(/\\*/g, '-')\r\n\t\t.replace(/'/g, '')\r\n\t\t.replace(/\\(/g, '-')\r\n\t\t.replace(/\\)/g, '-');\r\n","import type { IRouterSlot, Params } from '../router-slot/index.js';\r\nimport { UMB_ROUTE_PATH_ADDENDUM_CONTEXT } from '../contexts/route-path-addendum.context-token.js';\r\nimport { UMB_ROUTE_CONTEXT } from '../route/route.context.js';\r\nimport { encodeFolderName } from '../encode-folder-name.function.js';\r\nimport type { UmbModalRouteRegistration } from './modal-route-registration.interface.js';\r\nimport type {\r\n\tUmbModalConfig,\r\n\tUmbModalContext,\r\n\tUmbModalContextClassArgs,\r\n\tUmbModalManagerContext,\r\n\tUmbModalToken,\r\n} from '@umbraco-cms/backoffice/modal';\r\nimport type { UmbControllerAlias, UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDeepPartialObject } from '@umbraco-cms/backoffice/utils';\r\n\r\nexport type UmbModalRouteBuilder = (params: { [key: string]: string | number } | null) => string;\r\n\r\nexport type UmbModalRouteSetupReturn<UmbModalTokenData, UmbModalTokenValue> = UmbModalTokenValue extends undefined\r\n\t? UmbModalTokenValue extends undefined\r\n\t\t? {\r\n\t\t\t\tmodal?: UmbDeepPartialObject<UmbModalConfig>;\r\n\t\t\t\tdata?: UmbDeepPartialObject<UmbModalTokenData>;\r\n\t\t\t\tvalue?: UmbModalTokenValue;\r\n\t\t\t}\r\n\t\t: {\r\n\t\t\t\tmodal?: UmbDeepPartialObject<UmbModalConfig>;\r\n\t\t\t\tdata?: UmbDeepPartialObject<UmbModalTokenData>;\r\n\t\t\t\tvalue: UmbModalTokenValue;\r\n\t\t\t}\r\n\t: UmbModalTokenValue extends undefined\r\n\t\t? {\r\n\t\t\t\tmodal?: UmbDeepPartialObject<UmbModalConfig>;\r\n\t\t\t\tdata: UmbDeepPartialObject<UmbModalTokenData>;\r\n\t\t\t\tvalue?: UmbModalTokenValue;\r\n\t\t\t}\r\n\t\t: {\r\n\t\t\t\tmodal?: UmbDeepPartialObject<UmbModalConfig>;\r\n\t\t\t\tdata: UmbDeepPartialObject<UmbModalTokenData>;\r\n\t\t\t\tvalue: UmbModalTokenValue;\r\n\t\t\t};\r\nexport class UmbModalRouteRegistrationController<\r\n\t\tUmbModalTokenData extends { [key: string]: any } = { [key: string]: any },\r\n\t\tUmbModalTokenValue = unknown,\r\n\t>\r\n\textends UmbControllerBase\r\n\timplements UmbModalRouteRegistration<UmbModalTokenData, UmbModalTokenValue>\r\n{\r\n\t//\r\n\t#init;\r\n\r\n\t#addendum?: string;\r\n\t#additionalPath?: string;\r\n\t#uniquePaths: Map<string, string | undefined> = new Map();\r\n\r\n\t#routeContext?: typeof UMB_ROUTE_CONTEXT.TYPE;\r\n\t#modalRegistrationContext?: typeof UMB_ROUTE_CONTEXT.TYPE;\r\n\r\n\t#key: string;\r\n\t#path?: string;\r\n\t#modalAlias: UmbModalToken<UmbModalTokenData, UmbModalTokenValue> | string;\r\n\r\n\t#onSetupCallback?: (\r\n\t\troutingInfo: Params,\r\n\t) =>\r\n\t\t| Promise<UmbModalRouteSetupReturn<UmbModalTokenData, UmbModalTokenValue> | false>\r\n\t\t| UmbModalRouteSetupReturn<UmbModalTokenData, UmbModalTokenValue>\r\n\t\t| false;\r\n\t#onSubmitCallback?: (value: UmbModalTokenValue, data?: UmbModalTokenData) => void;\r\n\t#onRejectCallback?: () => void;\r\n\r\n\t#modalContext: UmbModalContext<UmbModalTokenData, UmbModalTokenValue> | undefined;\r\n\t#routeBuilder?: UmbModalRouteBuilder;\r\n\t#urlBuilderCallback: ((urlBuilder: UmbModalRouteBuilder) => void) | undefined;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbModalRouteRegistrationController.\r\n\t * @param {UmbControllerHost} host - The host element of the modal, this determine the ownership of the modal and the origin of it.\r\n\t * @param {UmbModalToken} alias - The alias of the modal, this is used to identify the modal.\r\n\t * @param {UmbControllerAlias} ctrlAlias - The alias for this controller, this is used to identify the controller.\r\n\t * @memberof UmbModalRouteRegistrationController\r\n\t */\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\talias: UmbModalToken<UmbModalTokenData, UmbModalTokenValue> | string,\r\n\t\tctrlAlias?: UmbControllerAlias,\r\n\t) {\r\n\t\tsuper(host, ctrlAlias ?? alias.toString());\r\n\t\tthis.#key = UmbId.new();\r\n\t\tthis.#modalAlias = alias;\r\n\r\n\t\tthis.consumeContext(UMB_ROUTE_PATH_ADDENDUM_CONTEXT, (context) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tcontext?.addendum,\r\n\t\t\t\t(addendum) => {\r\n\t\t\t\t\tthis.#addendum = addendum;\r\n\t\t\t\t\tthis.#registerModal().catch(() => undefined);\r\n\t\t\t\t},\r\n\t\t\t\t'observeAddendum',\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.#init = this.consumeContext(UMB_ROUTE_CONTEXT, (_routeContext) => {\r\n\t\t\tthis.#routeContext = _routeContext;\r\n\t\t\tthis.#registerModal().catch(() => undefined);\r\n\t\t}).asPromise({ preventTimeout: true });\r\n\t}\r\n\r\n\t/**\r\n\t * Appends an additional path to the modal route.\r\n\t *\r\n\t * This can help specify the URL for this modal, or used to add a parameter to the URL like this: \"/modal/my-modal/:index/\"\r\n\t * A folder name starting with a colon \":\" will be interpreted as a parameter. Then this modal can open with any value in that location.\r\n\t * When modal is being setup the value of the parameter can be read from the route params. See the example:\r\n\t * @param {string} additionalPath - The additional path to be appended to the modal route\r\n\t * @returns {UmbModalRouteRegistrationController} this\r\n\t * @example <caption>Example of adding an additional path to the modal route</caption>\r\n\t * const modalRegistration = new UmbModalRouteRegistrationController(this, MY_MODAL_TOKEN)\r\n\t * modalRegistration.addAdditionalPath(':index')\r\n\t *\r\n\t * modalRegistration.onSetup((params) => {\r\n\t * \tconst index = params.index;\r\n\t *  // When entering the url of: \"/modal/my-modal/hello-world/\"\r\n\t *  // Then index will be \"hello-world\"\r\n\t * }\r\n\t */\r\n\tpublic addAdditionalPath(additionalPath: string) {\r\n\t\tthis.#additionalPath = additionalPath;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registerer one or more additional paths to the modal route, similar to addAdditionalPath. But without defining the actual path name. This enables this to be asynchronously defined and even changed later.\r\n\t * This can be useful if your modal has to be unique for this registration, avoiding collision with other registrations.\r\n\t * If you made a modal for editing one of multiple property, then you can add a unique path holding the property id.\r\n\t * Making the URL unique to this modal registration: /modal/my-modal/my-unique-value/\r\n\t *\r\n\t * Notice the modal will only be available when all unique paths have a value.\r\n\t * @param {Array<string>} uniquePathNames - the unique path names\r\n\t * @returns {UmbModalRouteRegistrationController} this\r\n\t * @example <caption>Example of adding an additional unique path to the modal route</caption>\r\n\t * const modalRegistration = new UmbModalRouteRegistrationController(this, MY_MODAL_TOKEN)\r\n\t * modalRegistration.addUniquePaths(['myAliasForIdentifyingThisPartOfThePath'])\r\n\t *\r\n\t * // Later:\r\n\t * modalRegistration.setUniquePathValue('myAliasForIdentifyingThisPartOfThePath', 'myValue');\r\n\t */\r\n\tpublic addUniquePaths(uniquePathNames: Array<string>) {\r\n\t\tif (uniquePathNames) {\r\n\t\t\tuniquePathNames.forEach((name) => {\r\n\t\t\t\tthis.#uniquePaths.set(name, undefined);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Set or change the value of a unique path part.\r\n\t * @param {string} identifier - the unique path part identifier\r\n\t * @param {value | undefined} value - the new value for the unique path part\r\n\t * @example <caption>Example of adding an additional unique path to the modal route</caption>\r\n\t * const modalRegistration = new UmbModalRouteRegistrationController(this, MY_MODAL_TOKEN)\r\n\t * modalRegistration.addUniquePaths(['first-one', 'another-one'])\r\n\t *\r\n\t * // Later:\r\n\t * modalRegistration.setUniquePathValue('first-one', 'myValue');\r\n\t */\r\n\tsetUniquePathValue(identifier: string, value: string | undefined) {\r\n\t\tif (!this.#uniquePaths.has(identifier)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Identifier ${identifier} was not registered at the construction of the modal registration controller, it has to be.`,\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst oldValue = this.#uniquePaths.get(identifier);\r\n\t\tif (oldValue === value) return;\r\n\r\n\t\tthis.#uniquePaths.set(identifier, value);\r\n\t\tthis.#registerModal().catch(() => undefined);\r\n\t}\r\n\tgetUniquePathValue(identifier: string): string | undefined {\r\n\t\treturn this.#uniquePaths.get(identifier);\r\n\t}\r\n\r\n\tasync #registerModal() {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#routeContext) return;\r\n\t\tif (this.#addendum === undefined) return;\r\n\r\n\t\tconst pathParts = Array.from(this.#uniquePaths.values());\r\n\r\n\t\t// Check if there is any undefined values of unique map:\r\n\t\tif (pathParts.some((value) => value === undefined)) {\r\n\t\t\tthis.#unregisterModal();\r\n\t\t}\r\n\r\n\t\tif (this.#addendum !== '') {\r\n\t\t\t// append in the start of pathParts:\r\n\t\t\tpathParts.unshift(this.#addendum);\r\n\t\t}\r\n\r\n\t\tif (this.#additionalPath) {\r\n\t\t\t// Add the configured part of the path:\r\n\t\t\tpathParts.push(this.#additionalPath);\r\n\t\t}\r\n\r\n\t\tconst newPath = pathParts.join('/') ?? '';\r\n\r\n\t\t// if no changes then break out:\r\n\t\t// We test for both path and context changes [NL]\r\n\t\tif (this.path === newPath && this.#modalRegistrationContext === this.#routeContext) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Clean up if it already exists:\r\n\t\tthis.#unregisterModal();\r\n\r\n\t\t// Make this the path of the modal registration:\r\n\t\tthis._setPath(newPath);\r\n\r\n\t\tthis.#routeContext.registerModal(this);\r\n\t\t// Store which context we used and use this as 'if registered', so we can know if it changed.\r\n\t\tthis.#modalRegistrationContext = this.#routeContext;\r\n\t}\r\n\r\n\t#unregisterModal() {\r\n\t\tif (!this.#routeContext) return;\r\n\t\tif (this.#modalRegistrationContext) {\r\n\t\t\tthis.#modalRegistrationContext.unregisterModal(this);\r\n\t\t\tthis.#modalRegistrationContext = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\toverride hostConnected() {\r\n\t\tsuper.hostConnected();\r\n\t\tif (!this.#modalRegistrationContext) {\r\n\t\t\tthis.#registerModal().catch(() => undefined);\r\n\t\t}\r\n\t}\r\n\toverride hostDisconnected(): void {\r\n\t\tsuper.hostDisconnected();\r\n\t\tif (this.#modalRegistrationContext) {\r\n\t\t\tthis.#modalRegistrationContext.unregisterModal(this);\r\n\t\t\tthis.#modalRegistrationContext = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get key() {\r\n\t\treturn this.#key;\r\n\t}\r\n\r\n\tpublic get alias() {\r\n\t\treturn this.#modalAlias;\r\n\t}\r\n\r\n\tpublic generateModalPath() {\r\n\t\treturn `modal/${encodeFolderName(this.alias.toString())}${this.path && this.path !== '' ? `/${this.path}` : ''}`;\r\n\t}\r\n\r\n\tpublic get path() {\r\n\t\treturn this.#path;\r\n\t}\r\n\r\n\tprotected _setPath(path: string | undefined) {\r\n\t\tthis.#path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the modal is currently active.\r\n\t * @returns {boolean} - true if the modal is currently active, false otherwise.\r\n\t */\r\n\tpublic get active() {\r\n\t\treturn !!this.#modalContext;\r\n\t}\r\n\r\n\tpublic open(params: { [key: string]: string | number }, prepend?: string) {\r\n\t\tif (this.active || !this.#routeBuilder) return;\r\n\r\n\t\twindow.history.pushState({}, '', this.#routeBuilder(params) + (prepend ? `${prepend}` : ''));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the modal context if the modal is currently active. Otherwise its undefined.\r\n\t * @returns {UmbModalContext | undefined} - modal context if the modal is active, otherwise undefined.\r\n\t */\r\n\tpublic get modalContext() {\r\n\t\treturn this.#modalContext;\r\n\t}\r\n\r\n\tpublic observeRouteBuilder(callback: (urlBuilder: UmbModalRouteBuilder) => void) {\r\n\t\tthis.#urlBuilderCallback = callback;\r\n\t\treturn this;\r\n\t}\r\n\tpublic _internal_setRouteBuilder(urlBuilder: UmbModalRouteBuilder) {\r\n\t\tif (!this.#routeContext) return;\r\n\t\tthis.#routeBuilder = urlBuilder;\r\n\t\tthis.#urlBuilderCallback?.(urlBuilder);\r\n\t}\r\n\r\n\tpublic onSetup(\r\n\t\tcallback: (\r\n\t\t\troutingInfo: Params,\r\n\t\t) =>\r\n\t\t\t| Promise<UmbModalRouteSetupReturn<UmbModalTokenData, UmbModalTokenValue> | false>\r\n\t\t\t| UmbModalRouteSetupReturn<UmbModalTokenData, UmbModalTokenValue>\r\n\t\t\t| false,\r\n\t) {\r\n\t\tthis.#onSetupCallback = callback;\r\n\t\treturn this;\r\n\t}\r\n\tpublic onSubmit(callback: (value: UmbModalTokenValue, data?: UmbModalTokenData) => void) {\r\n\t\tthis.#onSubmitCallback = callback;\r\n\t\treturn this;\r\n\t}\r\n\tpublic onReject(callback: () => void) {\r\n\t\tthis.#onRejectCallback = callback;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t#onSubmit = (value: UmbModalTokenValue) => {\r\n\t\tthis.#onSubmitCallback?.(value, this.#modalContext?.data);\r\n\t\tthis.#modalContext = undefined;\r\n\t};\r\n\t#onReject = () => {\r\n\t\tthis.#onRejectCallback?.();\r\n\t\tthis.#modalContext = undefined;\r\n\t};\r\n\r\n\tasync routeSetup(router: IRouterSlot, modalManagerContext: UmbModalManagerContext, params: Params) {\r\n\t\t// If already open, don't do anything:\r\n\t\tif (this.active) return;\r\n\r\n\t\tconst modalData = this.#onSetupCallback ? await this.#onSetupCallback(params) : undefined;\r\n\t\tif (modalData !== false) {\r\n\t\t\tconst args = {\r\n\t\t\t\tmodal: {},\r\n\t\t\t\t...modalData,\r\n\t\t\t\trouter,\r\n\t\t\t} as UmbModalContextClassArgs<UmbModalToken<UmbModalTokenData, UmbModalTokenValue>>;\r\n\t\t\targs.modal!.key = this.#key;\r\n\r\n\t\t\tthis.#modalContext = modalManagerContext.open(this, this.#modalAlias, args);\r\n\t\t\tthis.#modalContext.onSubmit().then(this.#onSubmit, this.#onReject);\r\n\t\t\treturn this.#modalContext;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\tpublic override destroy(): void {\r\n\t\tsuper.destroy();\r\n\t\tthis.#modalRegistrationContext = undefined;\r\n\t\tthis.#uniquePaths = undefined as any;\r\n\t\tthis.#routeContext = undefined;\r\n\t}\r\n}\r\n","import { GLOBAL_ROUTER_EVENTS_TARGET, ROUTER_SLOT_TAG_NAME } from './config.js';\r\nimport type {\r\n\tCancel,\r\n\tEventListenerSubscription,\r\n\tGlobalRouterEvent,\r\n\tIPathFragments,\r\n\tIRoute,\r\n\tIRouteMatch,\r\n\tIRouterSlot,\r\n\tIRoutingInfo,\r\n\tParams,\r\n\tPathFragment,\r\n\tRouterSlotEvent,\r\n} from './model.js';\r\nimport {\r\n\taddListener,\r\n\tconstructAbsolutePath,\r\n\tdispatchGlobalRouterEvent,\r\n\tdispatchRouteChangeEvent,\r\n\tensureAnchorHistory,\r\n\tensureHistoryEvents,\r\n\thandleRedirect,\r\n\tisRedirectRoute,\r\n\tisResolverRoute,\r\n\tmatchRoutes,\r\n\tpathWithoutBasePath,\r\n\tqueryParentRouterSlot,\r\n\tremoveListeners,\r\n\tresolvePageComponent,\r\n\tshouldNavigate,\r\n} from './util.js';\r\n\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML = `<slot></slot>`;\r\n\r\n// Patches the history object and ensures the correct events.\r\nensureHistoryEvents();\r\n\r\n// Ensure the anchor tags uses the history API\r\nensureAnchorHistory();\r\n\r\n/**\r\n * Slot for a node in the router tree.\r\n * @slot - Default content.\r\n * @event changestate - Dispatched when the router slot state changes.\r\n */\r\n// eslint-disable-next-line local-rules/enforce-element-suffix-on-element-class-name, local-rules/umb-class-prefix\r\nexport class RouterSlot<D = any, P = any> extends HTMLElement implements IRouterSlot<D, P> {\r\n\t/**\r\n\t * Method to cancel navigation if changed.\r\n\t */\r\n\tprivate _cancelNavigation?: () => void;\r\n\r\n\t/**\r\n\t * Listeners on the router.\r\n\t */\r\n\tprivate listeners: EventListenerSubscription[] = [];\r\n\r\n\t/**\r\n\t * The available routes.\r\n\t */\r\n\tprivate _routes: IRoute<D>[] = [];\r\n\tget routes(): IRoute<D>[] {\r\n\t\treturn this._routes;\r\n\t}\r\n\r\n\tset routes(routes: IRoute<D>[]) {\r\n\t\tthis.clear();\r\n\t\tthis.add(routes);\r\n\t}\r\n\r\n\t/**\r\n\t * The parent router.\r\n\t * Is REQUIRED if this router is a child.\r\n\t * When set, the relevant listeners are added or teared down because they depend on the parent.\r\n\t */\r\n\t_parent: IRouterSlot<P> | null | undefined;\r\n\tget parent(): IRouterSlot<P> | null | undefined {\r\n\t\treturn this._parent;\r\n\t}\r\n\tset parent(router: IRouterSlot<P> | null | undefined) {\r\n\t\tthis._lockParent = true;\r\n\t\tthis._setParent(router);\r\n\t}\r\n\r\n\tprivate _lockParent = false;\r\n\tprivate _setParent(router: IRouterSlot<P> | null | undefined) {\r\n\t\tif (this._parent === router) return;\r\n\t\tthis.detachListeners();\r\n\t\tthis._parent = router;\r\n\t\tthis.attachListeners();\r\n\t}\r\n\r\n\t/**\r\n\t * Whether the router is a root router.\r\n\t */\r\n\tget isRoot(): boolean {\r\n\t\treturn this.parent == null;\r\n\t}\r\n\r\n\t/**\r\n\t * The current route match.\r\n\t */\r\n\tprivate _routeMatch: IRouteMatch<D> | null = null;\r\n\r\n\tget match(): IRouteMatch<D> | null {\r\n\t\treturn this._routeMatch;\r\n\t}\r\n\r\n\t/**\r\n\t * The current route of the match.\r\n\t */\r\n\tget route(): IRoute<D> | null {\r\n\t\treturn this.match != null ? this.match.route : null;\r\n\t}\r\n\r\n\t/**\r\n\t * The current path fragment of the match\r\n\t */\r\n\tget fragments(): IPathFragments | null {\r\n\t\treturn this.match != null ? this.match.fragments : null;\r\n\t}\r\n\r\n\t/**\r\n\t * The current params of the match.\r\n\t */\r\n\tget params(): Params | null {\r\n\t\treturn this.match != null ? this.match.params : null;\r\n\t}\r\n\r\n\t/**\r\n\t * Hooks up the element.\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.addEventListener('router-slot:capture-parent', (e: any) => {\r\n\t\t\te.stopPropagation();\r\n\t\t\te.detail.parent = this;\r\n\t\t});\r\n\r\n\t\tthis.render = this.render.bind(this);\r\n\r\n\t\t// Attach the template\r\n\t\tconst shadow = this.attachShadow({ mode: 'open' });\r\n\t\tshadow.appendChild(template.content.cloneNode(true));\r\n\t}\r\n\r\n\t/**\r\n\t * Query the parent router slot when the router slot is connected.\r\n\t */\r\n\toverride connectedCallback() {\r\n\t\t// Do not query a parent if the parent has been set from the outside.\r\n\t\tif (!this._lockParent) {\r\n\t\t\tconst captureParentEvent = new CustomEvent('router-slot:capture-parent', {\r\n\t\t\t\tcomposed: true,\r\n\t\t\t\tbubbles: true,\r\n\t\t\t\tdetail: { parent: null },\r\n\t\t\t});\r\n\t\t\tif (this.parentNode) {\r\n\t\t\t\tthis.parentNode.dispatchEvent(captureParentEvent);\r\n\t\t\t\tthis._setParent(captureParentEvent.detail.parent ?? null);\r\n\t\t\t} else {\r\n\t\t\t\tthis._setParent(null);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.parent) {\r\n\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\tif (this.parent && this.parent.match !== null && this.match === null) {\r\n\t\t\t\t\tthis.render();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Tears down the element.\r\n\t */\r\n\toverride disconnectedCallback() {\r\n\t\tthis._setParent(null);\r\n\t\tthis._cancelNavigation?.();\r\n\t\tthis.detachListeners();\r\n\t}\r\n\r\n\t/**\r\n\t * Queries the parent router.\r\n\t */\r\n\tqueryParentRouterSlot(): IRouterSlot<P> | null {\r\n\t\treturn queryParentRouterSlot<P>(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute path relative to the router slot.\r\n\t * @param path\r\n\t */\r\n\tconstructAbsolutePath(path: PathFragment): string {\r\n\t\treturn constructAbsolutePath(this, path);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds routes to the router.\r\n\t * Navigates automatically if the router slot is the root and is connected.\r\n\t * @param routes\r\n\t * @param navigate\r\n\t */\r\n\tadd(routes: IRoute<D>[], navigate?: boolean): void {\r\n\t\t// Add the routes to the array\r\n\t\tthis._routes.push(...routes);\r\n\r\n\t\tif (navigate === undefined) {\r\n\t\t\tif (this.isConnected) {\r\n\t\t\t\t// If navigate is not determined, then we will check if we have a route match, and if the new match is different from current. [NL]\r\n\t\t\t\tconst newMatch = this.getRouteMatch();\r\n\t\t\t\tif (newMatch) {\r\n\t\t\t\t\t// Check if this match matches the current match (aka. If the path has changed), if so we should navigate. [NL]\r\n\t\t\t\t\tnavigate = shouldNavigate(this.match, newMatch);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Navigate fallback:\r\n\t\tnavigate ??= this.isRoot && this.isConnected;\r\n\r\n\t\t// Register that the path has changed so the correct route can be loaded.\r\n\t\tif (navigate) {\r\n\t\t\tthis.render();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all routes.\r\n\t */\r\n\tclear(): void {\r\n\t\tthis._routes.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Each time the path changes, load the new path.\r\n\t */\r\n\tasync render(): Promise<void> {\r\n\t\t// When using ShadyDOM the disconnectedCallback in the child router slot is called async\r\n\t\t// in a microtask. This means that when using the ShadyDOM polyfill, sometimes child router slots\r\n\t\t// would not clear event listeners from the parent router slots and therefore route even though\r\n\t\t// it was no longer in the DOM. The solution is to check whether the isConnected flag is false\r\n\t\t// before rendering the path.\r\n\t\tif (!this.isConnected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Either choose the parent fragment or the current path if no parent exists.\r\n\t\t// The root router slot will always use the entire path.\r\n\t\tconst pathFragment = this.getPathFragment();\r\n\r\n\t\t// Route to the path\r\n\t\tawait this.renderPath(pathFragment);\r\n\t}\r\n\r\n\tprotected getPathFragment() {\r\n\t\treturn this.parent != null && this.parent.fragments != null ? this.parent.fragments.rest : pathWithoutBasePath();\r\n\t}\r\n\r\n\tprotected getRouteMatch() {\r\n\t\t// Find the corresponding route.\r\n\t\treturn matchRoutes(this._routes, this.getPathFragment());\r\n\t}\r\n\r\n\t/**\r\n\t * Attaches listeners, either globally or on the parent router.\r\n\t */\r\n\tprotected attachListeners(): void {\r\n\t\t// Add listeners that updates the route\r\n\t\tthis.listeners.push(\r\n\t\t\tthis.parent != null\r\n\t\t\t\t? // Attach child router listeners\r\n\t\t\t\t\taddListener<Event, RouterSlotEvent>(this.parent, 'changestate', this.render)\r\n\t\t\t\t: // Add global listeners.\r\n\t\t\t\t\taddListener<Event, GlobalRouterEvent>(GLOBAL_ROUTER_EVENTS_TARGET, 'changestate', this.render),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the children in the DOM.\r\n\t */\r\n\tprotected clearChildren() {\r\n\t\twhile (this.firstChild != null) {\r\n\t\t\t// If our route-component has a destroy method, then call it.\r\n\t\t\t(this.firstChild as any).destroy?.();\r\n\t\t\tthis.firstChild.parentNode!.removeChild(this.firstChild);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Detaches the listeners.\r\n\t */\r\n\tprotected detachListeners(): void {\r\n\t\tremoveListeners(this.listeners);\r\n\t}\r\n\r\n\t/**\r\n\t * Notify the listeners.\r\n\t * @param info\r\n\t */\r\n\tnotifyChildRouters<D = any>(info: IRoutingInfo<D>) {\r\n\t\t// This method should be called before routeMatch is being set!\r\n\t\t// This only work cause we are using a requestAnimationFrame to dispatch the event,\r\n\t\t// in other words, the routeMatch will be set when the child router receives the event.\r\n\t\t// Scenario:\r\n\t\t// When this router came from a route(routeMatch !== null), then:\r\n\t\t// Dispatch the route change event to notify the children that something happened.\r\n\t\t// This is because the child routes might have to change routes further down the tree.\r\n\t\t// The event is dispatched in an animation frame to allow route children to make the initial render first\r\n\t\t// and hook up the new router slot.\r\n\t\tif (this._routeMatch !== null) {\r\n\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\tdispatchRouteChangeEvent(this, info);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getRedirectDelay() {\r\n\t\tif ('connection' in navigator) {\r\n\t\t\tconst connection =\r\n\t\t\t\tnavigator.connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\r\n\r\n\t\t\tswitch (connection.effectiveType) {\r\n\t\t\t\tcase 'slow-2g':\r\n\t\t\t\tcase '2g':\r\n\t\t\t\t\treturn 1200;\r\n\t\t\t\tcase '3g':\r\n\t\t\t\t\treturn 800;\r\n\t\t\t\tcase '4g':\r\n\t\t\t\t\treturn 200;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 400;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads a new path based on the routes.\r\n\t * Returns true if a navigation was made to a new page.\r\n\t * @param path\r\n\t */\r\n\tprotected async renderPath(path: string | PathFragment): Promise<boolean> {\r\n\t\t// Notice: Since this is never called from any other place than one higher in this file(when writing this...), we could just retrieve the path and find a match by using this.getRouteMatch() [NL]\r\n\t\t// Find the corresponding route.\r\n\t\tconst match = matchRoutes(this._routes, path);\r\n\r\n\t\t// Ensure that a route was found, otherwise we just clear the current state of the route.\r\n\t\tif (match == null) {\r\n\t\t\tthis._routeMatch = null;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst { route } = match;\r\n\t\tconst info: IRoutingInfo<D, P> = { match, slot: this };\r\n\r\n\t\ttry {\r\n\t\t\t// Only change route if its a new route.\r\n\t\t\tconst navigate = shouldNavigate(this.match, match);\r\n\t\t\tif (navigate) {\r\n\t\t\t\t// If another navigation is still begin resolved in this very moment, then we need to cancel that so it does not end up overriding this new navigation.[NL]\r\n\t\t\t\tthis._cancelNavigation?.();\r\n\t\t\t\t// Listen for another push state event. If another push state event happens\r\n\t\t\t\t// while we are about to navigate we have to cancel.\r\n\t\t\t\tlet navigationInvalidated = false;\r\n\t\t\t\tconst cancelNavigation = () => {\r\n\t\t\t\t\tnavigationInvalidated = true;\r\n\t\t\t\t\tthis._cancelNavigation = undefined;\r\n\t\t\t\t};\r\n\t\t\t\tthis._cancelNavigation = cancelNavigation;\r\n\t\t\t\tconst removeChangeListener: EventListenerSubscription = addListener<Event, GlobalRouterEvent>(\r\n\t\t\t\t\tGLOBAL_ROUTER_EVENTS_TARGET,\r\n\t\t\t\t\t'changestate',\r\n\t\t\t\t\tcancelNavigation,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonce: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Cleans up the routing by removing listeners and restoring the match from before\r\n\t\t\t\tconst cleanup = () => {\r\n\t\t\t\t\tremoveChangeListener();\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Cleans up and dispatches a global event that a navigation was cancelled.\r\n\t\t\t\tconst cancel: Cancel = () => {\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tdispatchGlobalRouterEvent('navigationcancel', info);\r\n\t\t\t\t\tdispatchGlobalRouterEvent('navigationend', info);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Dispatch globally that a navigation has started\r\n\t\t\t\tdispatchGlobalRouterEvent('navigationstart', info);\r\n\r\n\t\t\t\t// Check whether the guards allow us to go to the new route.\r\n\t\t\t\tif (route.guards != null) {\r\n\t\t\t\t\tfor (const guard of route.guards) {\r\n\t\t\t\t\t\tif (!(await guard(info))) {\r\n\t\t\t\t\t\t\treturn cancel();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We are going to navigate, so we want to notify the child routers:\r\n\t\t\t\tthis.notifyChildRouters(info);\r\n\r\n\t\t\t\t// Redirect if necessary\r\n\t\t\t\tif (isRedirectRoute(route)) {\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tif (route.awaitStability === true) {\r\n\t\t\t\t\t\t// await until browser is done loading, based on a guess:\r\n\t\t\t\t\t\tconst delay = this.getRedirectDelay();\r\n\t\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\r\n\t\t\t\t\t\tif (navigationInvalidated) {\r\n\t\t\t\t\t\t\treturn cancel();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Check if the current route is still matching the browser URL.:\r\n\t\t\t\t\tif (!window.location.href.includes(this.constructAbsolutePath(''))) {\r\n\t\t\t\t\t\t// If the parent is active, we should not redirect.\r\n\t\t\t\t\t\treturn cancel();\r\n\t\t\t\t\t}\r\n\t\t\t\t\thandleRedirect(this, route);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handle custom resolving if necessary\r\n\t\t\t\telse if (isResolverRoute(route)) {\r\n\t\t\t\t\t// The resolve will handle the rest of the navigation. This includes whether or not the navigation\r\n\t\t\t\t\t// should be cancelled. If the resolve function returns false we cancel the navigation.\r\n\t\t\t\t\tif ((await route.resolve(info)) === false) {\r\n\t\t\t\t\t\treturn cancel();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the component provided is a function (and not a class) call the function to get the promise.\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst page = await resolvePageComponent(route, info);\r\n\r\n\t\t\t\t\t// Cancel the navigation if another navigation event was sent while this one was loading\r\n\t\t\t\t\tif (navigationInvalidated) {\r\n\t\t\t\t\t\treturn cancel();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// We have some routes that share the same component instance, those should not be removed and re-appended [NL]\r\n\t\t\t\t\tconst isTheSameComponent = this.firstChild === page;\r\n\r\n\t\t\t\t\tif (!isTheSameComponent) {\r\n\t\t\t\t\t\t// Remove the old page by clearing the slot\r\n\t\t\t\t\t\tthis.clearChildren();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Store the new route match before we append the new page to the DOM.\r\n\t\t\t\t\t// We do this to ensure that we can find the match in the connectedCallback of the page.\r\n\t\t\t\t\tthis._routeMatch = match;\r\n\r\n\t\t\t\t\tif (!isTheSameComponent) {\r\n\t\t\t\t\t\tif (page) {\r\n\t\t\t\t\t\t\t// Append the new page\r\n\t\t\t\t\t\t\tthis.appendChild(page);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Remember to cleanup after the navigation\r\n\t\t\t\tcleanup();\r\n\t\t\t} else {\r\n\t\t\t\t// We did not make a new navigation this time, but we want to notify children here:\r\n\t\t\t\tthis.notifyChildRouters(info);\r\n\t\t\t}\r\n\r\n\t\t\t// Store the new route match\r\n\t\t\tthis._routeMatch = match;\r\n\r\n\t\t\t// Dispatch globally that a navigation has ended.\r\n\t\t\tif (navigate) {\r\n\t\t\t\tdispatchGlobalRouterEvent('navigationsuccess', info);\r\n\t\t\t\tdispatchGlobalRouterEvent('navigationend', info);\r\n\t\t\t}\r\n\r\n\t\t\treturn navigate;\r\n\t\t} catch (e) {\r\n\t\t\tdispatchGlobalRouterEvent('navigationerror', info);\r\n\t\t\tdispatchGlobalRouterEvent('navigationend', info);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nwindow.customElements.define(ROUTER_SLOT_TAG_NAME, RouterSlot);\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'router-slot': RouterSlot;\r\n\t}\r\n}\r\n"],"names":["UmbRouteForbiddenElement","UmbLitElement","html","UmbTextStyles","css","__decorateClass","customElement","UmbRouteNotFoundElement","CATCH_ALL_WILDCARD","TRAVERSE_FLAG","PARAM_IDENTIFIER","ROUTER_SLOT_TAG_NAME","GLOBAL_ROUTER_EVENTS_TARGET","HISTORY_PATCH_NATIVE_KEY","DEFAULT_PATH_MATCH","dispatchRouteChangeEvent","$elem","detail","dispatchGlobalRouterEvent","name","addListener","type","listener","options","types","t","removeListeners","listeners","unsub","historyPatches","ensureHistoryEvents","events","event","attachCallback","shouldCancelChangeState","obj","functionName","eventName","func","saveNativeFunction","args","url","data","$anchor","path","slashify","pathWithoutBasePath","stripStart","basePath","constructPathWithBasePath","part","queryString","query","toQuery","stripSlash","ensureSlash","start","end","arrayMap","atom","arr","toQueryString","key","value","isPathActive","fullPath","getPath","matchRoute","route","paramNames","routePath","substring","regex","match","params","acc","i","consumed","rest","matchRoutes","routes","resolvePageComponent","info","cmp","err","moduleClassOrPage","component","isRedirectRoute","isResolverRoute","traverseRouterTree","slot","tree","depth","getFragments","child","fragments","constructAbsolutePath","traverseDepth","length","m","fragment","handleRedirect","shouldNavigate","currentMatch","newMatch","currentRoute","currentFragments","newRoute","newFragments","isSameRoute","isSameFragments","isSameBasedOnUnique","queryParentRouterSlot","queryParentRoots","minRoots","roots","$root","$rootRootNode","ensureAnchorHistory","isWindows","e","umbGenerateRoutePathBuilder","umbUrlPatternToString","EmptyDiv","UmbRouteContext","UmbContextBase","host","mainRouter","modalRouter","UMB_ROUTE_CONTEXT","#modalRegistrations","#modalRoutes","#basePath","UmbStringState","#activeLocalPath","mergeObservables","localPath","#createNewUrlBuilder","modalRegistration","routerBasePath","activeLocalPath","routeBasePath","routeActiveLocalPath","urlBuilder","#modalRouter","UMB_MODAL_MANAGER_CONTEXT","context","#modalContext","#generateModalRoutes","#activeModalPath","registration","registrationToken","index","#generateRoute","modalContext","folderToRemove","newModals","x","routesToRemove","cleanedRoutes","#createNewUrlBuilders","routerActiveLocalPath","activeModalPath","activeModal","UmbContextToken","UmbRouterSlotChangeEvent","UUIEvent","UmbRouterSlotInitEvent","UMB_ROUTE_PATH_ADDENDUM_CONTEXT","UmbRoutePathAddendumResetContext","#appendum","_router","_modalRouter","_listening","_routeContext","UmbRouterSlotElement","__privateAdd","__privateGet","newActiveLocalPath","newActiveModalLocalPath","oldValue","r","parent","__privateSet","_changedProperties","newAbsolutePath","property","UmbRoutePathAddendumContext","#addendum","addendum","#parent","#update","#current","add","encodeFolderName","UmbModalRouteRegistrationController","UmbControllerBase","#init","#additionalPath","#uniquePaths","#routeContext","#modalRegistrationContext","#key","#path","#modalAlias","#onSetupCallback","#onSubmitCallback","#onRejectCallback","#routeBuilder","#urlBuilderCallback","alias","ctrlAlias","UmbId","#registerModal","additionalPath","uniquePathNames","identifier","pathParts","#unregisterModal","newPath","prepend","callback","#onSubmit","#onReject","router","modalManagerContext","modalData","template","RouterSlot","captureParentEvent","navigate","pathFragment","navigationInvalidated","cancelNavigation","removeChangeListener","cleanup","cancel","guard","delay","resolve","page","isTheSameComponent"],"mappings":"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"}