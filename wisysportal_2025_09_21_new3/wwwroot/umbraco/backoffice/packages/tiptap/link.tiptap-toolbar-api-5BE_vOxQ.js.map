{"version":3,"file":"link.tiptap-toolbar-api-5BE_vOxQ.js","sources":["../../../src/packages/tiptap/extensions/toolbar/link.tiptap-toolbar-api.ts"],"sourcesContent":["import { UmbTiptapToolbarElementApiBase } from '../base.js';\r\nimport { UmbLink } from '@umbraco-cms/backoffice/external/tiptap';\r\nimport { UMB_LINK_PICKER_MODAL } from '@umbraco-cms/backoffice/multi-url-picker';\r\nimport { umbOpenModal } from '@umbraco-cms/backoffice/modal';\r\nimport type { Editor } from '@umbraco-cms/backoffice/external/tiptap';\r\nimport type { UmbLinkPickerLink } from '@umbraco-cms/backoffice/multi-url-picker';\r\nimport type { UUIModalSidebarSize } from '@umbraco-cms/backoffice/external/uui';\r\n\r\nexport default class UmbTiptapToolbarLinkExtensionApi extends UmbTiptapToolbarElementApiBase {\r\n\toverride async execute(editor?: Editor) {\r\n\t\tconst attrs = editor?.getAttributes(UmbLink.name) ?? {};\r\n\t\tconst link = this.#getLinkData(attrs);\r\n\t\tconst data = { config: {}, index: null, isNew: link?.url === undefined };\r\n\t\tconst value = { link };\r\n\r\n\t\tconst overlaySize = this.configuration?.getValueByAlias<UUIModalSidebarSize>('overlaySize') ?? 'small';\r\n\r\n\t\tconst result = await umbOpenModal(this, UMB_LINK_PICKER_MODAL, { data, value, modal: { size: overlaySize } }).catch(\r\n\t\t\t() => undefined,\r\n\t\t);\r\n\t\tif (!result?.link) return;\r\n\r\n\t\tconst linkAttrs = this.#parseLinkData(result.link);\r\n\r\n\t\tif (linkAttrs) {\r\n\t\t\teditor?.chain().focus().extendMarkRange(UmbLink.name).setUmbLink(linkAttrs).run();\r\n\t\t} else {\r\n\t\t\teditor?.chain().focus().extendMarkRange(UmbLink.name).unsetLink().run();\r\n\t\t}\r\n\t}\r\n\r\n\t#getLinkData(attrs: Record<string, any>): UmbLinkPickerLink {\r\n\t\tconst queryString = attrs['data-anchor'];\r\n\t\tconst url = attrs.href?.substring(0, attrs.href.length - (queryString?.length ?? 0));\r\n\t\tconst unique = url?.includes('localLink:') ? url.substring(url.indexOf(':') + 1, url.indexOf('}')) : null;\r\n\r\n\t\treturn {\r\n\t\t\tname: attrs.title,\r\n\t\t\tqueryString,\r\n\t\t\ttarget: attrs.target,\r\n\t\t\ttype: attrs.type,\r\n\t\t\tunique,\r\n\t\t\turl,\r\n\t\t};\r\n\t}\r\n\r\n\t#parseLinkData(link: UmbLinkPickerLink) {\r\n\t\tconst { name, target, type, unique } = link;\r\n\t\tlet { queryString, url } = link;\r\n\r\n\t\t// If an anchor exists, check that it is appropriately prefixed\r\n\t\tqueryString = this.#queryStringFromUrl(queryString);\r\n\r\n\t\t// The href might be an external url, so check the value for an anchor/querystring;\r\n\t\t// `href` has the anchor re-appended later, hence the reset here to avoid duplicating the anchor\r\n\t\tif (!queryString) {\r\n\t\t\tconst extractedInfo = this.#extractUrlAndQueryString(url, queryString);\r\n\t\t\turl = extractedInfo.url;\r\n\t\t\tqueryString = extractedInfo.queryString;\r\n\t\t}\r\n\r\n\t\t// If we have a unique id, it must be a `/{localLink:guid}`\r\n\t\tif (unique) {\r\n\t\t\turl = `/{localLink:${unique}}`;\r\n\t\t} else {\r\n\t\t\t// If it's an email address and not `//user@domain.com` and protocol (e.g. mailto:, sip:) is not specified;\r\n\t\t\t// then we'll assume it should be a \"mailto\" link.\r\n\t\t\turl = this.#transformURLToMailto(url);\r\n\r\n\t\t\turl = this.#ensureHttpProtocol(url);\r\n\t\t}\r\n\r\n\t\tconst anchor = this.#getAnchorFromQueryString(queryString);\r\n\r\n\t\tif (anchor) {\r\n\t\t\turl = (url ?? '') + anchor;\r\n\t\t}\r\n\r\n\t\tif (!url) return null;\r\n\r\n\t\treturn {\r\n\t\t\ttype: type ?? 'external',\r\n\t\t\thref: url,\r\n\t\t\t'data-anchor': anchor,\r\n\t\t\ttarget,\r\n\t\t\ttitle: name ?? url,\r\n\t\t};\r\n\t}\r\n\r\n\t#extractUrlAndQueryString(url: string | null | undefined, queryString: string | null) {\r\n\t\tconst urlParts = url?.split(/([#?])/);\r\n\t\tif (urlParts?.length === 3) {\r\n\t\t\turl = urlParts[0];\r\n\t\t\tqueryString = urlParts[1] + urlParts[2];\r\n\t\t}\r\n\t\treturn { url, queryString };\r\n\t}\r\n\r\n\t/**\r\n\t * If the URL is prefixed \"www.\", then prepend \"http://\" protocol scheme.\r\n\t * @param url\r\n\t */\r\n\t#ensureHttpProtocol(url: string | null | undefined) {\r\n\t\tif (!url) return null;\r\n\t\tif (/^\\s*www\\./i.test(url)) {\r\n\t\t\turl = `http://${url}`;\r\n\t\t}\r\n\t\treturn url;\r\n\t}\r\n\r\n\t/**\r\n\t * If the URL is an email address, then prepend \"mailto:\" protocol scheme.\r\n\t * @param url\r\n\t */\r\n\t#transformURLToMailto(url: string | null | undefined) {\r\n\t\tif (!url) return null;\r\n\t\tif (url?.includes('@') && !url.includes('//') && !url.includes(':')) {\r\n\t\t\turl = `mailto:${url}`;\r\n\t\t}\r\n\t\treturn url;\r\n\t}\r\n\r\n\t/**\r\n\t * If the URL contains an anchor, then return the anchor.\r\n\t * @param queryString\r\n\t */\r\n\t#getAnchorFromQueryString(queryString: string | null) {\r\n\t\tif (!queryString) return null;\r\n\t\treturn queryString.startsWith('#') || queryString.startsWith('?') ? queryString : null;\r\n\t}\r\n\r\n\t/**\r\n\t * If the query string does not start with \"?\" or \"#\", then prepend it.\r\n\t * @param queryString\r\n\t */\r\n\t#queryStringFromUrl(queryString: string | null | undefined) {\r\n\t\tif (!queryString) return null;\r\n\t\tif (!queryString.startsWith('?') && !queryString.startsWith('#')) {\r\n\t\t\tqueryString = (queryString.startsWith('=') ? '#' : '?') + queryString;\r\n\t\t}\r\n\t\treturn queryString;\r\n\t}\r\n}\r\n"],"names":["UmbTiptapToolbarLinkExtensionApi","UmbTiptapToolbarElementApiBase","editor","attrs","UmbLink","link","#getLinkData","data","value","overlaySize","result","umbOpenModal","UMB_LINK_PICKER_MODAL","linkAttrs","#parseLinkData","queryString","url","unique","name","target","type","#queryStringFromUrl","extractedInfo","#extractUrlAndQueryString","#transformURLToMailto","#ensureHttpProtocol","anchor","#getAnchorFromQueryString","urlParts"],"mappings":"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"}