{"version":3,"file":"media-upload.tiptap-api-0LiwID2H.js","sources":["../../../src/packages/tiptap/extensions/core/media-upload.tiptap-api.ts"],"sourcesContent":["import { UmbTiptapExtensionApiBase } from '../base.js';\r\nimport type { UmbTiptapExtensionArgs } from '../types.js';\r\nimport { imageSize } from '@umbraco-cms/backoffice/utils';\r\nimport { Extension } from '@umbraco-cms/backoffice/external/tiptap';\r\nimport { TemporaryFileStatus, UmbTemporaryFileManager } from '@umbraco-cms/backoffice/temporary-file';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport type { Editor } from '@umbraco-cms/backoffice/external/tiptap';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbPropertyEditorConfigCollection } from '@umbraco-cms/backoffice/property-editor';\r\nimport type { UmbTemporaryFileModel } from '@umbraco-cms/backoffice/temporary-file';\r\n\r\nexport default class UmbTiptapMediaUploadExtensionApi extends UmbTiptapExtensionApiBase {\r\n\t#configuration?: UmbPropertyEditorConfigCollection;\r\n\r\n\t/**\r\n\t * @returns {number} The configured maximum allowed image size\r\n\t */\r\n\tget maxImageSize(): number {\r\n\t\tconst maxImageSize = parseInt(this.#configuration?.getValueByAlias('maxImageSize') ?? '', 10);\r\n\t\treturn isNaN(maxImageSize) ? 500 : maxImageSize;\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated Use `maxImageSize` instead.\r\n\t * @returns {number} The maximum width of uploaded images\r\n\t */\r\n\tmaxWidth = this.maxImageSize;\r\n\r\n\t/**\r\n\t * @returns {Array<string>} The allowed mime types for uploads\r\n\t */\r\n\tget allowedFileTypes(): string[] {\r\n\t\treturn (\r\n\t\t\tthis.#configuration?.getValueByAlias<string[]>('allowedFileTypes') ?? ['image/jpeg', 'image/png', 'image/gif']\r\n\t\t);\r\n\t}\r\n\r\n\treadonly #manager = new UmbTemporaryFileManager(this);\r\n\treadonly #localize = new UmbLocalizationController(this);\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\r\n\t\t\tthis.#notificationContext = instance;\r\n\t\t});\r\n\t}\r\n\r\n\tgetTiptapExtensions(args: UmbTiptapExtensionArgs) {\r\n\t\tthis.#configuration = args?.configuration;\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\r\n\t\tconst self = this;\r\n\t\treturn [\r\n\t\t\tExtension.create({\r\n\t\t\t\tname: 'umbMediaUpload',\r\n\t\t\t\tonCreate() {\r\n\t\t\t\t\tthis.parent?.();\r\n\t\t\t\t\tconst host = this.editor.view.dom;\r\n\r\n\t\t\t\t\thost.addEventListener('dragover', (event) => {\r\n\t\t\t\t\t\t// Required to allow drop events\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\thost.addEventListener('drop', (event) => {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\r\n\t\t\t\t\t\tconst files = event.dataTransfer?.files;\r\n\t\t\t\t\t\tif (!files) return;\r\n\r\n\t\t\t\t\t\tself.#uploadTemporaryFile(files, this.editor);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\thost.addEventListener('paste', (event) => {\r\n\t\t\t\t\t\tconst htmlContent = event.clipboardData?.getData('text/html');\r\n\t\t\t\t\t\tif (htmlContent) {\r\n\t\t\t\t\t\t\t// If there is HTML content, exit early to prevent uploading the remote file(s).\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst files = event.clipboardData?.files;\r\n\t\t\t\t\t\tif (!files) return;\r\n\r\n\t\t\t\t\t\tself.#uploadTemporaryFile(files, this.editor);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t];\r\n\t}\r\n\r\n\t/**\r\n\t * Uploads the files to the server and inserts them into the editor as data URIs.\r\n\t * The server will replace the data URI with a proper URL when the content is saved.\r\n\t * @param {FileList} files The files to upload.\r\n\t * @param {Editor} editor The editor to insert the images into.\r\n\t */\r\n\tasync #uploadTemporaryFile(files: FileList, editor: Editor): Promise<void> {\r\n\t\tconst filteredFiles = this.#filterFiles(files);\r\n\t\tconst fileModels = filteredFiles.map((file) => this.#mapFileToTemporaryFile(file));\r\n\r\n\t\tthis.dispatchEvent(new CustomEvent('rte.file.uploading', { composed: true, bubbles: true, detail: fileModels }));\r\n\r\n\t\tconst uploads = await this.#manager.upload(fileModels);\r\n\t\tconst maxImageSize = this.maxImageSize;\r\n\r\n\t\tuploads.forEach(async (upload) => {\r\n\t\t\tif (upload.status !== TemporaryFileStatus.SUCCESS) {\r\n\t\t\t\tthis.#notificationContext?.peek('danger', {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\theadline: upload.file.name,\r\n\t\t\t\t\t\tmessage: this.#localize.term('errors_dissallowedMediaType'),\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst blobUrl = URL.createObjectURL(upload.file);\r\n\r\n\t\t\t// Get the image dimensions - this essentially simulates what the server would do\r\n\t\t\t// when it resizes the image. The server will return the resized image URL.\r\n\t\t\t// We need to use the blob URL here, as the server will not be able to access the local file.\r\n\t\t\tconst { width, height } = await imageSize(blobUrl, { maxWidth: maxImageSize, maxHeight: maxImageSize });\r\n\r\n\t\t\teditor\r\n\t\t\t\t.chain()\r\n\t\t\t\t.focus()\r\n\t\t\t\t.setImage({\r\n\t\t\t\t\tsrc: blobUrl,\r\n\t\t\t\t\twidth: width.toString(),\r\n\t\t\t\t\theight: height.toString(),\r\n\t\t\t\t\t'data-tmpimg': upload.temporaryUnique,\r\n\t\t\t\t})\r\n\t\t\t\t.run();\r\n\t\t});\r\n\r\n\t\tthis.dispatchEvent(new CustomEvent('rte.file.uploaded', { composed: true, bubbles: true, detail: uploads }));\r\n\t}\r\n\r\n\t#mapFileToTemporaryFile(file: File): UmbTemporaryFileModel {\r\n\t\treturn {\r\n\t\t\tfile,\r\n\t\t\ttemporaryUnique: UmbId.new(),\r\n\t\t};\r\n\t}\r\n\r\n\t#filterFiles(files: FileList): File[] {\r\n\t\treturn Array.from(files).filter((file) => this.allowedFileTypes.includes(file.type));\r\n\t}\r\n}\r\n"],"names":["UmbTiptapMediaUploadExtensionApi","UmbTiptapExtensionApiBase","host","#manager","UmbTemporaryFileManager","#localize","UmbLocalizationController","UMB_NOTIFICATION_CONTEXT","instance","#notificationContext","#configuration","maxImageSize","args","self","Extension","event","files","#uploadTemporaryFile","editor","fileModels","#filterFiles","file","#mapFileToTemporaryFile","uploads","upload","TemporaryFileStatus","blobUrl","width","height","imageSize","UmbId"],"mappings":"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"}