{"version":3,"file":"property-editor-ui-tiptap.element-BeGcngvm.js","sources":["../../../src/packages/tiptap/property-editors/tiptap/property-editor-ui-tiptap.element.ts"],"sourcesContent":["import type { UmbInputTiptapElement } from '../../components/input-tiptap/input-tiptap.element.js';\r\nimport { UmbPropertyEditorUiRteElementBase } from '@umbraco-cms/backoffice/rte';\r\nimport { css, customElement, html, type PropertyValueMap } from '@umbraco-cms/backoffice/external/lit';\r\n\r\nimport '../../components/input-tiptap/input-tiptap.element.js';\r\n\r\n/**\r\n * @element umb-property-editor-ui-tiptap\r\n */\r\n@customElement('umb-property-editor-ui-tiptap')\r\nexport class UmbPropertyEditorUiTiptapElement extends UmbPropertyEditorUiRteElementBase {\r\n\tprotected override firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\r\n\t\tthis.addFormControlElement(this.shadowRoot!.querySelector('umb-input-tiptap') as UmbInputTiptapElement);\r\n\t}\r\n\r\n\t#onChange(event: CustomEvent & { target: UmbInputTiptapElement }) {\r\n\t\tconst tipTapElement = event.target;\r\n\t\tconst markup = tipTapElement.value;\r\n\r\n\t\t// If we don't get any markup clear the property editor value.\r\n\t\tif (tipTapElement.isEmpty()) {\r\n\t\t\tthis.value = undefined;\r\n\t\t\tthis._fireChangeEvent();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remove unused Blocks of Blocks Layout. Leaving only the Blocks that are present in Markup.\r\n\t\tconst usedContentKeys: string[] = [];\r\n\r\n\t\t// Regex matching all block elements in the markup, and extracting the content key. It's the same as the one used on the backend.\r\n\t\tconst regex = new RegExp(\r\n\t\t\t/<umb-rte-block(?:-inline)?(?: class=\"(?:.[^\"]*)\")? data-content-key=\"(?<key>.[^\"]*)\">(?:<!--Umbraco-Block-->)?<\\/umb-rte-block(?:-inline)?>/gi,\r\n\t\t);\r\n\t\tlet blockElement: RegExpExecArray | null;\r\n\t\twhile ((blockElement = regex.exec(markup)) !== null) {\r\n\t\t\tif (blockElement.groups?.key) {\r\n\t\t\t\tusedContentKeys.push(blockElement.groups.key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.value) {\r\n\t\t\tthis.value = {\r\n\t\t\t\t...this.value,\r\n\t\t\t\tmarkup: markup,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tthis.value = {\r\n\t\t\t\tmarkup: markup,\r\n\t\t\t\tblocks: {\r\n\t\t\t\t\tlayout: {},\r\n\t\t\t\t\tcontentData: [],\r\n\t\t\t\t\tsettingsData: [],\r\n\t\t\t\t\texpose: [],\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// lets run this one after we set the value, to make sure we don't reset the value.\r\n\t\tthis._filterUnusedBlocks(usedContentKeys);\r\n\r\n\t\tthis._fireChangeEvent();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<umb-input-tiptap\r\n\t\t\t\t.configuration=${this._config}\r\n\t\t\t\t.requiredMessage=${this.mandatoryMessage}\r\n\t\t\t\t.value=${this._markup}\r\n\t\t\t\t?readonly=${this.readonly}\r\n\t\t\t\t?required=${this.mandatory}\r\n\t\t\t\t@change=${this.#onChange}></umb-input-tiptap>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = css`\r\n\t\t:host(:invalid:not([pristine])) umb-input-tiptap {\r\n\t\t\t--umb-tiptap-edge-border-color: var(--uui-color-invalid);\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport { UmbPropertyEditorUiTiptapElement as element };\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-tiptap': UmbPropertyEditorUiTiptapElement;\r\n\t}\r\n}\r\n"],"names":["_UmbPropertyEditorUiTiptapElement_instances","onChange_fn","UmbPropertyEditorUiTiptapElement","UmbPropertyEditorUiRteElementBase","__privateAdd","_changedProperties","html","__privateMethod","event","tipTapElement","markup","usedContentKeys","regex","blockElement","css","__decorateClass","customElement"],"mappings":";;;;;;;;;8OAAAA,GAAAC;AAUa,IAAAC,IAAN,cAA+CC,EAAkC;AAAA,EAAjF,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAJ,CAAA;AAAA,EAAA;AAAA,EACa,aAAaK,GAA6E;AAC5G,UAAM,aAAaA,CAAkB,GAErC,KAAK,sBAAsB,KAAK,WAAY,cAAc,kBAAkB,CAA0B;AAAA,EAAA;AAAA,EAmD9F,SAAS;AACV,WAAAC;AAAA;AAAA,qBAEY,KAAK,OAAO;AAAA,uBACV,KAAK,gBAAgB;AAAA,aAC/B,KAAK,OAAO;AAAA,gBACT,KAAK,QAAQ;AAAA,gBACb,KAAK,SAAS;AAAA,cAChBC,QAAKP,GAASC,CAAA,CAAA;AAAA;AAAA,EAAA;AAS5B;AAxEOD,IAAA,oBAAA,QAAA;AAONC,IAAS,SAACO,GAAwD;AACjE,QAAMC,IAAgBD,EAAM,QACtBE,IAASD,EAAc;AAGzB,MAAAA,EAAc,WAAW;AAC5B,SAAK,QAAQ,QACb,KAAK,iBAAiB;AACtB;AAAA,EAAA;AAID,QAAME,IAA4B,CAAC,GAG7BC,IAAQ,IAAI;AAAA,IACjB;AAAA,EACD;AACI,MAAAC;AACJ,UAAQA,IAAeD,EAAM,KAAKF,CAAM,OAAO;AAC1C,IAAAG,EAAa,QAAQ,OACRF,EAAA,KAAKE,EAAa,OAAO,GAAG;AAI9C,EAAI,KAAK,QACR,KAAK,QAAQ;AAAA,IACZ,GAAG,KAAK;AAAA,IACR,QAAAH;AAAA,EACD,IAEA,KAAK,QAAQ;AAAA,IACZ,QAAAA;AAAA,IACA,QAAQ;AAAA,MACP,QAAQ,CAAC;AAAA,MACT,aAAa,CAAC;AAAA,MACd,cAAc,CAAC;AAAA,MACf,QAAQ,CAAA;AAAA,IAAC;AAAA,EAEX,GAID,KAAK,oBAAoBC,CAAe,GAExC,KAAK,iBAAiB;AACvB;AArDYT,EAmEI,SAASY;AAAA;AAAA;AAAA;AAAA;AAnEbZ,IAANa,EAAA;AAAA,EADNC,EAAc,+BAA+B;AAAA,GACjCd,CAAA;"}