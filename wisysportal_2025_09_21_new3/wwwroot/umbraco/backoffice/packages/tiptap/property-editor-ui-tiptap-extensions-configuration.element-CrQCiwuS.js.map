{"version":3,"file":"property-editor-ui-tiptap-extensions-configuration.element-CrQCiwuS.js","sources":["../../../src/packages/tiptap/property-editors/tiptap/components/property-editor-ui-tiptap-extensions-configuration.element.ts"],"sourcesContent":["import {\r\n\tcustomElement,\r\n\tcss,\r\n\thtml,\r\n\tifDefined,\r\n\tnothing,\r\n\tproperty,\r\n\tstate,\r\n\trepeat,\r\n\twhen,\r\n} from '@umbraco-cms/backoffice/external/lit';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type { PropertyValueMap } from '@umbraco-cms/backoffice/external/lit';\r\nimport type {\r\n\tUmbPropertyEditorConfigCollection,\r\n\tUmbPropertyEditorUiElement,\r\n} from '@umbraco-cms/backoffice/property-editor';\r\nimport { UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\n\r\ntype UmbTiptapExtension = {\r\n\talias: string;\r\n\tlabel: string;\r\n\ticon?: string;\r\n\tgroup?: string;\r\n\tdescription?: string;\r\n};\r\n\r\ntype UmbTiptapExtensionGroupItem = UmbTiptapExtension & {\r\n\tselected: boolean;\r\n};\r\n\r\ntype UmbTiptapExtensionGroup = {\r\n\tgroup: string;\r\n\textensions: Array<UmbTiptapExtensionGroupItem>;\r\n};\r\n\r\nconst TIPTAP_CORE_EXTENSION_ALIAS = 'Umb.Tiptap.RichTextEssentials';\r\nconst TIPTAP_BLOCK_EXTENSION_ALIAS = 'Umb.Tiptap.Block';\r\n\r\n@customElement('umb-property-editor-ui-tiptap-extensions-configuration')\r\nexport class UmbPropertyEditorUiTiptapExtensionsConfigurationElement\r\n\textends UmbLitElement\r\n\timplements UmbPropertyEditorUiElement\r\n{\r\n\t#disabledExtensions = new Set<string>([TIPTAP_CORE_EXTENSION_ALIAS]);\r\n\r\n\t@property({ attribute: false })\r\n\tvalue?: Array<string> = [TIPTAP_CORE_EXTENSION_ALIAS];\r\n\r\n\t@property({ attribute: false })\r\n\tconfig?: UmbPropertyEditorConfigCollection;\r\n\r\n\t@state()\r\n\tprivate _extensions: Array<UmbTiptapExtension> = [];\r\n\r\n\t@state()\r\n\tprivate _groups: Array<UmbTiptapExtensionGroup> = [];\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, async (dataset) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tawait dataset?.propertyValueByAlias<Array<unknown>>('blocks'),\r\n\t\t\t\t(blocks) => {\r\n\t\t\t\t\tconst tmpValue = this.value ? [...this.value] : [];\r\n\r\n\t\t\t\t\t// When blocks are configured, the block extension can be enabled;\r\n\t\t\t\t\t// otherwise, the block extension must be disabled.\r\n\t\t\t\t\tif (blocks?.length) {\r\n\t\t\t\t\t\t// Check if the block extension is already enabled, if not, add it.\r\n\t\t\t\t\t\tif (!tmpValue.includes(TIPTAP_BLOCK_EXTENSION_ALIAS)) {\r\n\t\t\t\t\t\t\ttmpValue.push(TIPTAP_BLOCK_EXTENSION_ALIAS);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.#disabledExtensions.delete(TIPTAP_BLOCK_EXTENSION_ALIAS);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Check if the block extension is enabled, if so, remove it.\r\n\t\t\t\t\t\tconst idx = tmpValue.indexOf(TIPTAP_BLOCK_EXTENSION_ALIAS) ?? -1;\r\n\t\t\t\t\t\tif (idx >= 0) {\r\n\t\t\t\t\t\t\ttmpValue.splice(idx, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.#disabledExtensions.add(TIPTAP_BLOCK_EXTENSION_ALIAS);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!this.value || !this.#isArrayEqualTo(tmpValue, this.value)) {\r\n\t\t\t\t\t\tthis.#setValue(tmpValue);\r\n\t\t\t\t\t\tthis.#syncViewModel();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.requestUpdate('_extensions');\r\n\t\t\t\t},\r\n\t\t\t\t'_observeBlocks',\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tprotected override async firstUpdated(_changedProperties: PropertyValueMap<unknown>) {\r\n\t\tsuper.firstUpdated(_changedProperties);\r\n\r\n\t\tthis.observe(umbExtensionsRegistry.byType('tiptapExtension'), (extensions) => {\r\n\t\t\tthis._extensions = extensions\r\n\t\t\t\t.sort((a, b) => a.alias.localeCompare(b.alias))\r\n\t\t\t\t.map((ext) => ({\r\n\t\t\t\t\talias: ext.alias,\r\n\t\t\t\t\tlabel: ext.meta.label,\r\n\t\t\t\t\ticon: ext.meta.icon,\r\n\t\t\t\t\tgroup: ext.meta.group,\r\n\t\t\t\t\tdescription: ext.meta.description,\r\n\t\t\t\t}));\r\n\r\n\t\t\tif (!this.value) {\r\n\t\t\t\t// The default value is all extensions enabled\r\n\t\t\t\tthis.#setValue(this._extensions.map((ext) => ext.alias));\r\n\t\t\t}\r\n\r\n\t\t\tthis.#syncViewModel();\r\n\t\t});\r\n\t}\r\n\r\n\t#isArrayEqualTo(a: Array<string>, b: Array<string>) {\r\n\t\treturn a.length === b.length && a.every((item) => b.includes(item)) && b.every((item) => a.includes(item));\r\n\t}\r\n\r\n\t#onClick(item: UmbTiptapExtensionGroupItem) {\r\n\t\titem.selected = !item.selected;\r\n\r\n\t\tconst tmpValue = item.selected\r\n\t\t\t? [...(this.value ?? []), item.alias]\r\n\t\t\t: (this.value ?? []).filter((alias) => alias !== item.alias);\r\n\r\n\t\tthis.#setValue(tmpValue);\r\n\t}\r\n\r\n\t#setValue(value: Array<string>) {\r\n\t\tthis.value = value;\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\t#syncViewModel() {\r\n\t\tconst items: Array<UmbTiptapExtensionGroupItem> = this._extensions.map((extension) => ({\r\n\t\t\t...extension,\r\n\t\t\tselected: this.value!.includes(extension.alias) || extension.alias === TIPTAP_CORE_EXTENSION_ALIAS,\r\n\t\t}));\r\n\r\n\t\tconst uncategorizedLabel = this.localize.term('tiptap_extGroup_unknown');\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-expect-error\r\n\t\tconst grouped = Object.groupBy(items, (item: UmbTiptapExtensionGroupItem) => item.group || uncategorizedLabel);\r\n\r\n\t\tthis._groups = Object.keys(grouped)\r\n\t\t\t.sort((a, b) => a.localeCompare(b))\r\n\t\t\t.map((key) => ({ group: key, extensions: grouped[key] }));\r\n\t}\r\n\r\n\toverride render() {\r\n\t\tif (!this._groups.length) return nothing;\r\n\t\treturn html`\r\n\t\t\t${repeat(\r\n\t\t\t\tthis._groups,\r\n\t\t\t\t(group) => html`\r\n\t\t\t\t\t<div class=\"group\">\r\n\t\t\t\t\t\t<uui-label>${this.localize.string(group.group)}</uui-label>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t${repeat(\r\n\t\t\t\t\t\t\t\tgroup.extensions,\r\n\t\t\t\t\t\t\t\t(item) => html`\r\n\t\t\t\t\t\t\t\t\t<li title=${ifDefined(item.description)}>\r\n\t\t\t\t\t\t\t\t\t\t<uui-checkbox\r\n\t\t\t\t\t\t\t\t\t\t\tlabel=${this.localize.string(item.label)}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue=${item.alias}\r\n\t\t\t\t\t\t\t\t\t\t\t?checked=${item.selected}\r\n\t\t\t\t\t\t\t\t\t\t\t?disabled=${this.#disabledExtensions.has(item.alias)}\r\n\t\t\t\t\t\t\t\t\t\t\t@change=${() => this.#onClick(item)}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"inner\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t${when(item.icon, () => html`<umb-icon .name=${item.icon}></umb-icon>`)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span>${this.localize.string(item.label)}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</uui-checkbox>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t`,\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t`,\r\n\t\t\t)}\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override readonly styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-wrap: wrap;\r\n\t\t\t\tgap: 1rem;\r\n\t\t\t}\r\n\r\n\t\t\t.group {\r\n\t\t\t\twidth: calc((100% - 2rem) / 3);\r\n\r\n\t\t\t\tul {\r\n\t\t\t\t\tlist-style: none;\r\n\t\t\t\t\tpadding: 0;\r\n\t\t\t\t\tmargin: 1rem 0 0;\r\n\r\n\t\t\t\t\t.inner {\r\n\t\t\t\t\t\tdisplay: flex;\r\n\t\t\t\t\t\tflex-direction: row;\r\n\t\t\t\t\t\tgap: 0.5rem;\r\n\r\n\t\t\t\t\t\tumb-icon {\r\n\t\t\t\t\t\t\tfont-size: 1.2rem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport { UmbPropertyEditorUiTiptapExtensionsConfigurationElement as element };\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-property-editor-ui-tiptap-extensions-configuration': UmbPropertyEditorUiTiptapExtensionsConfigurationElement;\r\n\t}\r\n}\r\n"],"names":["_disabledExtensions","_UmbPropertyEditorUiTiptapExtensionsConfigurationElement_instances","isArrayEqualTo_fn","onClick_fn","setValue_fn","syncViewModel_fn","TIPTAP_CORE_EXTENSION_ALIAS","TIPTAP_BLOCK_EXTENSION_ALIAS","UmbPropertyEditorUiTiptapExtensionsConfigurationElement","UmbLitElement","__privateAdd","UMB_PROPERTY_DATASET_CONTEXT","dataset","blocks","tmpValue","__privateGet","idx","__privateMethod","_changedProperties","umbExtensionsRegistry","extensions","a","b","ext","html","repeat","group","item","ifDefined","when","nothing","alias","value","UmbChangeEvent","items","extension","uncategorizedLabel","grouped","key","css","__decorateClass","property","state","customElement"],"mappings":"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"}