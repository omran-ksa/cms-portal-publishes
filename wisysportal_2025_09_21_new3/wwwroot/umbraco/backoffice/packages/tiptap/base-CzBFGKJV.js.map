{"version":3,"file":"base-CzBFGKJV.js","sources":["../../../src/packages/tiptap/extensions/base.ts"],"sourcesContent":["import type {\r\n\tManifestTiptapExtension,\r\n\tManifestTiptapToolbarExtension,\r\n\tUmbTiptapExtensionApi,\r\n\tUmbTiptapExtensionArgs,\r\n\tUmbTiptapToolbarElementApi,\r\n} from './types.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { CSSResultGroup } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { Editor, Extension, Mark, Node } from '@umbraco-cms/backoffice/external/tiptap';\r\nimport type { UmbPropertyEditorConfigCollection } from '@umbraco-cms/backoffice/property-editor';\r\n\r\nexport abstract class UmbTiptapExtensionApiBase extends UmbControllerBase implements UmbTiptapExtensionApi {\r\n\t/**\r\n\t * The manifest for the extension.\r\n\t */\r\n\tmanifest?: ManifestTiptapExtension;\r\n\r\n\t/**\r\n\t * The editor instance.\r\n\t */\r\n\tprotected _editor?: Editor;\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tsetEditor(editor: Editor): void {\r\n\t\tthis._editor = editor;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tgetStyles(): CSSResultGroup | null | undefined {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tabstract getTiptapExtensions(args?: UmbTiptapExtensionArgs): Array<Extension | Mark | Node>;\r\n}\r\n\r\nexport abstract class UmbTiptapToolbarElementApiBase extends UmbControllerBase implements UmbTiptapToolbarElementApi {\r\n\t#enabledExtensions?: Array<string>;\r\n\r\n\t/**\r\n\t * The manifest for the extension.\r\n\t */\r\n\tmanifest?: ManifestTiptapToolbarExtension;\r\n\r\n\t/**\r\n\t * The data type configuration for the property editor that the editor is used for.\r\n\t */\r\n\tconfiguration?: UmbPropertyEditorConfigCollection;\r\n\r\n\t/**\r\n\t * A method to execute the toolbar element action.\r\n\t * @see {ManifestTiptapToolbarExtension}\r\n\t * @param {Editor} editor The editor instance.\r\n\t */\r\n\tpublic abstract execute(editor?: Editor): void;\r\n\r\n\t/**\r\n\t * Informs the toolbar element if it is active or not. It uses the manifest meta alias to check if the toolbar element is active.\r\n\t * @see {ManifestTiptapToolbarExtension}\r\n\t * @param {Editor} editor The editor instance.\r\n\t * @returns {boolean} Returns true if the toolbar element is active.\r\n\t */\r\n\tpublic isActive(editor?: Editor): boolean {\r\n\t\treturn editor && this.manifest?.meta.alias ? editor?.isActive(this.manifest.meta.alias) === true : false;\r\n\t}\r\n\r\n\t/**\r\n\t * Informs the toolbar element if it is disabled or not.\r\n\t * @see {ManifestTiptapToolbarExtension}\r\n\t * @param {Editor} editor The editor instance.\r\n\t * @returns {boolean} Returns true if the toolbar element is disabled.\r\n\t */\r\n\tisDisabled(editor?: Editor): boolean {\r\n\t\tif (!editor) return true;\r\n\t\tif (!this.#enabledExtensions) {\r\n\t\t\tthis.#enabledExtensions = this.configuration?.getValueByAlias<string[]>('extensions') ?? [];\r\n\t\t}\r\n\t\treturn this.manifest?.forExtensions?.every((ext) => this.#enabledExtensions?.includes(ext)) === false;\r\n\t}\r\n}\r\n"],"names":["UmbTiptapExtensionApiBase","UmbControllerBase","editor","UmbTiptapToolbarElementApiBase","#enabledExtensions","ext"],"mappings":";AAYO,MAAeA,UAAkCC,EAAmD;AAAA;AAAA;AAAA;AAAA,EAc1G,UAAUC,GAAsB;AAC/B,SAAK,UAAUA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,YAA+C;AACvC,WAAA;AAAA,EAAA;AAOT;AAEO,MAAeC,UAAuCF,EAAwD;AAAA,EACpHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBO,SAASF,GAA0B;AACzC,WAAOA,KAAU,KAAK,UAAU,KAAK,QAAQA,GAAQ,SAAS,KAAK,SAAS,KAAK,KAAK,MAAM,KAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASpG,WAAWA,GAA0B;AAChC,WAACA,KACA,KAAKE,OACT,KAAKA,KAAqB,KAAK,eAAe,gBAA0B,YAAY,KAAK,CAAC,IAEpF,KAAK,UAAU,eAAe,MAAM,CAACC,MAAQ,KAAKD,IAAoB,SAASC,CAAG,CAAC,MAAM,MAJ5E;AAAA,EAI4E;AAElG;"}