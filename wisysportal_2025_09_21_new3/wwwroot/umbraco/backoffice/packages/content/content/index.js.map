{"version":3,"file":"index.js","sources":["../../../../src/packages/content/content/conditions/has-properties/constants.ts","../../../../src/packages/content/content/constants.ts","../../../../src/packages/content/content/controller/merge-content-variant-data.controller.ts","../../../../src/packages/content/content/global-components/content-workspace-property.element.ts","../../../../src/packages/content/content/manager/element-data-manager.ts","../../../../src/packages/content/content/manager/content-data-manager.ts","../../../../src/packages/content/content/property-dataset-context/content-property-dataset.context-token.ts","../../../../src/packages/content/content/property-dataset-context/element-property-dataset.context.ts","../../../../src/packages/content/content/property-dataset-context/content-property-dataset.context.ts","../../../../src/packages/content/content/workspace/content-detail-validation-path-translator.ts","../../../../src/packages/content/content/workspace/content-detail-workspace-base.ts"],"sourcesContent":["export const UMB_CONTENT_HAS_PROPERTIES_WORKSPACE_CONDITION = 'Umb.Condition.Workspace.ContentHasProperties';\r\n","export const UMB_CONTENT_SECTION_ALIAS = 'Umb.Section.Content';\r\nexport * from './collection/constants.js';\r\nexport * from './conditions/constants.js';\r\nexport * from './tree/constants.js';\r\nexport * from './workspace/constants.js';\r\n","import type { UmbContentLikeDetailModel, UmbPotentialContentValueModel } from '../types.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { createExtensionApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UmbVariantId, type UmbVariantDataModel } from '@umbraco-cms/backoffice/variant';\r\n\r\n/**\r\n * @function defaultCompareVariantMethod\r\n * @param {UmbVariantDataModel} a - the first variant to compare.\r\n * @param {UmbVariantDataModel} b - the second variant to compare.\r\n * @returns {boolean} - true if the two models are equally unique.\r\n */\r\nfunction defaultCompareVariantMethod(a: UmbVariantDataModel, b: UmbVariantDataModel) {\r\n\treturn a.culture === b.culture && a.segment === b.segment;\r\n}\r\n\r\nexport class UmbMergeContentVariantDataController extends UmbControllerBase {\r\n\t/**\r\n\t * Merges content variant data based on selected variants and variants to store.\r\n\t * @param {UmbContentLikeDetailModel | undefined} persistedData - The persisted content variant data.\r\n\t * @param {UmbContentLikeDetailModel} currentData - The current content variant data.\r\n\t * @param {Array<UmbVariantId>} selectedVariants - The selected variants.\r\n\t * @param {Array<UmbVariantId>} variantsToStore - The variants to store, we sometimes have additional variants that we like to process. This is typically the invariant variant, which we do not want to have as part of the variants data therefore a difference.\r\n\t * @returns {Promise<UmbContentLikeDetailModel>} - A promise that resolves to the merged content variant data.\r\n\t */\r\n\tasync process<ModelType extends UmbContentLikeDetailModel>(\r\n\t\tpersistedData: ModelType | undefined,\r\n\t\tcurrentData: ModelType,\r\n\t\tselectedVariants: Array<UmbVariantId>,\r\n\t\tvariantsToStore: Array<UmbVariantId>,\r\n\t): Promise<ModelType> {\r\n\t\t// Combine data and persisted data depending on the selectedVariants. Always use the invariant values from the data.\r\n\t\t// loops over each entry in values, determine wether the value should be from the data or the persisted data, depending on wether its a selectedVariant or an invariant value.\r\n\t\t// loops over each entry in variants, determine wether the variant should be from the data or the persisted data, depending on the selectedVariants.\r\n\t\tconst result = { ...currentData };\r\n\t\tresult.values = await this.#processValues<ModelType['values'][0]>(\r\n\t\t\tpersistedData?.values,\r\n\t\t\tcurrentData.values,\r\n\t\t\tvariantsToStore,\r\n\t\t);\r\n\r\n\t\tif (currentData.variants) {\r\n\t\t\t// Notice for variants we do not want to include all the variants that we are processing. but just the once selected for the process. (Not include invariant if we are in a variant document) [NL]\r\n\t\t\tresult.variants = this.#processVariants(\r\n\t\t\t\tpersistedData?.variants,\r\n\t\t\t\tcurrentData.variants,\r\n\t\t\t\tselectedVariants,\r\n\t\t\t\tdefaultCompareVariantMethod,\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.destroy();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Builds and saves values based on selected variants and variants to store.\r\n\t * @param {Array<UmbPotentialContentValueModel> | undefined} persistedValues - The persisted values.\r\n\t * @param {Array<UmbPotentialContentValueModel> | undefined} draftValues - The draft values.\r\n\t * @param {Array<UmbVariantId>}variantsToStore - The variants to store.\r\n\t * @returns {Promise<Array<UmbPotentialContentValueModel>>} - A promise that resolves to the saved values.\r\n\t */\r\n\tasync #processValues<T extends UmbPotentialContentValueModel = UmbPotentialContentValueModel>(\r\n\t\tpersistedValues: Array<T> | undefined,\r\n\t\tdraftValues: Array<T> | undefined,\r\n\t\tvariantsToStore: Array<UmbVariantId>,\r\n\t): Promise<Array<T>> {\r\n\t\t// Make array of unique values, based on persistedValues and draftValues. Both alias, culture and segment has to be taken into account. [NL]\r\n\r\n\t\tconst uniqueValues = [...(persistedValues ?? []), ...(draftValues ?? [])].filter(\r\n\t\t\t(n, i, self) =>\r\n\t\t\t\ti === self.findIndex((v) => v.alias === n.alias && v.culture === n.culture && v.segment === n.segment),\r\n\t\t);\r\n\r\n\t\t// Map unique values to their respective draft values.\r\n\t\treturn (\r\n\t\t\tawait Promise.all(\r\n\t\t\t\tuniqueValues.map((value) => {\r\n\t\t\t\t\tconst persistedValue = persistedValues?.find(\r\n\t\t\t\t\t\t(x) => x.alias === value.alias && x.culture === value.culture && x.segment === value.segment,\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Should this value be saved?\r\n\t\t\t\t\tif (variantsToStore.some((x) => x.equal(UmbVariantId.CreateFromPartial(value)))) {\r\n\t\t\t\t\t\tconst draftValue = draftValues?.find(\r\n\t\t\t\t\t\t\t(x) => x.alias === value.alias && x.culture === value.culture && x.segment === value.segment,\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn this.#processValue(persistedValue, draftValue, variantsToStore);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// TODO: Check if this promise is needed: [NL]\r\n\t\t\t\t\t\treturn Promise.resolve(persistedValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t).filter((x) => x !== undefined) as Array<T>;\r\n\t}\r\n\r\n\t/**\r\n\t * Builds and saves a value based on selected variants and variants to store.\r\n\t * @param {UmbPotentialContentValueModel | undefined} persistedValue - The persisted value.\r\n\t * @param {UmbPotentialContentValueModel | undefined} draftValue - The draft value.\r\n\t * @param {Array<UmbVariantId>} variantsToStore - The variants to store.\r\n\t * @returns {Promise<UmbPotentialContentValueModel | undefined>} A promise that resolves to the saved value.\r\n\t */\r\n\tasync #processValue(\r\n\t\tpersistedValue: UmbPotentialContentValueModel | undefined,\r\n\t\tdraftValue: UmbPotentialContentValueModel | undefined,\r\n\t\tvariantsToStore: Array<UmbVariantId>,\r\n\t): Promise<UmbPotentialContentValueModel | undefined> {\r\n\t\tconst editorAlias = draftValue?.editorAlias ?? persistedValue?.editorAlias;\r\n\t\tif (!editorAlias) {\r\n\t\t\tconsole.error(`Editor alias not found for ${editorAlias}`, draftValue, persistedValue);\r\n\t\t\treturn draftValue;\r\n\t\t}\r\n\t\tif (!draftValue) {\r\n\t\t\t// If the draft value does not exists then no need to process.\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\t// Find the resolver for this editor alias:\r\n\t\tconst manifest = umbExtensionsRegistry.getByTypeAndFilter(\r\n\t\t\t'propertyValueResolver',\r\n\t\t\t// TODO: Remove depcrated filter in v.17 [NL]\r\n\t\t\t(x) => x.forEditorAlias === editorAlias || x.meta?.editorAlias === editorAlias,\r\n\t\t)[0];\r\n\r\n\t\tif (!manifest) {\r\n\t\t\t// No resolver found, then we can continue using the draftValue as is.\r\n\t\t\treturn draftValue;\r\n\t\t}\r\n\r\n\t\tconst api = await createExtensionApi(this, manifest);\r\n\t\tif (!api) {\r\n\t\t\t// If api is not to be found, then we can continue using the draftValue as is.\r\n\t\t\treturn draftValue;\r\n\t\t}\r\n\t\t(api as any).manifest = manifest;\r\n\r\n\t\tlet newValue = draftValue;\r\n\r\n\t\tif (api.processValues) {\r\n\t\t\t// The a property values resolver resolves one value, we need to gather the persisted inner values first, and store them here:\r\n\t\t\tconst persistedValuesHolder: Array<Array<UmbPotentialContentValueModel>> = [];\r\n\r\n\t\t\tif (persistedValue) {\r\n\t\t\t\tawait api.processValues(persistedValue, async (values) => {\r\n\t\t\t\t\tpersistedValuesHolder.push(values as unknown as Array<UmbPotentialContentValueModel>);\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tlet valuesIndex = 0;\r\n\t\t\tnewValue =\r\n\t\t\t\t(await api.processValues(newValue, async (values) => {\r\n\t\t\t\t\t// got some values (content and/or settings):\r\n\t\t\t\t\t// but how to get the persisted and the draft of this.....\r\n\t\t\t\t\tconst persistedValues = persistedValuesHolder[valuesIndex++];\r\n\r\n\t\t\t\t\treturn await this.#processValues(persistedValues, values, variantsToStore);\r\n\t\t\t\t})) ?? newValue;\r\n\t\t}\r\n\r\n\t\tif (api.processVariants) {\r\n\t\t\t// The a property values resolver resolves one value, we need to gather the persisted inner values first, and store them here:\r\n\t\t\tconst persistedVariantsHolder: Array<Array<UmbVariantDataModel>> = [];\r\n\r\n\t\t\tif (persistedValue) {\r\n\t\t\t\tawait api.processVariants(persistedValue, async (values) => {\r\n\t\t\t\t\tpersistedVariantsHolder.push(values as unknown as Array<UmbVariantDataModel>);\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tlet valuesIndex = 0;\r\n\t\t\tnewValue =\r\n\t\t\t\t(await api.processVariants(newValue, async (values) => {\r\n\t\t\t\t\t// got some values (content and/or settings):\r\n\t\t\t\t\t// but how to get the persisted and the draft of this.....\r\n\t\t\t\t\tconst persistedVariants = persistedVariantsHolder[valuesIndex++];\r\n\r\n\t\t\t\t\treturn await this.#processVariants(\r\n\t\t\t\t\t\tpersistedVariants,\r\n\t\t\t\t\t\tvalues,\r\n\t\t\t\t\t\tvariantsToStore,\r\n\t\t\t\t\t\tapi.compareVariants ?? defaultCompareVariantMethod,\r\n\t\t\t\t\t);\r\n\t\t\t\t})) ?? newValue;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tif (api.ensureVariants) {\r\n\t\t\t// The a property values resolver resolves one value, we need to gather the persisted inner values first, and store them here:\r\n\t\t\t//const persistedVariants = newValue ? ((await api.readVariants(newValue)) ?? []) : [];\r\n\r\n\t\t\t// TODO: An expose for a Block should be invariant if the Block Content Element Type is not vary by culture.\r\n\t\t\t// TODO: And expose determination should look for invariant expose in this case.\r\n\t\t\tconst args = {\r\n\t\t\t\tselectedVariants,\r\n\t\t\t};\r\n\t\t\tnewValue = await api.ensureVariants(newValue, args);\r\n\t\t}\r\n\t\t\t*/\r\n\r\n\t\t// the api did not provide a value processor, so we will return the draftValue:\r\n\t\treturn newValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Construct variants property of model.\r\n\t * @param {Array<UmbVariantDataModel> | undefined} persistedVariants - The persisted value.\r\n\t * @param {Array<UmbVariantDataModel>} draftVariants - The draft value.\r\n\t * @param {Array<UmbVariantId>} variantsToStore - The variants to be stored.\r\n\t * @param {(UmbVariantDataModel, UmbVariantDataModel) => boolean} compare - The compare method, which compares the unique properties of the variants.\r\n\t * @returns {UmbVariantDataModel[]} A new array of variants.\r\n\t */\r\n\t#processVariants<VariantModel extends UmbVariantDataModel = UmbVariantDataModel>(\r\n\t\tpersistedVariants: Array<VariantModel> | undefined,\r\n\t\tdraftVariants: Array<VariantModel>,\r\n\t\tvariantsToStore: Array<UmbVariantId>,\r\n\t\tcompare: (a: VariantModel, b: VariantModel) => boolean,\r\n\t): Array<VariantModel> {\r\n\t\tconst uniqueVariants = [...(persistedVariants ?? []), ...(draftVariants ?? [])].filter(\r\n\t\t\t(n, i, self) => i === self.findIndex((v) => compare(v, n)),\r\n\t\t);\r\n\r\n\t\treturn uniqueVariants\r\n\t\t\t.map((value) => {\r\n\t\t\t\tconst persistedVariant = persistedVariants?.find((x) => compare(x, value));\r\n\r\n\t\t\t\t// Should this value be saved?\r\n\t\t\t\tif (variantsToStore.some((x) => x.compare(value))) {\r\n\t\t\t\t\tconst draftVariant = draftVariants?.find((x) => compare(x, value));\r\n\r\n\t\t\t\t\treturn draftVariant;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// TODO: Check if this promise is needed: [NL]\r\n\t\t\t\t\treturn persistedVariant;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.filter((x) => x !== undefined) as Array<VariantModel>;\r\n\r\n\t\t/*\r\n\t\treturn draftVariants\r\n\t\t\t.map((variant) => {\r\n\t\t\t\t// Should this variant be saved?\r\n\t\t\t\tif (variantsToStore.some((x) => x.compare(variant))) {\r\n\t\t\t\t\treturn variant;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If not, then we will tru to find the variant in the persisted data and use that instead.\r\n\t\t\t\t\treturn persistedVariants?.find((x) => x.culture === variant.culture && x.segment === variant.segment);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.filter((x) => x !== undefined) as Array<VariantModel>;\r\n\t\t\t*/\r\n\t}\r\n}\r\n","import { UMB_CONTENT_WORKSPACE_CONTEXT } from '../constants.js';\r\nimport { html, customElement, property, state, nothing } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UmbPropertyTypeModel } from '@umbraco-cms/backoffice/content-type';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport { UmbDataPathPropertyValueQuery } from '@umbraco-cms/backoffice/validation';\r\n\r\n@customElement('umb-content-workspace-property')\r\nexport class UmbContentWorkspacePropertyElement extends UmbLitElement {\r\n\tprivate _alias?: string | undefined;\r\n\r\n\t@property({ type: String, attribute: 'alias' })\r\n\tpublic get alias(): string | undefined {\r\n\t\treturn this._alias;\r\n\t}\r\n\tpublic set alias(value: string | undefined) {\r\n\t\tthis._alias = value;\r\n\t\tthis.#observePropertyType();\r\n\t}\r\n\r\n\t@state()\r\n\t_datasetVariantId?: UmbVariantId;\r\n\r\n\t@state()\r\n\t_dataPath?: string;\r\n\r\n\t@state()\r\n\t_viewable?: boolean;\r\n\r\n\t@state()\r\n\t_writeable?: boolean;\r\n\r\n\t@state()\r\n\t_workspaceContext?: typeof UMB_CONTENT_WORKSPACE_CONTEXT.TYPE;\r\n\r\n\t@state()\r\n\t_propertyType?: UmbPropertyTypeModel;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\t// The Property Dataset is local to the active variant, we use this to retrieve the variant we like to gather the value from.\r\n\t\tthis.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, (datasetContext) => {\r\n\t\t\tthis._datasetVariantId = datasetContext?.getVariantId();\r\n\t\t});\r\n\r\n\t\t// The Content Workspace Context is used to retrieve the property type we like to observe.\r\n\t\t// This gives us the configuration from the property type as part of the data type.\r\n\t\tthis.consumeContext(UMB_CONTENT_WORKSPACE_CONTEXT, async (workspaceContext) => {\r\n\t\t\tthis._workspaceContext = workspaceContext;\r\n\t\t\tthis.#observePropertyType();\r\n\t\t});\r\n\t}\r\n\r\n\tasync #observePropertyType() {\r\n\t\tif (!this._alias || !this._workspaceContext) return;\r\n\r\n\t\tthis.observe(await this._workspaceContext?.structure.propertyStructureByAlias(this._alias), (propertyType) => {\r\n\t\t\tthis._propertyType = propertyType;\r\n\t\t\tthis.#checkViewGuard();\r\n\t\t});\r\n\t}\r\n\r\n\t#checkViewGuard() {\r\n\t\tif (!this._workspaceContext || !this._propertyType || !this._datasetVariantId) return;\r\n\r\n\t\tconst propertyVariantId = new UmbVariantId(\r\n\t\t\tthis._propertyType.variesByCulture ? this._datasetVariantId.culture : null,\r\n\t\t\tthis._propertyType.variesBySegment ? this._datasetVariantId.segment : null,\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis._workspaceContext.propertyViewGuard.isPermittedForVariantAndProperty(\r\n\t\t\t\tpropertyVariantId,\r\n\t\t\t\tthis._propertyType,\r\n\t\t\t\tthis._datasetVariantId,\r\n\t\t\t),\r\n\t\t\t(permitted) => {\r\n\t\t\t\tthis._viewable = permitted;\r\n\t\t\t},\r\n\t\t\t`umbObservePropertyViewGuard`,\r\n\t\t);\r\n\t}\r\n\r\n\toverride willUpdate(changedProperties: Map<string, any>) {\r\n\t\tsuper.willUpdate(changedProperties);\r\n\t\tif (\r\n\t\t\tchangedProperties.has('_propertyType') ||\r\n\t\t\tchangedProperties.has('_datasetVariantId') ||\r\n\t\t\tchangedProperties.has('_workspaceContext')\r\n\t\t) {\r\n\t\t\tif (this._datasetVariantId && this._propertyType && this._workspaceContext) {\r\n\t\t\t\tconst propertyVariantId = new UmbVariantId(\r\n\t\t\t\t\tthis._propertyType.variesByCulture ? this._datasetVariantId.culture : null,\r\n\t\t\t\t\tthis._propertyType.variesBySegment ? this._datasetVariantId.segment : null,\r\n\t\t\t\t);\r\n\t\t\t\tthis._dataPath = `$.values[${UmbDataPathPropertyValueQuery({\r\n\t\t\t\t\talias: this._propertyType.alias,\r\n\t\t\t\t\tculture: propertyVariantId.culture,\r\n\t\t\t\t\tsegment: propertyVariantId.segment,\r\n\t\t\t\t})}].value`;\r\n\r\n\t\t\t\tthis.observe(\r\n\t\t\t\t\tthis._workspaceContext.propertyWriteGuard.isPermittedForVariantAndProperty(\r\n\t\t\t\t\t\tpropertyVariantId,\r\n\t\t\t\t\t\tthis._propertyType,\r\n\t\t\t\t\t\tpropertyVariantId,\r\n\t\t\t\t\t),\r\n\t\t\t\t\t(write) => {\r\n\t\t\t\t\t\tthis._writeable = write;\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'observeView',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\toverride render() {\r\n\t\tif (!this._viewable) return nothing;\r\n\t\tif (!this._dataPath || this._writeable === undefined) return nothing;\r\n\r\n\t\treturn html`<umb-property-type-based-property\r\n\t\t\tdata-path=${this._dataPath}\r\n\t\t\t.property=${this._propertyType}\r\n\t\t\t?readonly=${!this._writeable}></umb-property-type-based-property>`;\r\n\t}\r\n}\r\n\r\nexport default UmbContentWorkspacePropertyElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-content-workspace-property': UmbContentWorkspacePropertyElement;\r\n\t}\r\n}\r\n","import { UmbMergeContentVariantDataController } from '../controller/merge-content-variant-data.controller.js';\r\nimport type { UmbElementDetailModel } from '../types.js';\r\nimport { UmbVariantId, umbVariantObjectCompare } from '@umbraco-cms/backoffice/variant';\r\nimport { UmbEntityWorkspaceDataManager, type UmbWorkspaceDataManager } from '@umbraco-cms/backoffice/workspace';\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nfunction valueObjectCompare(a: any, b: any) {\r\n\treturn a.alias === b.alias && umbVariantObjectCompare(a, b);\r\n}\r\n\r\nexport class UmbElementWorkspaceDataManager<ModelType extends UmbElementDetailModel>\r\n\textends UmbEntityWorkspaceDataManager<ModelType>\r\n\timplements UmbWorkspaceDataManager<ModelType>\r\n{\r\n\tprotected _varies?: boolean;\r\n\tprotected _variesByCulture?: boolean;\r\n\tprotected _variesBySegment?: boolean;\r\n\r\n\tprotected override _sortCurrentData<GivenType extends Partial<ModelType> = Partial<ModelType>>(\r\n\t\tpersistedData: Partial<ModelType>,\r\n\t\tcurrentData: GivenType,\r\n\t): GivenType {\r\n\t\tcurrentData = super._sortCurrentData(persistedData, currentData);\r\n\t\t// Sort the values in the same order as the persisted data:\r\n\t\tconst persistedValues = persistedData.values;\r\n\t\tif (persistedValues && currentData.values) {\r\n\t\t\treturn {\r\n\t\t\t\t...currentData,\r\n\t\t\t\tvalues: [...currentData.values].sort(function (a, b) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tpersistedValues.findIndex((x) => valueObjectCompare(x, a)) -\r\n\t\t\t\t\t\tpersistedValues.findIndex((x) => valueObjectCompare(x, b))\r\n\t\t\t\t\t);\r\n\t\t\t\t}),\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn currentData;\r\n\t}\r\n\r\n\t#updateLock = 0;\r\n\tinitiatePropertyValueChange() {\r\n\t\tthis.#updateLock++;\r\n\t\tthis._current.mute();\r\n\t\t// TODO: When ready enable this code will enable handling a finish automatically by this implementation 'using myState.initiatePropertyValueChange()' (Relies on TS support of Using) [NL]\r\n\t\t/*return {\r\n\t\t\t[Symbol.dispose]: this.finishPropertyValueChange,\r\n\t\t};*/\r\n\t}\r\n\tfinishPropertyValueChange = () => {\r\n\t\tthis.#updateLock--;\r\n\t\tthis.#triggerPropertyValueChanges();\r\n\t};\r\n\t#triggerPropertyValueChanges() {\r\n\t\tif (this.#updateLock === 0) {\r\n\t\t\tthis._current.unmute();\r\n\t\t}\r\n\t}\r\n\r\n\tsetVariesByCulture(vary: boolean | undefined) {\r\n\t\tthis._variesByCulture = vary;\r\n\t}\r\n\r\n\tsetVariesBySegment(vary: boolean | undefined) {\r\n\t\tthis._variesBySegment = vary;\r\n\t}\r\n\r\n\tsetVaries(vary: boolean | undefined) {\r\n\t\tthis._varies = vary;\r\n\t}\r\n\r\n\tasync constructData(selectedVariants: Array<UmbVariantId>): Promise<ModelType> {\r\n\t\t// Lets correct the selected variants, so invariant is included, or the only one if invariant.\r\n\t\t// TODO: VDIVD: Could a document be set to invariant but hold variant data inside it?\r\n\t\tconst invariantVariantId = UmbVariantId.CreateInvariant();\r\n\t\tlet variantsToStore = [invariantVariantId];\r\n\t\tif (this._varies === false) {\r\n\t\t\t// If we do not vary, we wil just pick the invariant variant id.\r\n\t\t\tselectedVariants = [invariantVariantId];\r\n\t\t} else {\r\n\t\t\tvariantsToStore = [...selectedVariants, invariantVariantId];\r\n\t\t}\r\n\r\n\t\t// If we vary by segment we need to save all segments for a selected culture.\r\n\t\tif (this._variesBySegment === true) {\r\n\t\t\tconst dataSegments = this.getCurrent()!.values.map((x) => x.segment);\r\n\t\t\tvariantsToStore = [\r\n\t\t\t\t...variantsToStore,\r\n\t\t\t\t...dataSegments.flatMap((segment) => variantsToStore.map((variant) => variant.toSegment(segment))),\r\n\t\t\t];\r\n\r\n\t\t\tselectedVariants = [\r\n\t\t\t\t...selectedVariants,\r\n\t\t\t\t...dataSegments.flatMap((segment) => selectedVariants.map((variant) => variant.toSegment(segment))),\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tconst data = this.getCurrent();\r\n\t\tif (!data) throw new Error('Current data is missing');\r\n\t\t//if (!data.unique) throw new Error('Unique of current data is missing');\r\n\r\n\t\tconst persistedData = this.getPersisted();\r\n\r\n\t\treturn await new UmbMergeContentVariantDataController(this).process(\r\n\t\t\tpersistedData,\r\n\t\t\tdata,\r\n\t\t\tselectedVariants,\r\n\t\t\tvariantsToStore,\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbContentDetailModel } from '../types.js';\r\nimport { UmbElementWorkspaceDataManager } from './element-data-manager.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { appendToFrozenArray, jsonStringComparison } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbVariantId, umbVariantObjectCompare, type UmbEntityVariantModel } from '@umbraco-cms/backoffice/variant';\r\n\r\nexport class UmbContentWorkspaceDataManager<\r\n\tModelType extends UmbContentDetailModel,\r\n\tModelVariantType extends UmbEntityVariantModel = ModelType extends { variants: UmbEntityVariantModel[] }\r\n\t\t? ModelType['variants'][0]\r\n\t\t: never,\r\n> extends UmbElementWorkspaceDataManager<ModelType> {\r\n\t//\r\n\t//#repository;\r\n\t#variantScaffold?: ModelVariantType;\r\n\r\n\tconstructor(host: UmbControllerHost, variantScaffold?: ModelVariantType) {\r\n\t\tsuper(host);\r\n\t\tthis.#variantScaffold = variantScaffold;\r\n\t}\r\n\r\n\tprotected override _sortCurrentData<GivenType extends Partial<ModelType> = Partial<ModelType>>(\r\n\t\tpersistedData: Partial<ModelType>,\r\n\t\tcurrentData: GivenType,\r\n\t): GivenType {\r\n\t\tcurrentData = super._sortCurrentData(persistedData, currentData);\r\n\t\t// Sort the variants in the same order as the persisted data:\r\n\t\tconst persistedVariants = persistedData.variants;\r\n\t\tif (persistedVariants && currentData.variants) {\r\n\t\t\treturn {\r\n\t\t\t\t...currentData,\r\n\t\t\t\tvariants: [...currentData.variants].sort(function (a, b) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tpersistedVariants.findIndex((x) => umbVariantObjectCompare(x, a)) -\r\n\t\t\t\t\t\tpersistedVariants.findIndex((x) => umbVariantObjectCompare(x, b))\r\n\t\t\t\t\t);\r\n\t\t\t\t}),\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn currentData;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the variant scaffold data\r\n\t * @param {ModelVariantType} variantScaffold The variant scaffold data\r\n\t * @memberof UmbContentWorkspaceDataManager\r\n\t */\r\n\tsetVariantScaffold(variantScaffold: ModelVariantType) {\r\n\t\tthis.#variantScaffold = variantScaffold;\r\n\t}\r\n\r\n\tensureVariantData(variantId: UmbVariantId) {\r\n\t\tthis.updateVariantData(variantId);\r\n\t}\r\n\r\n\tupdateVariantData(variantId: UmbVariantId, update?: Partial<ModelVariantType>) {\r\n\t\tif (!this.#variantScaffold) throw new Error('Variant scaffold data is missing');\r\n\r\n\t\tif (this._variesByCulture === true) {\r\n\t\t\t// If variant Id is invariant, we don't to have the variant appended to our data.\r\n\t\t\tif (variantId.isInvariant()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.#updateVariantData(variantId, update);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._variesBySegment === true) {\r\n\t\t\t// When varying by segment we need to handle the \"unsegmented\" variant as invariant.\r\n\t\t\t// The rest of the segmented variants will be handled as normal variant data.\r\n\t\t\tif (variantId.isInvariant()) {\r\n\t\t\t\tthis.#updateInvariantData(update);\r\n\t\t\t} else {\r\n\t\t\t\tthis.#updateVariantData(variantId, update);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._varies === false) {\r\n\t\t\tthis.#updateInvariantData(update);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthrow new Error('Varies by culture is missing');\r\n\t}\r\n\r\n\t#updateVariantData(variantId: UmbVariantId, update?: Partial<ModelVariantType>) {\r\n\t\tconst currentData = this.getCurrent();\r\n\t\tif (!currentData) throw new Error('Data is missing');\r\n\r\n\t\tif (!variantId.isSegmentInvariant()) {\r\n\t\t\t// The server requires a segment name. It doesn't matter what it is as long as it is not empty. The server will overwrite it with the name of the default.\r\n\t\t\tupdate = { ...update, name: 'Segment' } as ModelVariantType;\r\n\t\t}\r\n\r\n\t\tconst variant = currentData.variants.find((x) => variantId.compare(x));\r\n\t\tconst newVariants = appendToFrozenArray(\r\n\t\t\tcurrentData.variants,\r\n\t\t\t{\r\n\t\t\t\t...this.#variantScaffold,\r\n\t\t\t\t...variantId.toObject(),\r\n\t\t\t\t...variant,\r\n\t\t\t\t...update,\r\n\t\t\t} as ModelVariantType,\r\n\t\t\t(x) => variantId.compare(x),\r\n\t\t) as Array<ModelVariantType>;\r\n\t\tthis.updateCurrent({ variants: newVariants } as unknown as ModelType);\r\n\t}\r\n\r\n\t#updateInvariantData(update?: Partial<ModelVariantType>) {\r\n\t\tconst currentData = this.getCurrent();\r\n\t\tif (!currentData) throw new Error('Data is missing');\r\n\r\n\t\tconst invariantVariantId = UmbVariantId.CreateInvariant();\r\n\t\tconst variant = currentData.variants.find((x) => invariantVariantId.compare(x));\r\n\t\t// Cause we are invariant, we will just overwrite all variants with this one:\r\n\t\tconst newVariants = [\r\n\t\t\t{\r\n\t\t\t\t...this.#variantScaffold,\r\n\t\t\t\t...invariantVariantId.toObject(),\r\n\t\t\t\t...variant,\r\n\t\t\t\t...update,\r\n\t\t\t} as ModelVariantType,\r\n\t\t];\r\n\t\tthis.updateCurrent({ variants: newVariants } as unknown as ModelType);\r\n\t}\r\n\r\n\tgetChangedVariants() {\r\n\t\tconst persisted = this.getPersisted();\r\n\t\tconst current = this.getCurrent();\r\n\t\tif (!current) throw new Error('Current data is missing');\r\n\r\n\t\tconst changedVariants = current?.variants.map((variant) => {\r\n\t\t\tconst persistedVariant = persisted?.variants.find((x) => UmbVariantId.Create(variant).compare(x));\r\n\t\t\treturn {\r\n\t\t\t\tculture: variant.culture,\r\n\t\t\t\tsegment: variant.segment,\r\n\t\t\t\tequal: persistedVariant ? jsonStringComparison(variant, persistedVariant) : false,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\tconst changedProperties = current?.values.map((value) => {\r\n\t\t\tconst persistedValues = persisted?.values.find((x) => UmbVariantId.Create(value).compare(x));\r\n\t\t\treturn {\r\n\t\t\t\tculture: value.culture,\r\n\t\t\t\tsegment: value.segment,\r\n\t\t\t\tequal: persistedValues ? jsonStringComparison(value, persistedValues) : false,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// calculate the variantIds of those who either have a change in properties or in variants:\r\n\t\treturn (\r\n\t\t\tchangedVariants\r\n\t\t\t\t?.concat(changedProperties ?? [])\r\n\t\t\t\t.filter((x) => x.equal === false)\r\n\t\t\t\t.map((x) => new UmbVariantId(x.culture, x.segment)) ?? []\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbContentPropertyDatasetContext } from './content-property-dataset.context.js';\r\nimport type { UmbPropertyDatasetContext } from '@umbraco-cms/backoffice/property';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const IsContentPropertyDatasetContext = (\r\n\tcontext: UmbPropertyDatasetContext,\r\n): context is UmbContentPropertyDatasetContext => (context as any).IS_CONTENT === true;\r\n\r\nexport const UMB_CONTENT_PROPERTY_DATASET_CONTEXT = new UmbContextToken<\r\n\tUmbPropertyDatasetContext,\r\n\tUmbContentPropertyDatasetContext\r\n>('UmbPropertyDatasetContext', undefined, IsContentPropertyDatasetContext);\r\n","import type { UmbElementDetailModel } from '../types.js';\r\nimport type { UmbElementPropertyDataOwner } from './element-property-data-owner.interface.js';\r\nimport type { UmbPropertyDatasetContext } from '@umbraco-cms/backoffice/property';\r\nimport { UMB_PROPERTY_DATASET_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { Observable } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport {\r\n\tUmbBasicState,\r\n\tUmbBooleanState,\r\n\tclassEqualMemoization,\r\n\tcreateObservablePart,\r\n\tmergeObservables,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbVariantContext, UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UmbContentTypeModel, UmbPropertyTypeModel } from '@umbraco-cms/backoffice/content-type';\r\nimport type { UmbEntityUnique } from '@umbraco-cms/backoffice/entity';\r\n\r\ntype UmbPropertyVariantIdMapType = Array<{ alias: string; variantId: UmbVariantId }>;\r\n\r\nexport abstract class UmbElementPropertyDatasetContext<\r\n\t\tContentModel extends UmbElementDetailModel = UmbElementDetailModel,\r\n\t\tContentTypeModel extends UmbContentTypeModel = UmbContentTypeModel,\r\n\t\tDataOwnerType extends UmbElementPropertyDataOwner<ContentModel, ContentTypeModel> = UmbElementPropertyDataOwner<\r\n\t\t\tContentModel,\r\n\t\t\tContentTypeModel\r\n\t\t>,\r\n\t>\r\n\textends UmbContextBase\r\n\timplements UmbPropertyDatasetContext\r\n{\r\n\tprotected readonly _dataOwner: DataOwnerType;\r\n\t#variantId: UmbVariantId;\r\n\tpublic getVariantId() {\r\n\t\treturn this.#variantId;\r\n\t}\r\n\r\n\tabstract name: Observable<string | undefined>;\r\n\tabstract culture: Observable<string | null | undefined>;\r\n\tabstract segment: Observable<string | null | undefined>;\r\n\r\n\t#propertyVariantIdPromise?: Promise<never>;\r\n\t#propertyVariantIdPromiseResolver?: () => void;\r\n\t#propertyVariantIdMap = new UmbBasicState<UmbPropertyVariantIdMapType>([]);\r\n\tprivate readonly _propertyVariantIdMap = this.#propertyVariantIdMap.asObservable();\r\n\r\n\tprotected _readOnly = new UmbBooleanState(false);\r\n\tpublic readOnly = this._readOnly.asObservable();\r\n\r\n\t#variantContext = new UmbVariantContext(this).inherit();\r\n\r\n\tgetEntityType(): string {\r\n\t\treturn this._dataOwner.getEntityType();\r\n\t}\r\n\tgetUnique(): UmbEntityUnique | undefined {\r\n\t\treturn this._dataOwner.getUnique();\r\n\t}\r\n\tabstract getName(): string | undefined;\r\n\r\n\tgetReadOnly() {\r\n\t\treturn this._readOnly.getValue();\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost, dataOwner: DataOwnerType, variantId?: UmbVariantId) {\r\n\t\t// The controller alias, is a very generic name cause we want only one of these for this controller host.\r\n\t\tsuper(host, UMB_PROPERTY_DATASET_CONTEXT);\r\n\t\tthis._dataOwner = dataOwner;\r\n\t\tthis.#variantId = variantId ?? UmbVariantId.CreateInvariant();\r\n\t\tthis.#variantContext.setVariantId(this.#variantId);\r\n\r\n\t\tthis.#propertyVariantIdPromise = new Promise((resolve) => {\r\n\t\t\tthis.#propertyVariantIdPromiseResolver = resolve as any;\r\n\t\t});\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis._dataOwner.readOnlyGuard.isPermittedForVariant(this.#variantId),\r\n\t\t\t(isReadOnly) => {\r\n\t\t\t\tthis._readOnly.setValue(isReadOnly);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\t// TODO: Refactor this into a separate manager/controller of some sort? [NL]\r\n\t\tthis.observe(\r\n\t\t\tthis._dataOwner.structure.contentTypeProperties,\r\n\t\t\t(props: UmbPropertyTypeModel[]) => {\r\n\t\t\t\tconst map = props.map((prop) => ({ alias: prop.alias, variantId: this.#createPropertyVariantId(prop) }));\r\n\t\t\t\tthis.#propertyVariantIdMap.setValue(map);\r\n\t\t\t\t// Resolve promise, to let the once waiting on this know.\r\n\t\t\t\tif (this.#propertyVariantIdPromiseResolver) {\r\n\t\t\t\t\tthis.#propertyVariantIdPromiseResolver();\r\n\t\t\t\t\tthis.#propertyVariantIdPromiseResolver = undefined;\r\n\t\t\t\t\tthis.#propertyVariantIdPromise = undefined;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t}\r\n\r\n\t#createPropertyVariantId(property: UmbPropertyTypeModel) {\r\n\t\treturn UmbVariantId.Create({\r\n\t\t\tculture: property.variesByCulture ? this.#variantId.culture : null,\r\n\t\t\tsegment: property.variesBySegment ? this.#variantId.segment : null,\r\n\t\t});\r\n\t}\r\n\r\n\t#propertiesObservable?: Observable<ContentModel['values']>;\r\n\t// Should it be possible to get the properties as a list of property aliases?\r\n\tget properties(): Observable<ContentModel['values']> {\r\n\t\tif (!this.#propertiesObservable) {\r\n\t\t\tthis.#propertiesObservable = mergeObservables(\r\n\t\t\t\t[this._propertyVariantIdMap, this._dataOwner.values],\r\n\t\t\t\tthis.#mergeVariantIdsAndValues,\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn this.#propertiesObservable;\r\n\t}\r\n\r\n\t#mergeVariantIdsAndValues([props, values]: [UmbPropertyVariantIdMapType, ContentModel['values'] | undefined]) {\r\n\t\tconst r: ContentModel['values'] = [];\r\n\t\tif (values) {\r\n\t\t\tfor (const prop of props) {\r\n\t\t\t\tconst f = values.find((v) => prop.alias === v.alias && prop.variantId.compare(v));\r\n\t\t\t\tif (f) {\r\n\t\t\t\t\tr.push(f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn r as ContentModel['values'];\r\n\t}\r\n\r\n\tasync getProperties(): Promise<ContentModel['values']> {\r\n\t\tawait this.#propertyVariantIdPromise;\r\n\t\treturn this.#mergeVariantIdsAndValues([\r\n\t\t\tthis.#propertyVariantIdMap.getValue(),\r\n\t\t\tthis._dataOwner.getValues(),\r\n\t\t]) as ContentModel['values'];\r\n\t}\r\n\r\n\t/**\r\n\t * @function propertyVariantId\r\n\t * @param {string} propertyAlias - The property alias to observe the variantId of.\r\n\t * @returns {Promise<Observable<UmbVariantId | undefined> | undefined>} - The observable for this properties variantId.\r\n\t * @description Get an Observable for the variant id of this property.\r\n\t */\r\n\tasync propertyVariantId(propertyAlias: string) {\r\n\t\t/*\r\n\t\treturn (await this.#workspace.structure.propertyStructureByAlias(propertyAlias)).pipe(\r\n\t\t\tmap((property) => (property ? this.#createPropertyVariantId(property) : undefined)),\r\n\t\t);\r\n\t\t*/\r\n\t\treturn createObservablePart(\r\n\t\t\tthis._propertyVariantIdMap,\r\n\t\t\t(x) => x.find((v) => v.alias === propertyAlias)?.variantId,\r\n\t\t\tclassEqualMemoization,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @function propertyValueByAlias\r\n\t * @param {string} propertyAlias  The alias of the property\r\n\t * @returns {Promise<Observable<ReturnType | undefined> | undefined>} - An observable of the property value\r\n\t * @description Get an Observable for the value of this property.\r\n\t */\r\n\tasync propertyValueByAlias<ReturnType = unknown>(\r\n\t\tpropertyAlias: string,\r\n\t): Promise<Observable<ReturnType | undefined> | undefined> {\r\n\t\tawait this._dataOwner.isLoaded();\r\n\t\tawait this.#propertyVariantIdPromise;\r\n\t\treturn mergeObservables(\r\n\t\t\t[await this.propertyVariantId(propertyAlias), this._dataOwner.values],\r\n\t\t\t([variantId, values]) => {\r\n\t\t\t\treturn variantId\r\n\t\t\t\t\t? (values?.find((x) => x?.alias === propertyAlias && variantId.compare(x))?.value as ReturnType)\r\n\t\t\t\t\t: undefined;\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO: Refactor: Not used currently, but should investigate if we can implement this, to spare some energy.\r\n\tasync propertyValueByAliasAndVariantId<ReturnType = unknown>(\r\n\t\tpropertyAlias: string,\r\n\t\tpropertyVariantId: UmbVariantId,\r\n\t): Promise<Observable<ReturnType | undefined> | undefined> {\r\n\t\treturn this._dataOwner.propertyValueByAlias<ReturnType>(propertyAlias, propertyVariantId);\r\n\t}\r\n\r\n\t/**\r\n\t * @function setPropertyValueByVariant\r\n\t * @param {string} propertyAlias - The alias of the property\r\n\t * @param {unknown} value - value can be a promise resolving into the actual value or the raw value it self.\r\n\t * @param {UmbVariantId} propertyVariantId - The variant id for the value to be set for.\r\n\t * @returns {Promise<unknown>} - A promise that resolves once the value has been set.\r\n\t * @description Get the value of this property.\r\n\t */\r\n\tsetPropertyValueByVariant(propertyAlias: string, value: unknown, propertyVariantId: UmbVariantId): Promise<void> {\r\n\t\treturn this._dataOwner.setPropertyValue(propertyAlias, value, propertyVariantId);\r\n\t}\r\n\r\n\t/**\r\n\t * @function setPropertyValue\r\n\t * @param {string} propertyAlias - The alias for the value to be set\r\n\t * @param {PromiseLike<unknown>} value - value can be a promise resolving into the actual value or the raw value it self.\r\n\t * @returns {Promise<void>}\r\n\t * @description Set the value of this property.\r\n\t */\r\n\tasync setPropertyValue(propertyAlias: string, value: PromiseLike<unknown>) {\r\n\t\tthis._dataOwner.initiatePropertyValueChange();\r\n\t\tawait this.#propertyVariantIdPromise;\r\n\t\tconst propVariantId = this.#propertyVariantIdMap.getValue().find((x) => x.alias === propertyAlias)?.variantId;\r\n\t\tif (propVariantId) {\r\n\t\t\tawait this._dataOwner.setPropertyValue(propertyAlias, await value, propVariantId);\r\n\t\t}\r\n\t\tthis._dataOwner.finishPropertyValueChange();\r\n\t}\r\n\r\n\toverride destroy() {\r\n\t\tsuper.destroy();\r\n\t\tthis.#propertyVariantIdMap?.destroy();\r\n\t\t(this.#propertyVariantIdMap as unknown) = undefined;\r\n\t}\r\n}\r\n","import type { UmbContentWorkspaceContext } from '../workspace/index.js';\r\nimport type { UmbContentDetailModel } from '../types.js';\r\nimport { UmbElementPropertyDatasetContext } from './element-property-dataset.context.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbObjectState } from '@umbraco-cms/backoffice/observable-api';\r\nimport type { UmbEntityVariantModel, UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UmbContentTypeModel } from '@umbraco-cms/backoffice/content-type';\r\nimport { UmbRoutePathAddendumContext } from '@umbraco-cms/backoffice/router';\r\n\r\nexport class UmbContentPropertyDatasetContext<\r\n\tContentModel extends UmbContentDetailModel = UmbContentDetailModel,\r\n\tContentTypeModel extends UmbContentTypeModel = UmbContentTypeModel,\r\n\tVariantModelType extends UmbEntityVariantModel = UmbEntityVariantModel,\r\n> extends UmbElementPropertyDatasetContext<\r\n\tContentModel,\r\n\tContentTypeModel,\r\n\tUmbContentWorkspaceContext<ContentModel, ContentTypeModel, VariantModelType>\r\n> {\r\n\t//\r\n\t#pathAddendum = new UmbRoutePathAddendumContext(this);\r\n\t#currentVariant = new UmbObjectState<VariantModelType | undefined>(undefined);\r\n\tcurrentVariant = this.#currentVariant.asObservable();\r\n\r\n\tname = this.#currentVariant.asObservablePart((x) => x?.name);\r\n\tculture = this.#currentVariant.asObservablePart((x) => x?.culture);\r\n\tsegment = this.#currentVariant.asObservablePart((x) => x?.segment);\r\n\r\n\treadonly IS_CONTENT = true;\r\n\r\n\tgetName(): string | undefined {\r\n\t\treturn this._dataOwner.getName(this.getVariantId());\r\n\t}\r\n\tsetName(name: string) {\r\n\t\tthis._dataOwner.setName(name, this.getVariantId());\r\n\t}\r\n\t/**\r\n\t * @deprecated Its not clear why we have this. We should either document the need better or get rid of it.\r\n\t * @returns {UmbEntityVariantModel | undefined} - gives information about the current variant.\r\n\t */\r\n\tgetVariantInfo() {\r\n\t\treturn this._dataOwner.getVariant(this.getVariantId());\r\n\t}\r\n\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\tdataOwner: UmbContentWorkspaceContext<ContentModel, ContentTypeModel, VariantModelType>,\r\n\t\tvariantId?: UmbVariantId,\r\n\t) {\r\n\t\t// The controller alias, is a very generic name cause we want only one of these for this controller host.\r\n\t\tsuper(host, dataOwner, variantId);\r\n\r\n\t\tthis.#pathAddendum.setAddendum(variantId ? variantId.toString() : '');\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis._dataOwner.variantById(this.getVariantId()),\r\n\t\t\tasync (variantInfo) => {\r\n\t\t\t\tif (!variantInfo) return;\r\n\t\t\t\tthis.#currentVariant.setValue(variantInfo);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t}\r\n}\r\n","import type { UmbContentDetailModel } from '../types.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport {\r\n\tUmbDataPathPropertyValueQuery,\r\n\tUmbDataPathVariantQuery,\r\n\tUmbValidationPropertyPathTranslationController,\r\n\tumbQueryMapperForJsonPaths,\r\n\tumbScopeMapperForJsonPaths,\r\n\ttype UmbValidationPathTranslator,\r\n} from '@umbraco-cms/backoffice/validation';\r\n\r\nexport class UmbContentDetailValidationPathTranslator\r\n\textends UmbControllerBase\r\n\timplements UmbValidationPathTranslator<UmbContentDetailModel>\r\n{\r\n\tasync translate(paths: Array<string>, data: UmbContentDetailModel): Promise<Array<string>> {\r\n\t\t// Translate the Values array:\r\n\r\n\t\t// First scope to the values array:\r\n\t\tpaths = await umbScopeMapperForJsonPaths(paths, '$.values', async (paths) => {\r\n\t\t\t// then translate the values of these properties:\r\n\t\t\tconst ctrl = new UmbValidationPropertyPathTranslationController(this);\r\n\t\t\treturn await ctrl.translateProperties(paths, data.values, UmbDataPathPropertyValueQuery);\r\n\t\t});\r\n\r\n\t\t// translate the Variants array:\r\n\r\n\t\t// First scope to the variants array:\r\n\t\tpaths = await umbScopeMapperForJsonPaths(paths, '$.variants', async (paths) => {\r\n\t\t\t// Then map each entry:\r\n\t\t\treturn await umbQueryMapperForJsonPaths(paths, data.variants, (entry) => UmbDataPathVariantQuery(entry));\r\n\t\t});\r\n\r\n\t\treturn paths;\r\n\t}\r\n}\r\n","import type { UmbContentDetailModel, UmbElementValueModel } from '../types.js';\r\nimport { UmbContentWorkspaceDataManager } from '../manager/index.js';\r\nimport { UmbMergeContentVariantDataController } from '../controller/merge-content-variant-data.controller.js';\r\nimport type { UmbContentVariantPickerData, UmbContentVariantPickerValue } from '../variant-picker/index.js';\r\nimport type { UmbContentPropertyDatasetContext } from '../property-dataset-context/index.js';\r\nimport type { UmbContentValidationRepository } from '../repository/content-validation-repository.interface.js';\r\nimport type { UmbContentWorkspaceContext } from './content-workspace-context.interface.js';\r\nimport { UmbContentDetailValidationPathTranslator } from './content-detail-validation-path-translator.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbDetailRepository, UmbDetailRepositoryConstructor } from '@umbraco-cms/backoffice/repository';\r\nimport {\r\n\tUmbEntityDetailWorkspaceContextBase,\r\n\tUmbWorkspaceSplitViewManager,\r\n\ttype UmbEntityDetailWorkspaceContextArgs,\r\n\ttype UmbEntityDetailWorkspaceContextCreateArgs,\r\n\ttype UmbSaveableWorkspaceContext,\r\n} from '@umbraco-cms/backoffice/workspace';\r\nimport {\r\n\tUmbContentTypeStructureManager,\r\n\ttype UmbContentTypeModel,\r\n\ttype UmbPropertyTypeModel,\r\n} from '@umbraco-cms/backoffice/content-type';\r\nimport {\r\n\tUmbVariantId,\r\n\ttype UmbEntityVariantModel,\r\n\ttype UmbEntityVariantOptionModel,\r\n} from '@umbraco-cms/backoffice/variant';\r\nimport { UmbDeprecation, UmbReadOnlyVariantGuardManager } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbDataTypeDetailRepository, UmbDataTypeItemRepositoryManager } from '@umbraco-cms/backoffice/data-type';\r\nimport { appendToFrozenArray, mergeObservables, UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UmbLanguageCollectionRepository, type UmbLanguageDetailModel } from '@umbraco-cms/backoffice/language';\r\nimport type { Observable } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport { firstValueFrom, map } from '@umbraco-cms/backoffice/external/rxjs';\r\nimport {\r\n\tUMB_VALIDATION_CONTEXT,\r\n\tUMB_VALIDATION_EMPTY_LOCALIZATION_KEY,\r\n\tUmbDataPathVariantQuery,\r\n\tUmbServerModelValidatorContext,\r\n\tUmbValidationController,\r\n} from '@umbraco-cms/backoffice/validation';\r\nimport type { UmbModalToken } from '@umbraco-cms/backoffice/modal';\r\nimport { umbOpenModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport {\r\n\tUmbEntityUpdatedEvent,\r\n\tUmbRequestReloadChildrenOfEntityEvent,\r\n\tUmbRequestReloadStructureForEntityEvent,\r\n} from '@umbraco-cms/backoffice/entity-action';\r\nimport type { ClassConstructor } from '@umbraco-cms/backoffice/extension-api';\r\nimport {\r\n\tUmbPropertyValuePresetVariantBuilderController,\r\n\tUmbVariantPropertyGuardManager,\r\n\ttype UmbPropertyTypePresetModel,\r\n\ttype UmbPropertyTypePresetModelTypeModel,\r\n} from '@umbraco-cms/backoffice/property';\r\nimport { UmbSegmentCollectionRepository, type UmbSegmentCollectionItemModel } from '@umbraco-cms/backoffice/segment';\r\n\r\nexport interface UmbContentDetailWorkspaceContextArgs<\r\n\tDetailModelType extends UmbContentDetailModel<VariantModelType>,\r\n\tContentTypeDetailModelType extends UmbContentTypeModel = UmbContentTypeModel,\r\n\tVariantModelType extends UmbEntityVariantModel = DetailModelType extends { variants: UmbEntityVariantModel[] }\r\n\t\t? DetailModelType['variants'][0]\r\n\t\t: never,\r\n\tVariantOptionModelType extends UmbEntityVariantOptionModel = UmbEntityVariantOptionModel<VariantModelType>,\r\n> extends UmbEntityDetailWorkspaceContextArgs {\r\n\tcontentTypeDetailRepository: UmbDetailRepositoryConstructor<ContentTypeDetailModelType>;\r\n\tcontentValidationRepository?: ClassConstructor<UmbContentValidationRepository<DetailModelType>>;\r\n\tskipValidationOnSubmit?: boolean;\r\n\tignoreValidationResultOnSubmit?: boolean;\r\n\tcontentVariantScaffold: VariantModelType;\r\n\tcontentTypePropertyName: string;\r\n\tsaveModalToken?: UmbModalToken<UmbContentVariantPickerData<VariantOptionModelType>, UmbContentVariantPickerValue>;\r\n}\r\n\r\n/**\r\n * The base class for a content detail workspace context.\r\n * @exports\r\n * @abstract\r\n * @class UmbContentDetailWorkspaceContextBase\r\n * @augments {UmbEntityDetailWorkspaceContextBase<DetailModelType, DetailRepositoryType, CreateArgsType>}\r\n * @implements {UmbContentWorkspaceContext<DetailModelType, ContentTypeDetailModelType, VariantModelType>}\r\n * @template DetailModelType\r\n * @template DetailRepositoryType\r\n * @template ContentTypeDetailModelType\r\n * @template VariantModelType\r\n * @template VariantOptionModelType\r\n * @template CreateArgsType\r\n */\r\nexport abstract class UmbContentDetailWorkspaceContextBase<\r\n\t\tDetailModelType extends UmbContentDetailModel<VariantModelType>,\r\n\t\tDetailRepositoryType extends UmbDetailRepository<DetailModelType> = UmbDetailRepository<DetailModelType>,\r\n\t\tContentTypeDetailModelType extends UmbContentTypeModel = UmbContentTypeModel,\r\n\t\tVariantModelType extends UmbEntityVariantModel = DetailModelType extends { variants: UmbEntityVariantModel[] }\r\n\t\t\t? DetailModelType['variants'][0]\r\n\t\t\t: never,\r\n\t\tVariantOptionModelType extends UmbEntityVariantOptionModel = UmbEntityVariantOptionModel<VariantModelType>,\r\n\t\tCreateArgsType extends\r\n\t\t\tUmbEntityDetailWorkspaceContextCreateArgs<DetailModelType> = UmbEntityDetailWorkspaceContextCreateArgs<DetailModelType>,\r\n\t>\r\n\textends UmbEntityDetailWorkspaceContextBase<DetailModelType, DetailRepositoryType, CreateArgsType>\r\n\timplements\r\n\t\tUmbContentWorkspaceContext<DetailModelType, ContentTypeDetailModelType, VariantModelType>,\r\n\t\tUmbSaveableWorkspaceContext\r\n{\r\n\tpublic readonly IS_CONTENT_WORKSPACE_CONTEXT = true as const;\r\n\r\n\tpublic readonly readOnlyGuard = new UmbReadOnlyVariantGuardManager(this);\r\n\r\n\tpublic readonly propertyViewGuard = new UmbVariantPropertyGuardManager(this);\r\n\tpublic readonly propertyWriteGuard = new UmbVariantPropertyGuardManager(this);\r\n\r\n\t/* Content Data */\r\n\tprotected override readonly _data = new UmbContentWorkspaceDataManager<DetailModelType, VariantModelType>(this);\r\n\r\n\tpublic override readonly data = this._data.current;\r\n\tpublic readonly values = this._data.createObservablePartOfCurrent((data) => data?.values);\r\n\tpublic readonly variants = this._data.createObservablePartOfCurrent((data) => data?.variants ?? []);\r\n\tpublic override readonly persistedData = this._data.persisted;\r\n\r\n\t/* Content Type (Structure) Data */\r\n\tpublic readonly structure;\r\n\tpublic readonly variesByCulture: Observable<boolean | undefined>;\r\n\tpublic readonly variesBySegment: Observable<boolean | undefined>;\r\n\tpublic readonly varies: Observable<boolean | undefined>;\r\n\r\n\tabstract readonly contentTypeUnique: Observable<string | undefined>;\r\n\r\n\t/* Data Type */\r\n\t// This dataTypeItemManager is used to load the data type items for this content type, so we have all data-types for this content type up front. [NL]\r\n\t// But once we have a proper application cache this could be solved in a way where we ask the cache for the data type items. [NL]\r\n\t// And then we do not need to store them here in a local manager, but instead just request them here up-front and then again needed(which would get them from the cache, which as well could be update while this runs) [NL]\r\n\treadonly #dataTypeItemManager = new UmbDataTypeItemRepositoryManager(this);\r\n\r\n\t#varies?: boolean;\r\n\t#variesByCulture?: boolean;\r\n\t#variesBySegment?: boolean;\r\n\r\n\t/* Split View */\r\n\treadonly splitView = new UmbWorkspaceSplitViewManager();\r\n\r\n\t/* Variant Options */\r\n\t// TODO: Optimize this so it uses either a App Language Context? [NL]\r\n\t#languageRepository = new UmbLanguageCollectionRepository(this);\r\n\t#languages = new UmbArrayState<UmbLanguageDetailModel>([], (x) => x.unique);\r\n\t/**\r\n\t * @private\r\n\t * @description - Should not be used by external code.\r\n\t * @internal\r\n\t */\r\n\tpublic readonly languages = this.#languages.asObservable();\r\n\r\n\t#segmentRepository = new UmbSegmentCollectionRepository(this);\r\n\t#segments = new UmbArrayState<UmbSegmentCollectionItemModel>([], (x) => x.unique);\r\n\tprotected readonly _segments = this.#segments.asObservable();\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t// @ts-ignore\r\n\t// TODO: fix type error\r\n\tpublic readonly variantOptions;\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tprotected _variantOptionsFilter = (variantOption: VariantOptionModelType) => true;\r\n\r\n\t#variantValidationContexts: Array<UmbValidationController> = [];\r\n\tgetVariantValidationContext(variantId: UmbVariantId): UmbValidationController | undefined {\r\n\t\treturn this.#variantValidationContexts.find((x) => x.getVariantId()?.compare(variantId));\r\n\t}\r\n\r\n\t#validateOnSubmit: boolean;\r\n\t#ignoreValidationResultOnSubmit: boolean;\r\n\t#serverValidation = new UmbServerModelValidatorContext(this);\r\n\t#validationRepositoryClass?: ClassConstructor<UmbContentValidationRepository<DetailModelType>>;\r\n\t#validationRepository?: UmbContentValidationRepository<DetailModelType>;\r\n\r\n\t#saveModalToken?: UmbModalToken<UmbContentVariantPickerData<VariantOptionModelType>, UmbContentVariantPickerValue>;\r\n\t#contentTypePropertyName: string;\r\n\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\targs: UmbContentDetailWorkspaceContextArgs<\r\n\t\t\tDetailModelType,\r\n\t\t\tContentTypeDetailModelType,\r\n\t\t\tVariantModelType,\r\n\t\t\tVariantOptionModelType\r\n\t\t>,\r\n\t) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis.propertyViewGuard.fallbackToPermitted();\r\n\t\tthis.propertyWriteGuard.fallbackToPermitted();\r\n\r\n\t\tthis.#serverValidation.addPathTranslator(UmbContentDetailValidationPathTranslator);\r\n\r\n\t\tthis._data.setVariantScaffold(args.contentVariantScaffold);\r\n\t\tthis.#saveModalToken = args.saveModalToken;\r\n\t\tthis.#contentTypePropertyName = args.contentTypePropertyName;\r\n\r\n\t\tconst contentTypeDetailRepository = new args.contentTypeDetailRepository(this);\r\n\t\tthis.#validationRepositoryClass = args.contentValidationRepository;\r\n\t\tthis.#validateOnSubmit = args.skipValidationOnSubmit ? !args.skipValidationOnSubmit : true;\r\n\t\tthis.#ignoreValidationResultOnSubmit = args.ignoreValidationResultOnSubmit ?? false;\r\n\t\tthis.structure = new UmbContentTypeStructureManager<ContentTypeDetailModelType>(this, contentTypeDetailRepository);\r\n\t\tthis.variesByCulture = this.structure.ownerContentTypeObservablePart((x) => x?.variesByCulture);\r\n\t\tthis.variesBySegment = this.structure.ownerContentTypeObservablePart((x) => x?.variesBySegment);\r\n\t\tthis.varies = this.structure.ownerContentTypeObservablePart((x) =>\r\n\t\t\tx ? x.variesByCulture || x.variesBySegment : undefined,\r\n\t\t);\r\n\r\n\t\tthis.variantOptions = mergeObservables(\r\n\t\t\t[this.variesByCulture, this.variesBySegment, this.variants, this.languages, this._segments],\r\n\t\t\t([variesByCulture, variesBySegment, variants, languages, segments]) => {\r\n\t\t\t\tif ((variesByCulture || variesBySegment) === undefined) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst varies = variesByCulture || variesBySegment;\r\n\r\n\t\t\t\t// No variation\r\n\t\t\t\tif (!varies) {\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvariant: variants.find((x) => new UmbVariantId(x.culture, x.segment).isInvariant()),\r\n\t\t\t\t\t\t\tlanguage: languages.find((x) => x.isDefault),\r\n\t\t\t\t\t\t\tculture: null,\r\n\t\t\t\t\t\t\tsegment: null,\r\n\t\t\t\t\t\t\tunique: new UmbVariantId().toString(),\r\n\t\t\t\t\t\t} as VariantOptionModelType,\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Only culture variation\r\n\t\t\t\tif (variesByCulture && !variesBySegment) {\r\n\t\t\t\t\treturn languages.map((language) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tvariant: variants.find((x) => x.culture === language.unique),\r\n\t\t\t\t\t\t\tlanguage,\r\n\t\t\t\t\t\t\tculture: language.unique,\r\n\t\t\t\t\t\t\tsegment: null,\r\n\t\t\t\t\t\t\tunique: new UmbVariantId(language.unique).toString(),\r\n\t\t\t\t\t\t} as VariantOptionModelType;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Only segment variation\r\n\t\t\t\tif (!variesByCulture && variesBySegment) {\r\n\t\t\t\t\tconst invariantCulture = {\r\n\t\t\t\t\t\tvariant: variants.find((x) => new UmbVariantId(x.culture, x.segment).isInvariant()),\r\n\t\t\t\t\t\tlanguage: languages.find((x) => x.isDefault),\r\n\t\t\t\t\t\tculture: null,\r\n\t\t\t\t\t\tsegment: null,\r\n\t\t\t\t\t\tunique: new UmbVariantId().toString(),\r\n\t\t\t\t\t} as VariantOptionModelType;\r\n\r\n\t\t\t\t\tconst segmentsForInvariantCulture = segments.map((segment) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tvariant: variants.find((x) => x.culture === null && x.segment === segment.unique),\r\n\t\t\t\t\t\t\tlanguage: languages.find((x) => x.isDefault),\r\n\t\t\t\t\t\t\tsegmentInfo: segment,\r\n\t\t\t\t\t\t\tculture: null,\r\n\t\t\t\t\t\t\tsegment: segment.unique,\r\n\t\t\t\t\t\t\tunique: new UmbVariantId(null, segment.unique).toString(),\r\n\t\t\t\t\t\t} as VariantOptionModelType;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn [invariantCulture, ...segmentsForInvariantCulture] as Array<VariantOptionModelType>;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Culture and segment variation\r\n\t\t\t\tif (variesByCulture && variesBySegment) {\r\n\t\t\t\t\treturn languages.flatMap((language) => {\r\n\t\t\t\t\t\tconst culture = {\r\n\t\t\t\t\t\t\tvariant: variants.find((x) => x.culture === language.unique),\r\n\t\t\t\t\t\t\tlanguage,\r\n\t\t\t\t\t\t\tculture: language.unique,\r\n\t\t\t\t\t\t\tsegment: null,\r\n\t\t\t\t\t\t\tunique: new UmbVariantId(language.unique).toString(),\r\n\t\t\t\t\t\t} as VariantOptionModelType;\r\n\r\n\t\t\t\t\t\tconst segmentsForCulture = segments.map((segment) => {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tvariant: variants.find((x) => x.culture === language.unique && x.segment === segment.unique),\r\n\t\t\t\t\t\t\t\tlanguage,\r\n\t\t\t\t\t\t\t\tsegmentInfo: segment,\r\n\t\t\t\t\t\t\t\tculture: language.unique,\r\n\t\t\t\t\t\t\t\tsegment: segment.unique,\r\n\t\t\t\t\t\t\t\tunique: new UmbVariantId(language.unique, segment.unique).toString(),\r\n\t\t\t\t\t\t\t} as VariantOptionModelType;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\treturn [culture, ...segmentsForCulture] as Array<VariantOptionModelType>;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [] as Array<VariantOptionModelType>;\r\n\t\t\t},\r\n\t\t).pipe(map((options) => options.filter((option) => this._variantOptionsFilter(option))));\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.variantOptions,\r\n\t\t\t(variantOptions) => {\r\n\t\t\t\tvariantOptions.forEach((variantOption) => {\r\n\t\t\t\t\tconst missingThis = this.#variantValidationContexts.filter((x) => {\r\n\t\t\t\t\t\tconst variantId = x.getVariantId();\r\n\t\t\t\t\t\tif (!variantId) return;\r\n\t\t\t\t\t\treturn variantId.culture === variantOption.culture && variantId.segment === variantOption.segment;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (missingThis) {\r\n\t\t\t\t\t\tconst context = new UmbValidationController(this);\r\n\t\t\t\t\t\tcontext.inheritFrom(this.validationContext, '$');\r\n\t\t\t\t\t\tcontext.setVariantId(UmbVariantId.Create(variantOption));\r\n\t\t\t\t\t\tcontext.autoReport();\r\n\t\t\t\t\t\tthis.#variantValidationContexts.push(context);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.varies,\r\n\t\t\t(varies) => {\r\n\t\t\t\tthis._data.setVaries(varies);\r\n\t\t\t\tthis.#varies = varies;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.variesByCulture,\r\n\t\t\t(varies) => {\r\n\t\t\t\tthis._data.setVariesByCulture(varies);\r\n\t\t\t\tthis.#variesByCulture = varies;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.variesBySegment,\r\n\t\t\t(varies) => {\r\n\t\t\t\tthis._data.setVariesBySegment(varies);\r\n\t\t\t\tthis.#variesBySegment = varies;\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t\tthis.observe(\r\n\t\t\tthis.structure.contentTypeDataTypeUniques,\r\n\t\t\t(dataTypeUniques: Array<string>) => {\r\n\t\t\t\tthis.#dataTypeItemManager.setUniques(dataTypeUniques);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\r\n\t\tthis.loadLanguages();\r\n\t\tthis.#loadSegments();\r\n\t}\r\n\r\n\tpublic async loadLanguages() {\r\n\t\t// TODO: If we don't end up having a Global Context for languages, then we should at least change this into using a asObservable which should be returned from the repository. [Nl]\r\n\t\tconst { data } = await this.#languageRepository.requestCollection({});\r\n\t\tthis.#languages.setValue(data?.items ?? []);\r\n\t}\r\n\r\n\tasync #loadSegments() {\r\n\t\tconst { data } = await this.#segmentRepository.requestCollection({});\r\n\t\tthis.#segments.setValue(data?.items ?? []);\r\n\t}\r\n\r\n\tprotected override async _scaffoldProcessData(data: DetailModelType): Promise<DetailModelType> {\r\n\t\t// Load the content type structure, usually this comes from the data, but in this case we are making the data, and we need this to be able to complete the data. [NL]\r\n\t\tawait this.structure.loadType((data as any)[this.#contentTypePropertyName].unique);\r\n\r\n\t\t// Set culture and segment for all values:\r\n\t\tconst cultures = this.#languages.getValue().map((x) => x.unique);\r\n\r\n\t\tif (this.structure.variesBySegment) {\r\n\t\t\tconsole.warn('Segments are not yet implemented for preset');\r\n\t\t}\r\n\t\tconst segments: Array<string> | undefined = this.structure.variesBySegment ? [] : undefined;\r\n\r\n\t\tconst repo = new UmbDataTypeDetailRepository(this);\r\n\r\n\t\tconst propertyTypes = await this.structure.getContentTypeProperties();\r\n\t\tconst valueDefinitions = await Promise.all(\r\n\t\t\tpropertyTypes.map(async (property) => {\r\n\t\t\t\t// TODO: Implement caching for data-type requests. [NL]\r\n\t\t\t\tconst dataType = (await repo.requestByUnique(property.dataType.unique)).data;\r\n\t\t\t\t// This means if its not loaded this will never resolve and the error below will never happen.\r\n\t\t\t\tif (!dataType) {\r\n\t\t\t\t\tthrow new Error(`DataType of \"${property.dataType.unique}\" not found.`);\r\n\t\t\t\t}\r\n\t\t\t\tif (!dataType.editorUiAlias) {\r\n\t\t\t\t\tthrow new Error(`DataType of \"${property.dataType.unique}\" did not have a editorUiAlias.`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\talias: property.alias,\r\n\t\t\t\t\tpropertyEditorUiAlias: dataType.editorUiAlias,\r\n\t\t\t\t\tpropertyEditorSchemaAlias: dataType.editorAlias,\r\n\t\t\t\t\tconfig: dataType.values,\r\n\t\t\t\t\ttypeArgs: {\r\n\t\t\t\t\t\tvariesByCulture: property.variesByCulture,\r\n\t\t\t\t\t\tvariesBySegment: property.variesBySegment,\r\n\t\t\t\t\t} as UmbPropertyTypePresetModelTypeModel,\r\n\t\t\t\t} as UmbPropertyTypePresetModel;\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tconst controller = new UmbPropertyValuePresetVariantBuilderController(this);\r\n\t\tcontroller.setCultures(cultures);\r\n\t\tif (segments) {\r\n\t\t\tcontroller.setSegments(segments);\r\n\t\t}\r\n\r\n\t\tconst presetValues = await controller.create(valueDefinitions);\r\n\r\n\t\t// Don't just set the values, as we could have some already populated from a blueprint.\r\n\t\t// If we have a value from both a blueprint and a preset, use the latter as priority.\r\n\t\tconst dataValues = [...data.values];\r\n\t\tfor (let index = 0; index < presetValues.length; index++) {\r\n\t\t\tconst presetValue = presetValues[index];\r\n\t\t\tconst variantId = UmbVariantId.Create(presetValue);\r\n\t\t\tconst matchingDataValueIndex = dataValues.findIndex((v) => v.alias === presetValue.alias && variantId.compare(v));\r\n\t\t\tif (matchingDataValueIndex > -1) {\r\n\t\t\t\tdataValues[matchingDataValueIndex] = presetValue;\r\n\t\t\t} else {\r\n\t\t\t\tdataValues.push(presetValue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdata.values = dataValues;\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the name of a variant\r\n\t * @param {UmbVariantId } [variantId] - The variant id\r\n\t * @returns { string | undefined} - The name of the variant\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic getName(variantId?: UmbVariantId): string | undefined {\r\n\t\tconst variants = this._data.getCurrent()?.variants;\r\n\t\tif (!variants) return;\r\n\t\tif (variantId) {\r\n\t\t\treturn variants.find((x) => variantId.compare(x))?.name;\r\n\t\t} else {\r\n\t\t\treturn variants[0]?.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set the name of a variant\r\n\t * @param {string} name - The name of the variant\r\n\t * @param {UmbVariantId} [variantId] - The variant id\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic setName(name: string, variantId?: UmbVariantId): void {\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix type error\r\n\t\tthis._data.updateVariantData(variantId ?? UmbVariantId.CreateInvariant(), { name });\r\n\t}\r\n\r\n\t/**\r\n\t * Get an observable for the name of a variant\r\n\t * @param {UmbVariantId} [variantId] - The variant id\r\n\t * @returns {Observable<string>} - The name of the variant\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic name(variantId?: UmbVariantId): Observable<string> {\r\n\t\treturn this._data.createObservablePartOfCurrent(\r\n\t\t\t(data) => data?.variants?.find((x) => variantId?.compare(x))?.name ?? '',\r\n\t\t);\r\n\t}\r\n\r\n\t/* Variants */\r\n\r\n\t/**\r\n\t * Get whether the content varies by culture\r\n\t * @returns { boolean | undefined } - If the content varies by culture\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic getVariesByCulture(): boolean | undefined {\r\n\t\treturn this.#variesByCulture;\r\n\t}\r\n\r\n\t/**\r\n\t * Get whether the content varies by segment\r\n\t * @returns {boolean | undefined} - If the content varies by segment\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic getVariesBySegment(): boolean | undefined {\r\n\t\treturn this.#variesBySegment;\r\n\t}\r\n\r\n\t/**\r\n\t * Get whether the content varies\r\n\t * @returns { boolean | undefined } - If the content varies\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic getVaries(): boolean | undefined {\r\n\t\treturn this.#varies;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the variant by the given variantId\r\n\t * @param {UmbVariantId} variantId - The variant id\r\n\t * @returns { Observable<VariantModelType | undefined> } - The variant or undefined if not found\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic variantById(variantId: UmbVariantId): Observable<VariantModelType | undefined> {\r\n\t\treturn this._data.createObservablePartOfCurrent((data) => data?.variants?.find((x) => variantId.compare(x)));\r\n\t}\r\n\r\n\t/**\r\n\t * Get the variant by the given variantId\r\n\t * @param {UmbVariantId} variantId - The variant id\r\n\t * @returns { VariantModelType | undefined } - The variant or undefined if not found\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic getVariant(variantId: UmbVariantId): VariantModelType | undefined {\r\n\t\treturn this._data.getCurrent()?.variants?.find((x) => variantId.compare(x));\r\n\t}\r\n\r\n\tpublic getVariants(): Array<VariantModelType> | undefined {\r\n\t\treturn this._data.getCurrent()?.variants;\r\n\t}\r\n\r\n\t/**\r\n\t * Observe the property type\r\n\t * @param {string} propertyId - The id of the property\r\n\t * @returns {Promise<Observable<UmbPropertyTypeModel | undefined>>} - An observable for the property type\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic async propertyStructureById(propertyId: string): Promise<Observable<UmbPropertyTypeModel | undefined>> {\r\n\t\treturn this.structure.propertyStructureById(propertyId);\r\n\t}\r\n\r\n\t/* Values */\r\n\r\n\t/**\r\n\t * Get the values of the content\r\n\t * @returns {Array<UmbElementValueModel> | undefined} - The values of the content\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic getValues(): Array<UmbElementValueModel> | undefined {\r\n\t\treturn this._data.getCurrent()?.values;\r\n\t}\r\n\r\n\t/**\r\n\t * @function propertyValueByAlias\r\n\t * @param {string} propertyAlias - The alias of the property\r\n\t * @param {UmbVariantId} variantId - The variant\r\n\t * @returns {Promise<Observable<ReturnType | undefined> | undefined>} - An observable for the value of the property\r\n\t * @description Get an Observable for the value of this property.\r\n\t */\r\n\tpublic async propertyValueByAlias<PropertyValueType = unknown>(\r\n\t\tpropertyAlias: string,\r\n\t\tvariantId?: UmbVariantId,\r\n\t): Promise<Observable<PropertyValueType | undefined> | undefined> {\r\n\t\treturn this._data.createObservablePartOfCurrent(\r\n\t\t\t(data) =>\r\n\t\t\t\tdata?.values?.find((x) => x?.alias === propertyAlias && (variantId ? variantId.compare(x) : true))\r\n\t\t\t\t\t?.value as PropertyValueType,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value of the property with the given alias and variantId.\r\n\t * @param {string} alias - The alias of the property\r\n\t * @param {UmbVariantId | undefined} variantId - The variant id of the property\r\n\t * @returns {ReturnType | undefined} The value or undefined if not set or found.\r\n\t */\r\n\tpublic getPropertyValue<ReturnType = unknown>(alias: string, variantId?: UmbVariantId) {\r\n\t\tconst currentData = this._data.getCurrent();\r\n\t\tif (currentData) {\r\n\t\t\tconst newDataSet = currentData.values?.find(\r\n\t\t\t\t(x) => x.alias === alias && (variantId ? variantId.compare(x) : true),\r\n\t\t\t);\r\n\t\t\treturn newDataSet?.value as ReturnType;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Set the value of the property with the given alias and variantId.\r\n\t * @template ValueType\r\n\t * @param {string} alias - The alias of the property\r\n\t * @param {ValueType} value - The value to set\r\n\t * @param {UmbVariantId} [variantId] - The variant id of the property\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic async setPropertyValue<ValueType = unknown>(alias: string, value: ValueType, variantId?: UmbVariantId) {\r\n\t\tthis.initiatePropertyValueChange();\r\n\t\tvariantId ??= UmbVariantId.CreateInvariant();\r\n\t\tconst property = await this.structure.getPropertyStructureByAlias(alias);\r\n\r\n\t\tif (!property) {\r\n\t\t\tthrow new Error(`Property alias \"${alias}\" not found.`);\r\n\t\t}\r\n\r\n\t\t// the getItemByUnique is a async method that first resolves once the item is loaded.\r\n\t\tconst editorAlias = (await this.#dataTypeItemManager.getItemByUnique(property.dataType.unique))\r\n\t\t\t.propertyEditorSchemaAlias;\r\n\t\t// This means if its not loaded this will never resolve and the error below will never happen.\r\n\t\tif (!editorAlias) {\r\n\t\t\tthrow new Error(`Editor Alias of \"${property.dataType.unique}\" not found.`);\r\n\t\t}\r\n\r\n\t\t// Notice the order of the properties is important for our JSON String Compare function. [NL]\r\n\t\tconst entry: UmbElementValueModel = {\r\n\t\t\teditorAlias,\r\n\t\t\t// Be aware that this solution is a bit magical, and based on a naming convention.\r\n\t\t\t// We might want to make this more flexible at some point and get the entityType from somewhere instead of constructing it here.\r\n\t\t\tentityType: `${this.getEntityType()}-property-value`,\r\n\t\t\t...variantId.toObject(),\r\n\t\t\talias,\r\n\t\t\tvalue,\r\n\t\t};\r\n\r\n\t\tconst currentData = this.getData();\r\n\t\tif (currentData) {\r\n\t\t\tconst values = appendToFrozenArray(\r\n\t\t\t\tcurrentData.values ?? [],\r\n\t\t\t\tentry,\r\n\t\t\t\t(x) => x.alias === alias && variantId!.compare(x),\r\n\t\t\t);\r\n\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t\t// @ts-ignore\r\n\t\t\t// TODO: fix type error\r\n\t\t\tthis._data.updateCurrent({ values });\r\n\r\n\t\t\t// TODO: Ideally we should move this type of logic to the act of saving [NL]\r\n\t\t\tthis._data.ensureVariantData(variantId);\r\n\t\t}\r\n\t\tthis.finishPropertyValueChange();\r\n\t}\r\n\r\n\tpublic initiatePropertyValueChange() {\r\n\t\tthis._data.initiatePropertyValueChange();\r\n\t}\r\n\r\n\tpublic finishPropertyValueChange = () => {\r\n\t\tthis._data.finishPropertyValueChange();\r\n\t};\r\n\r\n\t/**\r\n\t * Gets the changed variant ids\r\n\t * @returns {Array<UmbVariantId>} - The changed variant ids\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic getChangedVariants(): Array<UmbVariantId> {\r\n\t\treturn this._data.getChangedVariants();\r\n\t}\r\n\r\n\tprotected async _determineVariantOptions(): Promise<{\r\n\t\toptions: VariantOptionModelType[];\r\n\t\tselected: string[];\r\n\t}> {\r\n\t\tconst options = (await firstValueFrom(this.variantOptions)).filter((option) => option.segment === null);\r\n\r\n\t\tconst activeVariants = this.splitView.getActiveVariants();\r\n\t\tconst activeVariantIds = activeVariants.map((activeVariant) => UmbVariantId.Create(activeVariant));\r\n\t\tconst changedVariantIds = this._data.getChangedVariants();\r\n\t\tconst activeAndChangedVariantIds = [...activeVariantIds, ...changedVariantIds];\r\n\r\n\t\t// if a segment has been changed, we select the \"parent\" culture variant as it is currently only possible to select between cultures in the dialogs\r\n\t\tconst changedParentCultureVariantIds = activeAndChangedVariantIds\r\n\t\t\t.filter((x) => x.segment !== null)\r\n\t\t\t.map((x) => x.toSegmentInvariant());\r\n\r\n\t\tconst selectedVariantIds = [...activeAndChangedVariantIds, ...changedParentCultureVariantIds];\r\n\r\n\t\tconst writableSelectedVariantIds = selectedVariantIds.filter(\r\n\t\t\t(x) => this.readOnlyGuard.getIsPermittedForVariant(x) === false,\r\n\t\t);\r\n\r\n\t\t// Selected can contain entries that are not part of the options, therefor the modal filters selection based on options.\r\n\t\tconst selected = writableSelectedVariantIds\r\n\t\t\t.map((variantId) => variantId.toString())\r\n\t\t\t.filter((variantId, index, all) => all.indexOf(variantId) === index);\r\n\r\n\t\tconst uniqueSelected = [...new Set(selected)];\r\n\r\n\t\treturn {\r\n\t\t\toptions,\r\n\t\t\tselected: uniqueSelected,\r\n\t\t};\r\n\t}\r\n\r\n\tprotected _saveableVariantsFilter = (option: VariantOptionModelType) => {\r\n\t\treturn this.readOnlyGuard.getIsPermittedForVariant(UmbVariantId.Create(option)) === false;\r\n\t};\r\n\r\n\t/* validation */\r\n\t/**\r\n\t * Run the mandatory validation for the save data\r\n\t * @deprecated Use the public runMandatoryValidationForSaveData instead. Will be removed in v. 17.\r\n\t * @protected\r\n\t * @param {DetailModelType} saveData - The data to validate\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tprotected async _runMandatoryValidationForSaveData(saveData: DetailModelType, variantIds: Array<UmbVariantId> = []) {\r\n\t\tnew UmbDeprecation({\r\n\t\t\tremoveInVersion: '17',\r\n\t\t\tdeprecated: '_runMandatoryValidationForSaveData',\r\n\t\t\tsolution: 'Use the public runMandatoryValidationForSaveData instead.',\r\n\t\t}).warn();\r\n\t\tthis.runMandatoryValidationForSaveData(saveData, variantIds);\r\n\t}\r\n\r\n\t/**\r\n\t * Run the mandatory validation for the save data\r\n\t * @param {DetailModelType} saveData - The data to validate\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic async runMandatoryValidationForSaveData(saveData: DetailModelType, variantIds: Array<UmbVariantId> = []) {\r\n\t\t// Check that the data is valid before we save it.\r\n\t\t// If we vary by culture then we do not want to validate the invariant variant.\r\n\t\tif (this.getVariesByCulture()) {\r\n\t\t\tvariantIds = variantIds.filter((variant) => !variant.isCultureInvariant());\r\n\t\t}\r\n\t\tconst missingVariants = variantIds.filter((variant) => {\r\n\t\t\treturn !saveData.variants.some((y) => variant.compare(y));\r\n\t\t});\r\n\t\tif (missingVariants.length > 0) {\r\n\t\t\tthrow new Error('One or more selected variants have not been created');\r\n\t\t}\r\n\t\t// Check variants have a name:\r\n\t\tconst variantsWithoutAName = saveData.variants.filter((x) => !x.name);\r\n\t\tif (variantsWithoutAName.length > 0) {\r\n\t\t\tconst validationContext = await this.getContext(UMB_VALIDATION_CONTEXT);\r\n\t\t\tif (!validationContext) {\r\n\t\t\t\tthrow new Error('Validation context is missing');\r\n\t\t\t}\r\n\t\t\tvariantsWithoutAName.forEach((variant) => {\r\n\t\t\t\tvalidationContext.messages.addMessage(\r\n\t\t\t\t\t'client',\r\n\t\t\t\t\t`$.variants[${UmbDataPathVariantQuery(variant)}].name`,\r\n\t\t\t\t\tUMB_VALIDATION_EMPTY_LOCALIZATION_KEY,\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'All variants must have a name, these variants are missing a name: ' +\r\n\t\t\t\t\tvariantsWithoutAName.map((x) => (x.culture ?? 'invariant') + '_' + (x.segment ?? '')).join(', '),\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Ask the server to validate the save data\r\n\t * @param {DetailModelType} saveData - The data to validate\r\n\t * @param {Array<UmbVariantId>} variantIds - The variant ids to validate\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic async askServerToValidate(saveData: DetailModelType, variantIds: Array<UmbVariantId>) {\r\n\t\tif (this.#validationRepositoryClass) {\r\n\t\t\t// Create the validation repository if it does not exist. (we first create this here when we need it) [NL]\r\n\t\t\tthis.#validationRepository ??= new this.#validationRepositoryClass(this);\r\n\r\n\t\t\t// We ask the server first to get a concatenated set of validation messages. So we see both front-end and back-end validation messages [NL]\r\n\t\t\tif (this.getIsNew()) {\r\n\t\t\t\tconst parent = this._internal_getCreateUnderParent();\r\n\t\t\t\tif (!parent) throw new Error('Parent is not set');\r\n\t\t\t\tawait this.#serverValidation.askServerForValidation(\r\n\t\t\t\t\tsaveData,\r\n\t\t\t\t\tthis.#validationRepository.validateCreate(saveData, parent.unique),\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tawait this.#serverValidation.askServerForValidation(\r\n\t\t\t\t\tsaveData,\r\n\t\t\t\t\tthis.#validationRepository.validateSave(saveData, variantIds),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Request a submit of the workspace, in the case of Document Workspaces the validation does not need to be valid for this to be submitted.\r\n\t * @returns {Promise<void>} a promise which resolves once it has been completed.\r\n\t */\r\n\tpublic override requestSubmit() {\r\n\t\treturn this._handleSubmit();\r\n\t}\r\n\r\n\tpublic override submit() {\r\n\t\treturn this._handleSubmit();\r\n\t}\r\n\r\n\t/**\r\n\t * Request a save of the workspace, in the case of Document Workspaces the validation does not need to be valid for this to be saved.\r\n\t * @returns {Promise<void>} a promise which resolves once it has been completed.\r\n\t */\r\n\tpublic requestSave() {\r\n\t\treturn this._handleSave();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the data to save\r\n\t * @param {Array<UmbVariantId>} variantIds - The variant ids to save\r\n\t * @returns {Promise<DetailModelType>}  {Promise<DetailModelType>}\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic constructSaveData(variantIds: Array<UmbVariantId>): Promise<DetailModelType> {\r\n\t\treturn this._data.constructData(variantIds);\r\n\t}\r\n\r\n\tprotected async _handleSubmit() {\r\n\t\tawait this._handleSave();\r\n\t\tthis._closeModal();\r\n\t}\r\n\tprotected async _handleSave() {\r\n\t\tconst data = this.getData();\r\n\t\tif (!data) {\r\n\t\t\tthrow new Error('Data is missing');\r\n\t\t}\r\n\r\n\t\tconst { options, selected } = await this._determineVariantOptions();\r\n\r\n\t\tlet variantIds: Array<UmbVariantId> = [];\r\n\r\n\t\t// If there is only one variant, we don't need to open the modal.\r\n\t\tif (options.length === 0) {\r\n\t\t\tthrow new Error('No variants are available');\r\n\t\t} else if (options.length === 1) {\r\n\t\t\t// If only one option we will skip ahead and save the content with the only variant available:\r\n\t\t\tvariantIds.push(UmbVariantId.Create(options[0]));\r\n\t\t} else if (this.#saveModalToken) {\r\n\t\t\t// If there are multiple variants, we will open the modal to let the user pick which variants to save.\r\n\t\t\tconst result = await umbOpenModal(this, this.#saveModalToken, {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\toptions,\r\n\t\t\t\t\tpickableFilter: this._saveableVariantsFilter,\r\n\t\t\t\t},\r\n\t\t\t\tvalue: { selection: selected },\r\n\t\t\t}).catch(() => undefined);\r\n\r\n\t\t\tif (!result?.selection.length) return;\r\n\r\n\t\t\tvariantIds = result?.selection.map((x) => UmbVariantId.FromString(x)) ?? [];\r\n\t\t} else {\r\n\t\t\t/* If there are multiple variants but no modal token is set\r\n\t\t\twe will save the variants that would have been preselected in the modal.\r\n\t\t\tThese are based on the variants that have been edited */\r\n\t\t\tvariantIds = selected.map((x) => UmbVariantId.FromString(x));\r\n\t\t}\r\n\r\n\t\tconst saveData = await this.constructSaveData(variantIds);\r\n\r\n\t\tawait this.runMandatoryValidationForSaveData(saveData, variantIds);\r\n\t\tif (this.#validateOnSubmit) {\r\n\t\t\tawait this.askServerToValidate(saveData, variantIds);\r\n\t\t\tconst valid = await this._validateAndLog().then(\r\n\t\t\t\t() => true,\r\n\t\t\t\t() => false,\r\n\t\t\t);\r\n\t\t\tif (valid || this.#ignoreValidationResultOnSubmit) {\r\n\t\t\t\treturn this.performCreateOrUpdate(variantIds, saveData);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tawait this.performCreateOrUpdate(variantIds, saveData);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Perform the create or update of the content\r\n\t * @deprecated Use the public performCreateOrUpdate instead. Will be removed in v. 17.\r\n\t * @protected\r\n\t * @param {Array<UmbVariantId>} variantIds\r\n\t * @param {DetailModelType} saveData\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tprotected async _performCreateOrUpdate(variantIds: Array<UmbVariantId>, saveData: DetailModelType) {\r\n\t\tawait this.performCreateOrUpdate(variantIds, saveData);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform the create or update of the content\r\n\t * @param {Array<UmbVariantId>} variantIds - The variant ids to save\r\n\t * @param {DetailModelType} saveData - The data to save\r\n\t * @memberof UmbContentDetailWorkspaceContextBase\r\n\t */\r\n\tpublic async performCreateOrUpdate(variantIds: Array<UmbVariantId>, saveData: DetailModelType) {\r\n\t\tif (this.getIsNew()) {\r\n\t\t\tawait this.#create(variantIds, saveData);\r\n\t\t} else {\r\n\t\t\tawait this.#update(variantIds, saveData);\r\n\t\t}\r\n\t}\r\n\r\n\tasync #create(variantIds: Array<UmbVariantId>, saveData: DetailModelType) {\r\n\t\tif (!this._detailRepository) throw new Error('Detail repository is not set');\r\n\r\n\t\tconst parent = this._internal_getCreateUnderParent();\r\n\t\tif (!parent) throw new Error('Parent is not set');\r\n\r\n\t\tconst { data, error } = await this._detailRepository.create(saveData, parent.unique);\r\n\t\tif (!data || error) {\r\n\t\t\tthrow new Error('Error creating content');\r\n\t\t}\r\n\r\n\t\tconst variantIdsIncludingInvariant = [...variantIds, UmbVariantId.CreateInvariant()];\r\n\r\n\t\t// Only update the variants that was chosen to be saved:\r\n\t\tconst persistedData = this._data.getCurrent();\r\n\t\tconst newPersistedData = await new UmbMergeContentVariantDataController(this).process(\r\n\t\t\tpersistedData,\r\n\t\t\tdata,\r\n\t\t\tvariantIds,\r\n\t\t\tvariantIdsIncludingInvariant,\r\n\t\t);\r\n\t\tthis._data.setPersisted(newPersistedData);\r\n\r\n\t\t// Only update the variants that was chosen to be saved:\r\n\t\tconst currentData = this._data.getCurrent();\r\n\t\tconst newCurrentData = await new UmbMergeContentVariantDataController(this).process(\r\n\t\t\tcurrentData,\r\n\t\t\tdata,\r\n\t\t\tvariantIds,\r\n\t\t\tvariantIdsIncludingInvariant,\r\n\t\t);\r\n\t\tthis._data.setCurrent(newCurrentData);\r\n\t\tthis.setIsNew(false);\r\n\r\n\t\tconst eventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\tif (!eventContext) {\r\n\t\t\tthrow new Error('Event context is missing');\r\n\t\t}\r\n\t\tconst event = new UmbRequestReloadChildrenOfEntityEvent({\r\n\t\t\tentityType: parent.entityType,\r\n\t\t\tunique: parent.unique,\r\n\t\t});\r\n\t\teventContext.dispatchEvent(event);\r\n\t}\r\n\r\n\tasync #update(variantIds: Array<UmbVariantId>, saveData: DetailModelType) {\r\n\t\tif (!this._detailRepository) throw new Error('Detail repository is not set');\r\n\r\n\t\tconst { data, error } = await this._detailRepository.save(saveData);\r\n\t\tif (!data || error) {\r\n\t\t\tthrow new Error('Error saving content');\r\n\t\t}\r\n\r\n\t\tconst variantIdsIncludingInvariant = [...variantIds, UmbVariantId.CreateInvariant()];\r\n\r\n\t\t// Only update the variants that was chosen to be saved:\r\n\t\tconst persistedData = this._data.getCurrent();\r\n\t\tconst newPersistedData = await new UmbMergeContentVariantDataController(this).process(\r\n\t\t\tpersistedData,\r\n\t\t\tdata,\r\n\t\t\tvariantIds,\r\n\t\t\tvariantIdsIncludingInvariant,\r\n\t\t);\r\n\t\tthis._data.setPersisted(newPersistedData);\r\n\r\n\t\t// Only update the variants that was chosen to be saved:\r\n\t\tconst currentData = this._data.getCurrent();\r\n\t\tconst newCurrentData = await new UmbMergeContentVariantDataController(this).process(\r\n\t\t\tcurrentData,\r\n\t\t\tdata,\r\n\t\t\tvariantIds,\r\n\t\t\tvariantIdsIncludingInvariant,\r\n\t\t);\r\n\t\tthis._data.setCurrent(newCurrentData);\r\n\r\n\t\tconst unique = this.getUnique()!;\r\n\t\tconst entityType = this.getEntityType();\r\n\r\n\t\tconst eventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\tif (!eventContext) {\r\n\t\t\tthrow new Error('Event context is missing');\r\n\t\t}\r\n\t\tconst structureEvent = new UmbRequestReloadStructureForEntityEvent({ unique, entityType });\r\n\t\teventContext.dispatchEvent(structureEvent);\r\n\r\n\t\tconst updatedEvent = new UmbEntityUpdatedEvent({\r\n\t\t\tunique,\r\n\t\t\tentityType,\r\n\t\t\teventUnique: this._workspaceEventUnique,\r\n\t\t});\r\n\r\n\t\teventContext.dispatchEvent(updatedEvent);\r\n\t}\r\n\r\n\toverride resetState() {\r\n\t\tsuper.resetState();\r\n\t\tthis.structure.clear();\r\n\t\tthis.readOnlyGuard.clearRules();\r\n\t\tthis.propertyViewGuard.clearRules();\r\n\t\tthis.propertyWriteGuard.clearRules();\r\n\t\t// default:\r\n\t\tthis.propertyViewGuard.fallbackToPermitted();\r\n\t\tthis.propertyWriteGuard.fallbackToPermitted();\r\n\t}\r\n\r\n\tabstract getContentTypeUnique(): string | undefined;\r\n\r\n\tabstract createPropertyDatasetContext(\r\n\t\thost: UmbControllerHost,\r\n\t\tvariantId: UmbVariantId,\r\n\t): UmbContentPropertyDatasetContext<DetailModelType, ContentTypeDetailModelType, VariantModelType>;\r\n\r\n\tpublic override destroy(): void {\r\n\t\tthis.structure.destroy();\r\n\t\tthis.#languageRepository.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n"],"names":["UMB_CONTENT_HAS_PROPERTIES_WORKSPACE_CONDITION","UMB_CONTENT_SECTION_ALIAS","defaultCompareVariantMethod","a","b","UmbMergeContentVariantDataController","UmbControllerBase","persistedData","currentData","selectedVariants","variantsToStore","result","#processValues","#processVariants","persistedValues","draftValues","uniqueValues","n","i","self","v","value","persistedValue","x","UmbVariantId","draftValue","#processValue","editorAlias","manifest","umbExtensionsRegistry","api","createExtensionApi","newValue","persistedValuesHolder","values","valuesIndex","persistedVariantsHolder","persistedVariants","draftVariants","compare","persistedVariant","_UmbContentWorkspacePropertyElement_instances","observePropertyType_fn","checkViewGuard_fn","UmbContentWorkspacePropertyElement","UmbLitElement","__privateAdd","UMB_PROPERTY_DATASET_CONTEXT","datasetContext","UMB_CONTENT_WORKSPACE_CONTEXT","workspaceContext","__privateMethod","changedProperties","propertyVariantId","UmbDataPathPropertyValueQuery","write","nothing","html","propertyType","permitted","__decorateClass","property","state","customElement","valueObjectCompare","umbVariantObjectCompare","UmbElementWorkspaceDataManager","UmbEntityWorkspaceDataManager","#updateLock","#triggerPropertyValueChanges","vary","invariantVariantId","dataSegments","segment","variant","data","UmbContentWorkspaceDataManager","#variantScaffold","host","variantScaffold","variantId","update","#updateVariantData","#updateInvariantData","newVariants","appendToFrozenArray","persisted","current","changedVariants","jsonStringComparison","IsContentPropertyDatasetContext","context","UMB_CONTENT_PROPERTY_DATASET_CONTEXT","UmbContextToken","UmbElementPropertyDatasetContext","UmbContextBase","dataOwner","#propertyVariantIdMap","UmbBasicState","UmbBooleanState","#variantContext","UmbVariantContext","#variantId","#propertyVariantIdPromise","resolve","#propertyVariantIdPromiseResolver","isReadOnly","props","map","prop","#createPropertyVariantId","#propertiesObservable","mergeObservables","#mergeVariantIdsAndValues","r","f","propertyAlias","createObservablePart","classEqualMemoization","propVariantId","UmbContentPropertyDatasetContext","#pathAddendum","UmbRoutePathAddendumContext","#currentVariant","UmbObjectState","variantInfo","name","UmbContentDetailValidationPathTranslator","paths","umbScopeMapperForJsonPaths","UmbValidationPropertyPathTranslationController","umbQueryMapperForJsonPaths","entry","UmbDataPathVariantQuery","UmbContentDetailWorkspaceContextBase","UmbEntityDetailWorkspaceContextBase","args","UmbReadOnlyVariantGuardManager","UmbVariantPropertyGuardManager","#dataTypeItemManager","UmbDataTypeItemRepositoryManager","UmbWorkspaceSplitViewManager","#languageRepository","UmbLanguageCollectionRepository","#languages","UmbArrayState","#segmentRepository","UmbSegmentCollectionRepository","#segments","variantOption","#variantValidationContexts","#serverValidation","UmbServerModelValidatorContext","option","#saveModalToken","#contentTypePropertyName","contentTypeDetailRepository","#validationRepositoryClass","#validateOnSubmit","#ignoreValidationResultOnSubmit","UmbContentTypeStructureManager","variesByCulture","variesBySegment","variants","languages","segments","language","invariantCulture","segmentsForInvariantCulture","culture","segmentsForCulture","options","variantOptions","UmbValidationController","varies","#varies","#variesByCulture","#variesBySegment","dataTypeUniques","#loadSegments","#validationRepository","cultures","repo","UmbDataTypeDetailRepository","propertyTypes","valueDefinitions","dataType","controller","UmbPropertyValuePresetVariantBuilderController","presetValues","dataValues","index","presetValue","matchingDataValueIndex","propertyId","alias","firstValueFrom","activeVariantIds","activeVariant","changedVariantIds","activeAndChangedVariantIds","changedParentCultureVariantIds","selected","all","uniqueSelected","saveData","variantIds","UmbDeprecation","y","variantsWithoutAName","validationContext","UMB_VALIDATION_CONTEXT","UMB_VALIDATION_EMPTY_LOCALIZATION_KEY","parent","umbOpenModal","#create","#update","error","variantIdsIncludingInvariant","newPersistedData","newCurrentData","eventContext","UMB_ACTION_EVENT_CONTEXT","event","UmbRequestReloadChildrenOfEntityEvent","unique","entityType","structureEvent","UmbRequestReloadStructureForEntityEvent","updatedEvent","UmbEntityUpdatedEvent"],"mappings":"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"}