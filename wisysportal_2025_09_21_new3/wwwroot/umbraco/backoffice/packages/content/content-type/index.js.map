{"version":3,"file":"index.js","sources":["../../../../src/packages/content/content-type/conditions/constants.ts","../../../../src/packages/content/content-type/global-components/content-type-workspace-editor-header.element.ts","../../../../src/packages/content/content-type/global-components/input-content-type-collection-configuration/input-content-type-collection-configuration.element.ts","../../../../src/packages/content/content-type/repository/structure/content-type-structure-repository-base.ts","../../../../src/packages/content/content-type/repository/structure/content-type-structure-server-data-source-base.ts","../../../../src/packages/content/content-type/structure/content-type-structure-manager.class.ts","../../../../src/packages/content/content-type/workspace/content-type-workspace-context-base.ts"],"sourcesContent":["/**\r\n * Workspace Content Type Alias condition alias\r\n */\r\nexport const UMB_WORKSPACE_CONTENT_TYPE_ALIAS_CONDITION_ALIAS = 'Umb.Condition.WorkspaceContentTypeAlias';\r\n","import { UMB_CONTENT_TYPE_WORKSPACE_CONTEXT } from '../workspace/content-type-workspace.context-token.js';\r\nimport type { UmbInputWithAliasElement } from '@umbraco-cms/backoffice/components';\r\nimport { umbFocus, UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { css, html, customElement, state, ifDefined } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UMB_MODAL_MANAGER_CONTEXT } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_ICON_PICKER_MODAL } from '@umbraco-cms/backoffice/icon';\r\nimport type { UUITextareaElement } from '@umbraco-cms/backoffice/external/uui';\r\nimport { umbBindToValidation } from '@umbraco-cms/backoffice/validation';\r\n\r\n@customElement('umb-content-type-workspace-editor-header')\r\nexport class UmbContentTypeWorkspaceEditorHeaderElement extends UmbLitElement {\r\n\t@state()\r\n\tprivate _name?: string;\r\n\r\n\t@state()\r\n\tprivate _alias?: string;\r\n\r\n\t@state()\r\n\tprivate _description?: string;\r\n\r\n\t@state()\r\n\tprivate _icon?: string;\r\n\r\n\t@state()\r\n\tprivate _isNew?: boolean;\r\n\r\n\t#workspaceContext?: typeof UMB_CONTENT_TYPE_WORKSPACE_CONTEXT.TYPE;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.consumeContext(UMB_CONTENT_TYPE_WORKSPACE_CONTEXT, (instance) => {\r\n\t\t\tthis.#workspaceContext = instance;\r\n\t\t\tthis.#observeContentType();\r\n\t\t});\r\n\t}\r\n\r\n\t#observeContentType() {\r\n\t\tif (!this.#workspaceContext) return;\r\n\t\tthis.observe(this.#workspaceContext.name, (name) => (this._name = name), '_observeName');\r\n\t\tthis.observe(this.#workspaceContext.alias, (alias) => (this._alias = alias), '_observeAlias');\r\n\t\tthis.observe(\r\n\t\t\tthis.#workspaceContext.description,\r\n\t\t\t(description) => (this._description = description),\r\n\t\t\t'_observeDescription',\r\n\t\t);\r\n\t\tthis.observe(this.#workspaceContext.icon, (icon) => (this._icon = icon), '_observeIcon');\r\n\t\tthis.observe(this.#workspaceContext.isNew, (isNew) => (this._isNew = isNew), '_observeIsNew');\r\n\t}\r\n\r\n\tprivate async _handleIconClick() {\r\n\t\tconst [alias, color] = this._icon?.replace('color-', '')?.split(' ') ?? [];\r\n\t\tconst modalManager = await this.getContext(UMB_MODAL_MANAGER_CONTEXT);\r\n\t\tif (!modalManager) {\r\n\t\t\tthrow new Error('Modal manager not found.');\r\n\t\t}\r\n\t\tconst modalContext = modalManager.open(this, UMB_ICON_PICKER_MODAL, {\r\n\t\t\tvalue: {\r\n\t\t\t\ticon: alias,\r\n\t\t\t\tcolor: color,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tmodalContext?.onSubmit().then((saved) => {\r\n\t\t\tif (saved.icon && saved.color) {\r\n\t\t\t\tthis.#workspaceContext?.setIcon(`${saved.icon} color-${saved.color}`);\r\n\t\t\t} else if (saved.icon) {\r\n\t\t\t\tthis.#workspaceContext?.setIcon(saved.icon);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t#onNameAndAliasChange(event: InputEvent & { target: UmbInputWithAliasElement }) {\r\n\t\tthis.#workspaceContext?.setName(event.target.value ?? '');\r\n\t\tthis.#workspaceContext?.setAlias(event.target.alias ?? '');\r\n\t}\r\n\r\n\t#onDescriptionChange(event: InputEvent & { target: UUITextareaElement }) {\r\n\t\tthis.#workspaceContext?.setDescription(event.target.value.toString() ?? '');\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<div id=\"header\">\r\n\t\t\t\t<uui-button id=\"icon\" compact label=\"icon\" look=\"outline\" @click=${this._handleIconClick}>\r\n\t\t\t\t\t<umb-icon name=${ifDefined(this._icon)}></umb-icon>\r\n\t\t\t\t</uui-button>\r\n\r\n\t\t\t\t<div id=\"editors\">\r\n\t\t\t\t\t<umb-input-with-alias\r\n\t\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\t\tlabel=${this.localize.term('placeholders_entername')}\r\n\t\t\t\t\t\t.value=${this._name}\r\n\t\t\t\t\t\t.alias=${this._alias}\r\n\t\t\t\t\t\t?auto-generate-alias=${this._isNew}\r\n\t\t\t\t\t\t@change=${this.#onNameAndAliasChange}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t${umbBindToValidation(this, '$.name', this._name)}\r\n\t\t\t\t\t\t${umbFocus()}>\r\n\t\t\t\t\t</umb-input-with-alias>\r\n\r\n\t\t\t\t\t<uui-input\r\n\t\t\t\t\t\tid=\"description\"\r\n\t\t\t\t\t\t.label=${this.localize.term('placeholders_enterDescription')}\r\n\t\t\t\t\t\t.value=${this._description}\r\n\t\t\t\t\t\t.placeholder=${this.localize.term('placeholders_enterDescription')}\r\n\t\t\t\t\t\t@input=${this.#onDescriptionChange}></uui-input>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: contents;\r\n\t\t\t}\r\n\r\n\t\t\t#header {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex: 1 1 auto;\r\n\t\t\t\tgap: var(--uui-size-space-2);\r\n\t\t\t}\r\n\r\n\t\t\t#editors {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex: 1 1 auto;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t}\r\n\r\n\t\t\t#name {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tz-index: 1;\r\n\t\t\t}\r\n\r\n\t\t\t#description {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tmargin-top: 1px;\r\n\t\t\t\t--uui-input-height: var(--uui-size-8);\r\n\t\t\t\t--uui-input-border-color: transparent;\r\n\t\t\t}\r\n\r\n\t\t\t#description:hover {\r\n\t\t\t\t--uui-input-border-color: var(--uui-color-border);\r\n\t\t\t}\r\n\r\n\t\t\t#icon {\r\n\t\t\t\tfont-size: var(--uui-size-8);\r\n\t\t\t\theight: 60px;\r\n\t\t\t\twidth: 60px;\r\n\t\t\t\t--uui-button-border-color: transparent;\r\n\t\t\t\t--uui-button-border-color-hover: var(--uui-color-border);\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-content-type-workspace-editor-header': UmbContentTypeWorkspaceEditorHeaderElement;\r\n\t}\r\n}\r\n","import { html, customElement, property, css, state, nothing } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport {\r\n\tUMB_DATATYPE_WORKSPACE_MODAL,\r\n\tUMB_DATA_TYPE_ENTITY_TYPE,\r\n\tUMB_DATA_TYPE_PICKER_FLOW_DATA_TYPE_PICKER_MODAL,\r\n} from '@umbraco-cms/backoffice/data-type';\r\nimport { UmbModalRouteRegistrationController } from '@umbraco-cms/backoffice/router';\r\nimport { UmbFormControlMixin } from '@umbraco-cms/backoffice/validation';\r\n\r\n@customElement('umb-input-content-type-collection-configuration')\r\nexport class UmbInputContentTypeCollectionConfigurationElement extends UmbFormControlMixin<\r\n\tstring,\r\n\ttypeof UmbLitElement\r\n>(UmbLitElement) {\r\n\tprotected override getFormElement() {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t#dataTypeModal;\r\n\r\n\t#propertyEditorUiAlias = 'Umb.PropertyEditorUi.Collection';\r\n\r\n\t@state()\r\n\tprivate _dataTypePickerModalPath?: string;\r\n\r\n\t@property({ attribute: 'default-value' })\r\n\tdefaultValue?: string;\r\n\r\n\t#setValue(value: string | undefined) {\r\n\t\tthis.value = value;\r\n\t\tthis.dispatchEvent(new UmbChangeEvent());\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tnew UmbModalRouteRegistrationController(this, UMB_DATA_TYPE_PICKER_FLOW_DATA_TYPE_PICKER_MODAL)\r\n\t\t\t.addAdditionalPath(':uiAlias')\r\n\t\t\t.onSetup((routingInfo) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tpropertyEditorUiAlias: routingInfo.uiAlias,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.onSubmit((submitData) => {\r\n\t\t\t\tif (submitData?.createNewWithPropertyEditorUiAlias) {\r\n\t\t\t\t\tthis.#createDataType();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.#setValue(submitData?.dataTypeId ?? this.defaultValue ?? '');\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.observeRouteBuilder((routeBuilder) => {\r\n\t\t\t\tthis._dataTypePickerModalPath = routeBuilder({ uiAlias: this.#propertyEditorUiAlias });\r\n\t\t\t});\r\n\r\n\t\tthis.#dataTypeModal = new UmbModalRouteRegistrationController(this, UMB_DATATYPE_WORKSPACE_MODAL)\r\n\t\t\t.addAdditionalPath(':uiAlias')\r\n\t\t\t.onSetup((params) => {\r\n\t\t\t\treturn { data: { entityType: UMB_DATA_TYPE_ENTITY_TYPE, preset: { editorUiAlias: params.uiAlias } } };\r\n\t\t\t})\r\n\t\t\t.onSubmit((value) => {\r\n\t\t\t\tthis.#setValue(value?.unique ?? this.defaultValue ?? '');\r\n\t\t\t});\r\n\t}\r\n\r\n\t#clearDataType() {\r\n\t\tthis.#setValue(undefined);\r\n\t}\r\n\r\n\t#createDataType() {\r\n\t\tthis.#dataTypeModal.open(\r\n\t\t\t{ uiAlias: this.#propertyEditorUiAlias },\r\n\t\t\t`create/parent/${UMB_DATA_TYPE_ENTITY_TYPE}/null`,\r\n\t\t);\r\n\t}\r\n\r\n\t#editDataType() {\r\n\t\tthis.#dataTypeModal?.open({}, `edit/${this.value}`);\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn !this.value ? this.#renderCreate() : this.#renderConfigured();\r\n\t}\r\n\r\n\t#renderCreate() {\r\n\t\tif (!this._dataTypePickerModalPath) return nothing;\r\n\t\treturn html`\r\n\t\t\t<uui-button\r\n\t\t\t\tid=\"create-button\"\r\n\t\t\t\tcolor=\"default\"\r\n\t\t\t\tlook=\"placeholder\"\r\n\t\t\t\tlabel=${this.localize.term('collection_addCollectionConfiguration')}\r\n\t\t\t\thref=${this._dataTypePickerModalPath}></uui-button>\r\n\t\t`;\r\n\t}\r\n\r\n\t#renderConfigured() {\r\n\t\tif (!this.value || !this._dataTypePickerModalPath) return nothing;\r\n\t\treturn html`\r\n\t\t\t<uui-ref-list>\r\n\t\t\t\t<umb-ref-data-type standalone data-type-id=${this.value} @open=${this.#editDataType}>\r\n\t\t\t\t\t<uui-action-bar slot=\"actions\">\r\n\t\t\t\t\t\t<uui-button\r\n\t\t\t\t\t\t\tlabel=${this.localize.term('general_choose')}\r\n\t\t\t\t\t\t\thref=${this._dataTypePickerModalPath}></uui-button>\r\n\t\t\t\t\t\t<uui-button @click=${this.#clearDataType} label=${this.localize.term('general_remove')}></uui-button>\r\n\t\t\t\t\t</uui-action-bar>\r\n\t\t\t\t</umb-ref-data-type>\r\n\t\t\t</uui-ref-list>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tcss`\r\n\t\t\t#create-button {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-input-content-type-collection-configuration': UmbInputContentTypeCollectionConfigurationElement;\r\n\t}\r\n}\r\n","import type { UmbContentTypeStructureRepository } from './content-type-structure-repository.interface.js';\r\nimport type {\r\n\tUmbContentTypeStructureDataSource,\r\n\tUmbContentTypeStructureDataSourceConstructor,\r\n} from './content-type-structure-data-source.interface.js';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport abstract class UmbContentTypeStructureRepositoryBase<ItemType>\r\n\textends UmbRepositoryBase\r\n\timplements UmbContentTypeStructureRepository<ItemType>\r\n{\r\n\t#structureSource: UmbContentTypeStructureDataSource<ItemType>;\r\n\r\n\tconstructor(host: UmbControllerHost, structureSource: UmbContentTypeStructureDataSourceConstructor<ItemType>) {\r\n\t\tsuper(host);\r\n\t\tthis.#structureSource = new structureSource(host);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with the allowed children of a content type\r\n\t * @param {string} unique\r\n\t * @param parentContentUnique\r\n\t * @returns {*}\r\n\t * @memberof UmbContentTypeStructureRepositoryBase\r\n\t */\r\n\trequestAllowedChildrenOf(unique: string | null, parentContentUnique: string | null) {\r\n\t\treturn this.#structureSource.getAllowedChildrenOf(unique, parentContentUnique);\r\n\t}\r\n}\r\n","import type { UmbContentTypeStructureDataSource } from './content-type-structure-data-source.interface.js';\r\nimport type { UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport type { UmbPagedModel, UmbDataSourceResponse } from '@umbraco-cms/backoffice/repository';\r\n\r\n// Keep this type internal\r\ntype AllowedContentTypeBaseModel = {\r\n\tid: string;\r\n\tname: string;\r\n\tdescription?: string | null;\r\n\ticon?: string | null;\r\n};\r\n\r\nexport interface UmbContentTypeStructureServerDataSourceBaseArgs<\r\n\tServerItemType extends AllowedContentTypeBaseModel,\r\n\tClientItemType extends UmbEntityModel,\r\n> {\r\n\tgetAllowedChildrenOf: (\r\n\t\tunique: string | null,\r\n\t\tparentContentUnique: string | null,\r\n\t) => Promise<UmbDataSourceResponse<UmbPagedModel<ServerItemType>>>;\r\n\tmapper: (item: ServerItemType) => ClientItemType;\r\n}\r\n\r\nexport abstract class UmbContentTypeStructureServerDataSourceBase<\r\n\tServerItemType extends AllowedContentTypeBaseModel,\r\n\tClientItemType extends UmbEntityModel,\r\n> implements UmbContentTypeStructureDataSource<ClientItemType>\r\n{\r\n\t#host;\r\n\t#getAllowedChildrenOf;\r\n\t#mapper;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbContentTypeStructureServerDataSourceBase.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @param args\r\n\t * @memberof UmbItemServerDataSourceBase\r\n\t */\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\targs: UmbContentTypeStructureServerDataSourceBaseArgs<ServerItemType, ClientItemType>,\r\n\t) {\r\n\t\tthis.#host = host;\r\n\t\tthis.#getAllowedChildrenOf = args.getAllowedChildrenOf;\r\n\t\tthis.#mapper = args.mapper;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise with the allowed content types for the given unique\r\n\t * @param {string} unique\r\n\t * @param parentContentUnique\r\n\t * @returns {*}\r\n\t * @memberof UmbContentTypeStructureServerDataSourceBase\r\n\t */\r\n\tasync getAllowedChildrenOf(unique: string | null, parentContentUnique: string | null) {\r\n\t\tconst { data, error } = await tryExecute(this.#host, this.#getAllowedChildrenOf(unique, parentContentUnique));\r\n\r\n\t\tif (data) {\r\n\t\t\tconst items = data.items.map((item) => this.#mapper(item));\r\n\t\t\treturn { data: { items, total: data.total } };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n}\r\n","import type {\r\n\tUmbContentTypeModel,\r\n\tUmbPropertyContainerTypes,\r\n\tUmbPropertyTypeContainerModel,\r\n\tUmbPropertyTypeModel,\r\n} from '../types.js';\r\nimport {\r\n\tUmbRepositoryDetailsManager,\r\n\ttype UmbDetailRepository,\r\n\ttype UmbRepositoryResponse,\r\n\ttype UmbRepositoryResponseWithAsObservable,\r\n} from '@umbraco-cms/backoffice/repository';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbControllerHost, UmbController } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { MappingFunction } from '@umbraco-cms/backoffice/observable-api';\r\nimport {\r\n\tUmbArrayState,\r\n\tpartialUpdateFrozenArray,\r\n\tappendToFrozenArray,\r\n\tfilterFrozenArray,\r\n\tcreateObservablePart,\r\n} from '@umbraco-cms/backoffice/observable-api';\r\nimport { incrementString } from '@umbraco-cms/backoffice/utils';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbExtensionApiInitializer } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry, type ManifestRepository } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { firstValueFrom } from '@umbraco-cms/backoffice/external/rxjs';\r\n\r\ntype UmbPropertyTypeUnique = UmbPropertyTypeModel['unique'];\r\n\r\nconst UmbFilterDuplicateStrings = (value: string, index: number, array: Array<string>) =>\r\n\tarray.indexOf(value) === index;\r\n\r\n/**\r\n * Manages a structure of a Content Type and its properties and containers.\r\n * This loads and merges the structures of the Content Type and its inherited and composed Content Types.\r\n * To help manage the data, there is two helper classes:\r\n * - {@link UmbContentTypePropertyStructureHelper} for managing the structure of properties, optional of another container or root.\r\n * - {@link UmbContentTypeContainerStructureHelper} for managing the structure of containers, optional of another container or root.\r\n */\r\nexport class UmbContentTypeStructureManager<\r\n\tT extends UmbContentTypeModel = UmbContentTypeModel,\r\n> extends UmbControllerBase {\r\n\t#initResolver?: (result: T) => void;\r\n\t#initRejection?: (reason: any) => void;\r\n\t#init = new Promise<T>((resolve, reject) => {\r\n\t\tthis.#initResolver = resolve;\r\n\t\tthis.#initRejection = reject;\r\n\t});\r\n\r\n\t#editedTypes = new UmbArrayState<string, string>([], (x) => x);\r\n\r\n\t#repository?: UmbDetailRepository<T>;\r\n\t#initRepositoryResolver?: (repo: UmbDetailRepository<T>) => void;\r\n\r\n\t#initRepository = new Promise<UmbDetailRepository<T>>((resolve) => {\r\n\t\tif (this.#repository) {\r\n\t\t\tresolve(this.#repository);\r\n\t\t} else {\r\n\t\t\tthis.#initRepositoryResolver = resolve;\r\n\t\t}\r\n\t});\r\n\r\n\t#repoManager?: UmbRepositoryDetailsManager<T>;\r\n\r\n\tasync whenLoaded() {\r\n\t\tawait this.#init;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t#ownerContentTypeUnique?: string;\r\n\t#contentTypeObservers = new Array<UmbController>();\r\n\r\n\t#contentTypes = new UmbArrayState<T>([], (x) => x.unique);\r\n\treadonly contentTypes = this.#contentTypes.asObservable();\r\n\treadonly ownerContentType = this.#contentTypes.asObservablePart((x) =>\r\n\t\tx.find((y) => y.unique === this.#ownerContentTypeUnique),\r\n\t);\r\n\treadonly ownerContentTypeAlias = createObservablePart(this.ownerContentType, (x) => x?.alias);\r\n\treadonly ownerContentTypeName = createObservablePart(this.ownerContentType, (x) => x?.name);\r\n\treadonly ownerContentTypeCompositions = createObservablePart(this.ownerContentType, (x) => x?.compositions);\r\n\r\n\treadonly contentTypeCompositions = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\treturn contentTypes.flatMap((x) => x.compositions ?? []);\r\n\t});\r\n\tasync getContentTypeCompositions() {\r\n\t\treturn await this.observe(this.contentTypeCompositions).asPromise();\r\n\t}\r\n\tasync getOwnerContentTypeCompositions() {\r\n\t\treturn await this.observe(this.ownerContentTypeCompositions).asPromise();\r\n\t}\r\n\treadonly #contentTypeContainers = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\treturn contentTypes.flatMap((x) => x.containers ?? []);\r\n\t});\r\n\treadonly contentTypeProperties = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\treturn contentTypes.flatMap((x) => x.properties ?? []);\r\n\t});\r\n\tasync getContentTypeProperties() {\r\n\t\treturn await this.observe(this.contentTypeProperties).asPromise();\r\n\t}\r\n\treadonly contentTypeDataTypeUniques = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\treturn contentTypes\r\n\t\t\t.flatMap((x) => x.properties?.map((p) => p.dataType.unique) ?? [])\r\n\t\t\t.filter(UmbFilterDuplicateStrings);\r\n\t});\r\n\treadonly contentTypeHasProperties = this.#contentTypes.asObservablePart((contentTypes) => {\r\n\t\treturn contentTypes.some((x) => x.properties.length > 0);\r\n\t});\r\n\treadonly contentTypePropertyAliases = createObservablePart(this.contentTypeProperties, (properties) =>\r\n\t\tproperties.map((x) => x.alias),\r\n\t);\r\n\treadonly contentTypeUniques = this.#contentTypes.asObservablePart((x) => x.map((y) => y.unique));\r\n\treadonly contentTypeAliases = this.#contentTypes.asObservablePart((x) => x.map((y) => y.alias));\r\n\r\n\treadonly variesByCulture = createObservablePart(this.ownerContentType, (x) => x?.variesByCulture);\r\n\treadonly variesBySegment = createObservablePart(this.ownerContentType, (x) => x?.variesBySegment);\r\n\r\n\tcontainerById(id: string) {\r\n\t\treturn createObservablePart(this.#contentTypeContainers, (x) => x.find((y) => y.id === id));\r\n\t}\r\n\r\n\tconstructor(host: UmbControllerHost, typeRepository: UmbDetailRepository<T> | string) {\r\n\t\tsuper(host);\r\n\r\n\t\tif (typeof typeRepository === 'string') {\r\n\t\t\tthis.#observeRepository(typeRepository);\r\n\t\t} else {\r\n\t\t\tthis.#repository = typeRepository;\r\n\t\t\tthis.#initRepositoryResolver?.(typeRepository);\r\n\t\t}\r\n\r\n\t\tthis.#initRepository.then(() => {\r\n\t\t\tif (!this.#repository) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t'Content Type Structure Manager failed cause it could not initialize or receive the Content Type Detail Repository.',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tthis.#repoManager = new UmbRepositoryDetailsManager(this, typeRepository);\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#repoManager.entries,\r\n\t\t\t\t(entries) => {\r\n\t\t\t\t\t// Prevent updating once that are have edited here.\r\n\t\t\t\t\tconst entriesToBeUpdated = entries.filter(\r\n\t\t\t\t\t\t(x) => !(this.#editedTypes.getHasOne(x.unique) && this.#contentTypes.getHasOne(x.unique)),\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Remove entries based on no-longer existing uniques:\r\n\t\t\t\t\tconst entriesToBeRemoved = this.#contentTypes\r\n\t\t\t\t\t\t.getValue()\r\n\t\t\t\t\t\t.filter((entry) => !entries.some((x) => x.unique === entry.unique))\r\n\t\t\t\t\t\t.map((x) => x.unique);\r\n\r\n\t\t\t\t\tthis.#contentTypes.mute();\r\n\t\t\t\t\tthis.#contentTypes.remove(entriesToBeRemoved);\r\n\t\t\t\t\tthis.#contentTypes.append(entriesToBeUpdated);\r\n\t\t\t\t\tthis.#contentTypes.unmute();\r\n\t\t\t\t},\r\n\t\t\t\tnull,\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\t// Observe all Content Types compositions: [NL]\r\n\t\tthis.observe(\r\n\t\t\tthis.contentTypeCompositions,\r\n\t\t\t(contentTypeCompositions) => {\r\n\t\t\t\tthis.#loadContentTypeCompositions(contentTypeCompositions);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * loadType will load the ContentType and all inherited and composed ContentTypes.\r\n\t * This will give us all the structure for properties and containers.\r\n\t * @param {string} unique - The unique of the ContentType to load.\r\n\t * @returns {Promise} - Promise resolved\r\n\t */\r\n\tpublic async loadType(unique: string): Promise<UmbRepositoryResponseWithAsObservable<T | undefined>> {\r\n\t\tif (this.#ownerContentTypeUnique === unique) {\r\n\t\t\t// Its the same, but we do not know if its done loading jet, so we will wait for the load promise to finish. [NL]\r\n\t\t\tawait this.#init;\r\n\t\t\treturn { data: this.getOwnerContentType(), asObservable: () => this.ownerContentType };\r\n\t\t}\r\n\t\tawait this.#initRepository;\r\n\t\tthis.clear();\r\n\t\tthis.#ownerContentTypeUnique = unique;\r\n\t\tif (!unique) {\r\n\t\t\tthis.#initRejection?.(`Content Type structure manager could not load: ${unique}`);\r\n\t\t\treturn Promise.reject(\r\n\t\t\t\tnew Error('The unique identifier is missing. A valid unique identifier is required to load the content type.'),\r\n\t\t\t);\r\n\t\t}\r\n\t\tthis.#repoManager!.setUniques([unique]);\r\n\t\tconst result = await this.observe(this.#repoManager!.entryByUnique(unique)).asPromise();\r\n\t\tthis.#initResolver?.(result);\r\n\t\tawait this.#init;\r\n\t\treturn { data: result, asObservable: () => this.ownerContentType };\r\n\t}\r\n\r\n\tpublic async createScaffold(preset?: Partial<T>): Promise<UmbRepositoryResponse<T>> {\r\n\t\tawait this.#initRepository;\r\n\t\tthis.clear();\r\n\r\n\t\tconst repsonse = await this.#repository!.createScaffold(preset);\r\n\t\tconst { data } = repsonse;\r\n\t\tif (!data) {\r\n\t\t\tthis.#initRejection?.(`Content Type structure manager could not create scaffold`);\r\n\t\t\treturn { error: repsonse.error };\r\n\t\t}\r\n\r\n\t\tthis.#ownerContentTypeUnique = data.unique;\r\n\r\n\t\t// Add the new content type to the list of content types, this holds our draft state of this scaffold.\r\n\t\tthis.#contentTypes.appendOne(data);\r\n\t\t// Make a entry in the repo manager:\r\n\t\tthis.#repoManager!.addEntry(data);\r\n\t\tthis.#initResolver?.(data);\r\n\t\treturn repsonse;\r\n\t}\r\n\r\n\t/**\r\n\t * Save the owner content type. Notice this is for a Content Type that is already stored on the server.\r\n\t * @returns {Promise} - A promise that will be resolved when the content type is saved.\r\n\t */\r\n\tpublic async save(): Promise<T> {\r\n\t\tawait this.#initRepository;\r\n\t\tconst contentType = this.getOwnerContentType();\r\n\t\tif (!contentType || !contentType.unique) throw new Error('Could not find the Content Type to save');\r\n\r\n\t\tconst { error, data } = await this.#repository!.save(contentType);\r\n\t\tif (error || !data) {\r\n\t\t\tthrow error?.message ?? 'Repository did not return data after save.';\r\n\t\t}\r\n\r\n\t\t// Update state with latest version:\r\n\t\tthis.#contentTypes.updateOne(contentType.unique, data);\r\n\r\n\t\t// Update entry in the repo manager:\r\n\t\tthis.#repoManager!.addEntry(data);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Create the owner content type. Notice this is for a Content Type that is NOT already stored on the server.\r\n\t * @param {string | null} parentUnique - The unique of the parent content type\r\n\t * @returns {Promise} - a promise that is resolved when the content type has been created.\r\n\t */\r\n\tpublic async create(parentUnique: string | null): Promise<T> {\r\n\t\tawait this.#initRepository;\r\n\t\tconst contentType = this.getOwnerContentType();\r\n\t\tif (!contentType || !contentType.unique) {\r\n\t\t\tthrow new Error('Could not find the Content Type to create');\r\n\t\t}\r\n\t\tconst { error, data } = await this.#repository!.create(contentType, parentUnique);\r\n\t\tif (error || !data) {\r\n\t\t\tthrow error?.message ?? 'Repository did not return data after create.';\r\n\t\t}\r\n\r\n\t\t// Update state with latest version:\r\n\t\tthis.#contentTypes.updateOne(contentType.unique, data);\r\n\r\n\t\t// Let the repo manager know about this new unique, so it can be loaded:\r\n\t\tthis.#repoManager!.addEntry(data);\r\n\t\treturn data;\r\n\t}\r\n\r\n\tasync #loadContentTypeCompositions(contentTypeCompositions: T['compositions'] | undefined) {\r\n\t\t// Important to wait a JS-cycle, cause this is called by an observation of a state and this results in setting the value for the state(potentially in the same JS-cycle) then we need to make sure we don't trigger a new update before the old subscription chain is completed. [NL]\r\n\t\tawait Promise.resolve();\r\n\t\tconst ownerUnique = this.getOwnerContentTypeUnique();\r\n\t\tif (!ownerUnique) return;\r\n\t\tconst compositionUniques = contentTypeCompositions?.map((x) => x.contentType.unique) ?? [];\r\n\t\tconst newUniques = [ownerUnique, ...compositionUniques];\r\n\t\tthis.#contentTypes.filter((x) => newUniques.includes(x.unique));\r\n\t\tthis.#repoManager!.setUniques(newUniques);\r\n\t}\r\n\r\n\t/** Public methods for consuming structure: */\r\n\r\n\townerContentTypeObservablePart<R>(mappingFunction: MappingFunction<T | undefined, R>) {\r\n\t\treturn createObservablePart(this.ownerContentType, mappingFunction);\r\n\t}\r\n\r\n\tgetOwnerContentType() {\r\n\t\treturn this.#contentTypes.getValue().find((y) => y.unique === this.#ownerContentTypeUnique);\r\n\t}\r\n\r\n\tgetOwnerContentTypeUnique() {\r\n\t\treturn this.#ownerContentTypeUnique;\r\n\t}\r\n\r\n\tgetVariesByCulture() {\r\n\t\tconst ownerContentType = this.getOwnerContentType();\r\n\t\treturn ownerContentType?.variesByCulture;\r\n\t}\r\n\tgetVariesBySegment() {\r\n\t\tconst ownerContentType = this.getOwnerContentType();\r\n\t\treturn ownerContentType?.variesBySegment;\r\n\t}\r\n\r\n\t/**\r\n\t * Figure out if any of the Content Types has a Property.\r\n\t * @returns {boolean} - true if any of the Content Type in this composition has a Property.\r\n\t */\r\n\tgetHasProperties() {\r\n\t\treturn this.#contentTypes.getValue().some((y) => y.properties.length > 0);\r\n\t}\r\n\r\n\tupdateOwnerContentType(entry: Partial<T>) {\r\n\t\tthis.#editedTypes.appendOne(this.#ownerContentTypeUnique!);\r\n\t\tthis.#contentTypes.updateOne(this.#ownerContentTypeUnique, entry);\r\n\t}\r\n\r\n\tgetContentTypes() {\r\n\t\treturn this.#contentTypes.getValue();\r\n\t}\r\n\tgetContentTypeUniques() {\r\n\t\treturn this.#contentTypes.getValue().map((x) => x.unique);\r\n\t}\r\n\tgetContentTypeAliases() {\r\n\t\treturn this.#contentTypes.getValue().map((x) => x.alias);\r\n\t}\r\n\r\n\t// TODO: We could move the actions to another class?\r\n\r\n\t/**\r\n\t * Ensure a container exists for a specific Content Type. Otherwise clone it.\r\n\t * @param {string} containerId - The container to ensure exists on the given ContentType.\r\n\t * @param {string} contentTypeUnique - The content type to ensure the container for.\r\n\t * @returns {Promise<UmbPropertyTypeContainerModel | undefined>} - The container found or created for the owner ContentType.\r\n\t */\r\n\tasync ensureContainerOf(\r\n\t\tcontainerId: string,\r\n\t\tcontentTypeUnique: string,\r\n\t): Promise<UmbPropertyTypeContainerModel | undefined> {\r\n\t\tawait this.#init;\r\n\t\tconst contentType = this.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique);\r\n\t\tif (!contentType) {\r\n\t\t\tthrow new Error('Could not find the Content Type to ensure containers for');\r\n\t\t}\r\n\t\tconst container = contentType?.containers?.find((x) => x.id === containerId);\r\n\t\tif (!container) {\r\n\t\t\treturn this.cloneContainerTo(containerId, contentTypeUnique);\r\n\t\t}\r\n\t\treturn container;\r\n\t}\r\n\r\n\t/**\r\n\t * Clone a container to a specific Content Type.\r\n\t * @param {string} containerId - The container to clone, assuming it does not already exist on the given Content Type.\r\n\t * @param {string} toContentTypeUnique - The content type to clone to.\r\n\t * @returns {Promise<UmbPropertyTypeContainerModel | undefined>} - The container cloned or found for the owner ContentType.\r\n\t */\r\n\tasync cloneContainerTo(\r\n\t\tcontainerId: string,\r\n\t\ttoContentTypeUnique?: string,\r\n\t): Promise<UmbPropertyTypeContainerModel | undefined> {\r\n\t\tawait this.#init;\r\n\t\ttoContentTypeUnique = toContentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.#editedTypes.appendOne(toContentTypeUnique);\r\n\r\n\t\t// Find container.\r\n\t\tconst container = (await firstValueFrom(this.#contentTypeContainers)).find((x) => x.id === containerId);\r\n\t\tif (!container) throw new Error('Container to clone was not found');\r\n\r\n\t\tconst clonedContainer: UmbPropertyTypeContainerModel = {\r\n\t\t\t...container,\r\n\t\t\tid: UmbId.new(),\r\n\t\t};\r\n\r\n\t\tif (container.parent) {\r\n\t\t\t// Investigate parent container. (See if we have one that matches if not, then clone it.)\r\n\t\t\tconst parentContainer = await this.ensureContainerOf(container.parent.id, toContentTypeUnique);\r\n\t\t\tif (!parentContainer) {\r\n\t\t\t\tthrow new Error('Parent container for cloning could not be found or created');\r\n\t\t\t}\r\n\t\t\t// Clone container.\r\n\t\t\tclonedContainer.parent = { id: parentContainer.id };\r\n\t\t}\r\n\t\t// Spread containers, so we can append to it, and then update the specific content-type with the new set of containers: [NL]\r\n\t\t// Correction the spread is removed now, cause we do a filter: [NL]\r\n\t\t// And then we remove the existing one, to have the more local one replacing it. [NL]\r\n\t\tconst containers = [\r\n\t\t\t...(this.#contentTypes.getValue().find((x) => x.unique === toContentTypeUnique)?.containers ?? []),\r\n\t\t];\r\n\r\n\t\tcontainers.push(clonedContainer);\r\n\r\n\t\tthis.#contentTypes.updateOne(toContentTypeUnique, { containers } as Partial<T>);\r\n\r\n\t\treturn clonedContainer;\r\n\t}\r\n\r\n\tensureContainerNames(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\ttype: UmbPropertyContainerTypes,\r\n\t\tparentId: string | null = null,\r\n\t) {\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.getOwnerContainers(type, parentId)?.forEach((container) => {\r\n\t\t\tif (container.name === '') {\r\n\t\t\t\tconst newName = 'Unnamed';\r\n\t\t\t\tthis.#editedTypes.appendOne(contentTypeUnique);\r\n\t\t\t\tthis.updateContainer(null, container.id, {\r\n\t\t\t\t\tname: this.makeContainerNameUniqueForOwnerContentType(container.id, newName, type, parentId) ?? newName,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tasync createContainer(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\tparentId: string | null = null,\r\n\t\ttype: UmbPropertyContainerTypes = 'Group',\r\n\t\tsortOrder?: number,\r\n\t): Promise<UmbPropertyTypeContainerModel> {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.#editedTypes.appendOne(contentTypeUnique);\r\n\r\n\t\tif (parentId) {\r\n\t\t\tconst duplicatedParentContainer = await this.ensureContainerOf(parentId, contentTypeUnique);\r\n\t\t\tif (!duplicatedParentContainer) {\r\n\t\t\t\tthrow new Error('Parent container for creating a new container could not be found or created');\r\n\t\t\t}\r\n\t\t\tparentId = duplicatedParentContainer.id;\r\n\t\t}\r\n\r\n\t\tconst container: UmbPropertyTypeContainerModel = {\r\n\t\t\tid: UmbId.new(),\r\n\t\t\tparent: parentId ? { id: parentId } : null,\r\n\t\t\tname: '',\r\n\t\t\ttype: type,\r\n\t\t\tsortOrder: sortOrder ?? 0,\r\n\t\t};\r\n\r\n\t\treturn this.insertContainer(contentTypeUnique, container);\r\n\t}\r\n\r\n\tasync insertContainer(contentTypeUnique: string | null, container: UmbPropertyTypeContainerModel) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tconst newContainer = { ...container };\r\n\t\tconst type = newContainer.type;\r\n\t\tconst parentId = newContainer.parent?.id ?? null;\r\n\r\n\t\t// If we have a parent, we need to ensure it exists, and then update the parent property with the new container id.\r\n\t\tif (newContainer.parent) {\r\n\t\t\tconst parentContainer = await this.ensureContainerOf(newContainer.parent.id, contentTypeUnique);\r\n\t\t\tif (!parentContainer) {\r\n\t\t\t\tthrow new Error('Container for inserting property could not be found or created');\r\n\t\t\t}\r\n\t\t\tnewContainer.parent.id = parentContainer.id;\r\n\t\t}\r\n\r\n\t\t// Ensure\r\n\t\tthis.ensureContainerNames(contentTypeUnique, type, parentId);\r\n\r\n\t\tconst frozenContainers =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.containers ?? [];\r\n\r\n\t\tconst containers = appendToFrozenArray(frozenContainers, newContainer, (x) => x.id === newContainer.id);\r\n\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { containers } as Partial<T>);\r\n\r\n\t\treturn newContainer;\r\n\t}\r\n\r\n\tmakeEmptyContainerName(\r\n\t\tcontainerId: string,\r\n\t\tcontainerType: UmbPropertyContainerTypes,\r\n\t\tparentId: string | null = null,\r\n\t): string {\r\n\t\treturn (\r\n\t\t\tthis.makeContainerNameUniqueForOwnerContentType(containerId, 'Unnamed', containerType, parentId) ?? 'Unnamed'\r\n\t\t);\r\n\t}\r\n\tmakeContainerNameUniqueForOwnerContentType(\r\n\t\tcontainerId: string,\r\n\t\tnewName: string,\r\n\t\tcontainerType: UmbPropertyContainerTypes,\r\n\t\tparentId: string | null = null,\r\n\t) {\r\n\t\tconst ownerRootContainers = this.getOwnerContainers(containerType, parentId); //getRootContainers() can't differentiates between compositions and locals\r\n\t\tif (!ownerRootContainers) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet changedName = newName;\r\n\t\twhile (ownerRootContainers.find((con) => con.name === changedName && con.id !== containerId)) {\r\n\t\t\tchangedName = incrementString(changedName);\r\n\t\t}\r\n\r\n\t\treturn changedName === newName ? null : changedName;\r\n\t}\r\n\r\n\tasync updateContainer(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\tcontainerId: string,\r\n\t\tpartialUpdate: Partial<UmbPropertyTypeContainerModel>,\r\n\t) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.#editedTypes.appendOne(contentTypeUnique);\r\n\r\n\t\t/*\r\n\t\t// If we have a container, we need to ensure it exists, and then update the container with the new parent id.\r\n\t\tif (containerId) {\r\n\t\t\tconst container = await this.ensureContainerOf(containerId, contentTypeUnique);\r\n\t\t\tif (!container) {\r\n\t\t\t\tthrow new Error('Container for inserting property could not be found or created');\r\n\t\t\t}\r\n\t\t\t// Correct containerId to the local one: [NL]\r\n\t\t\tcontainerId = container.id;\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tconst frozenContainers =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.containers ?? [];\r\n\r\n\t\tconst ownerContainer = frozenContainers.find((x) => x.id === containerId);\r\n\t\tif (!ownerContainer) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t'We do not have this container on the requested id, we should clone the container and append the change to it. [NL]',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst containers: UmbPropertyTypeContainerModel[] = partialUpdateFrozenArray(\r\n\t\t\tfrozenContainers,\r\n\t\t\tpartialUpdate,\r\n\t\t\t(x) => x.id === containerId,\r\n\t\t);\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t\t// @ts-ignore\r\n\t\t// TODO: fix TS partial complaint\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { containers });\r\n\t}\r\n\r\n\tasync removeContainer(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\tcontainerId: string | null = null,\r\n\t\targs?: { preventRemovingProperties?: boolean },\r\n\t): Promise<void> {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.#editedTypes.appendOne(contentTypeUnique);\r\n\r\n\t\tconst contentType = this.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique);\r\n\t\tif (!contentType) {\r\n\t\t\tthrow new Error('Could not find the Content Type to remove container from');\r\n\t\t}\r\n\t\tconst frozenContainers = contentType.containers ?? [];\r\n\t\tconst removedContainerIds = frozenContainers\r\n\t\t\t.filter((x) => x.id === containerId || x.parent?.id === containerId)\r\n\t\t\t.map((x) => x.id);\r\n\t\tconst containers = frozenContainers.filter((x) => x.id !== containerId && x.parent?.id !== containerId);\r\n\r\n\t\tconst updates: Partial<T> = { containers } as Partial<T>;\r\n\r\n\t\tif (args?.preventRemovingProperties !== true) {\r\n\t\t\tupdates.properties = contentType.properties.filter((x) =>\r\n\t\t\t\tx.container ? !removedContainerIds.some((ids) => ids === x.container?.id) : true,\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, updates);\r\n\t}\r\n\r\n\tasync insertProperty(contentTypeUnique: string | null, property: UmbPropertyTypeModel) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.#editedTypes.appendOne(contentTypeUnique);\r\n\r\n\t\t// If we have a container, we need to ensure it exists, and then update the container with the new parent id. [NL]\r\n\t\tif (property.container) {\r\n\t\t\tthis.#contentTypes.mute();\r\n\t\t\tconst container = await this.ensureContainerOf(property.container.id, contentTypeUnique);\r\n\t\t\tthis.#contentTypes.unmute();\r\n\t\t\tif (!container) {\r\n\t\t\t\tthrow new Error('Container for inserting property could not be found or created');\r\n\t\t\t}\r\n\t\t\t// Unfreeze object, while settings container.id\r\n\t\t\tproperty = { ...property, container: { id: container.id } };\r\n\t\t}\r\n\r\n\t\tif (property.sortOrder === undefined) {\r\n\t\t\tproperty.sortOrder = 0;\r\n\t\t}\r\n\r\n\t\tconst frozenProperties =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.properties ?? [];\r\n\r\n\t\tconst properties = appendToFrozenArray(frozenProperties, property, (x) => x.unique === property.unique);\r\n\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { properties } as Partial<T>);\r\n\t}\r\n\r\n\tasync removeProperty(contentTypeUnique: string | null, propertyUnique: string) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.#editedTypes.appendOne(contentTypeUnique);\r\n\r\n\t\tconst frozenProperties =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.properties ?? [];\r\n\r\n\t\tconst properties = filterFrozenArray(frozenProperties, (x) => x.unique !== propertyUnique);\r\n\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { properties } as Partial<T>);\r\n\t}\r\n\r\n\tasync updateProperty(\r\n\t\tcontentTypeUnique: string | null,\r\n\t\tpropertyUnique: string,\r\n\t\tpartialUpdate: Partial<UmbPropertyTypeModel>,\r\n\t) {\r\n\t\tawait this.#init;\r\n\t\tcontentTypeUnique = contentTypeUnique ?? this.#ownerContentTypeUnique!;\r\n\t\tthis.#editedTypes.appendOne(contentTypeUnique);\r\n\r\n\t\tconst frozenProperties =\r\n\t\t\tthis.#contentTypes.getValue().find((x) => x.unique === contentTypeUnique)?.properties ?? [];\r\n\t\tconst properties = partialUpdateFrozenArray(frozenProperties, partialUpdate, (x) => x.unique === propertyUnique);\r\n\r\n\t\tthis.#contentTypes.updateOne(contentTypeUnique, { properties } as Partial<T>);\r\n\t}\r\n\r\n\t// TODO: Refactor: These property methods, should maybe be named without structure in their name.\r\n\tasync propertyStructureById(propertyUnique: string) {\r\n\t\tawait this.#init;\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\tfor (const docType of docTypes) {\r\n\t\t\t\tconst foundProp = docType.properties?.find((property) => property.unique === propertyUnique);\r\n\t\t\t\tif (foundProp) {\r\n\t\t\t\t\treturn foundProp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t});\r\n\t}\r\n\tasync propertyStructureByAlias(propertyAlias: string) {\r\n\t\tawait this.#init;\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\tfor (const docType of docTypes) {\r\n\t\t\t\tconst foundProp = docType.properties?.find((property) => property.alias === propertyAlias);\r\n\t\t\t\tif (foundProp) {\r\n\t\t\t\t\treturn foundProp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t});\r\n\t}\r\n\r\n\tasync getPropertyStructureById(propertyUnique: string) {\r\n\t\tawait this.#init;\r\n\t\tfor (const docType of this.#contentTypes.getValue()) {\r\n\t\t\tconst foundProp = docType.properties?.find((property) => property.unique === propertyUnique);\r\n\t\t\tif (foundProp) {\r\n\t\t\t\treturn foundProp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tasync getOwnerPropertyById(propertyUnique: string | null): Promise<UmbPropertyTypeModel | undefined> {\r\n\t\tawait this.#init;\r\n\t\treturn this.getOwnerContentType()?.properties?.find((property) => property.unique === propertyUnique);\r\n\t}\r\n\r\n\tasync getPropertyStructureByAlias(propertyAlias: string) {\r\n\t\tawait this.#init;\r\n\t\tfor (const docType of this.#contentTypes.getValue()) {\r\n\t\t\tconst foundProp = docType.properties?.find((property) => property.alias === propertyAlias);\r\n\t\t\tif (foundProp) {\r\n\t\t\t\treturn foundProp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\thasPropertyStructuresOf(containerId: string | null) {\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\treturn (\r\n\t\t\t\tdocTypes.find((docType) => {\r\n\t\t\t\t\treturn docType.properties?.find((property) => property.container?.id === containerId);\r\n\t\t\t\t}) !== undefined\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\trootPropertyStructures() {\r\n\t\treturn this.propertyStructuresOf(null);\r\n\t}\r\n\r\n\tpropertyStructuresOf(containerId: string | null) {\r\n\t\treturn this.#contentTypes.asObservablePart((docTypes) => {\r\n\t\t\tconst props: UmbPropertyTypeModel[] = [];\r\n\t\t\tdocTypes.forEach((docType) => {\r\n\t\t\t\tdocType.properties?.forEach((property) => {\r\n\t\t\t\t\tif (property.container?.id === containerId) {\r\n\t\t\t\t\t\tprops.push(property);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn props;\r\n\t\t});\r\n\t}\r\n\r\n\trootContainers(containerType: UmbPropertyContainerTypes) {\r\n\t\treturn createObservablePart(this.#contentTypeContainers, (data) => {\r\n\t\t\treturn data.filter((x) => x.parent === null && x.type === containerType);\r\n\t\t});\r\n\t}\r\n\r\n\tasync getRootContainers(containerType: UmbPropertyContainerTypes) {\r\n\t\treturn (await firstValueFrom(this.#contentTypeContainers)).filter(\r\n\t\t\t(x) => x.parent === null && x.type === containerType,\r\n\t\t);\r\n\t}\r\n\r\n\tasync hasRootContainers(containerType: UmbPropertyContainerTypes) {\r\n\t\treturn createObservablePart(this.#contentTypeContainers, (data) => {\r\n\t\t\treturn data.filter((x) => x.parent === null && x.type === containerType).length > 0;\r\n\t\t});\r\n\t}\r\n\r\n\townerContainersOf(containerType: UmbPropertyContainerTypes, parentId: string | null) {\r\n\t\treturn this.ownerContentTypeObservablePart(\r\n\t\t\t(x) =>\r\n\t\t\t\tx?.containers?.filter(\r\n\t\t\t\t\t(x) => (parentId ? x.parent?.id === parentId : x.parent === null) && x.type === containerType,\r\n\t\t\t\t) ?? [],\r\n\t\t);\r\n\t}\r\n\r\n\tgetOwnerContainerById(id: string | null): UmbPropertyTypeContainerModel | undefined {\r\n\t\treturn this.getOwnerContentType()?.containers?.find((x) => x.id === id);\r\n\t}\r\n\r\n\tgetOwnerContainers(\r\n\t\tcontainerType: UmbPropertyContainerTypes,\r\n\t\tparentId: string | null,\r\n\t): Array<UmbPropertyTypeContainerModel> | undefined {\r\n\t\treturn this.getOwnerContentType()?.containers?.filter(\r\n\t\t\t(x) => (parentId ? x.parent?.id === parentId : x.parent === null) && x.type === containerType,\r\n\t\t);\r\n\t}\r\n\r\n\tisOwnerContainer(containerId: string) {\r\n\t\treturn this.getOwnerContentType()?.containers?.filter((x) => x.id === containerId);\r\n\t}\r\n\r\n\tcontainersOfParentId(parentId: string, containerType: UmbPropertyContainerTypes) {\r\n\t\treturn createObservablePart(this.#contentTypeContainers, (data) => {\r\n\t\t\treturn data.filter((x) => x.parent?.id === parentId && x.type === containerType);\r\n\t\t});\r\n\t}\r\n\r\n\t// In future this might need to take parentName(parentId lookup) into account as well? otherwise containers that share same name and type will always be merged, but their position might be different and they should not be merged. [NL]\r\n\tcontainersByNameAndType(name: string, containerType: UmbPropertyContainerTypes) {\r\n\t\treturn createObservablePart(this.#contentTypeContainers, (data) => {\r\n\t\t\treturn data.filter((x) => x.name === name && x.type === containerType);\r\n\t\t});\r\n\t}\r\n\r\n\tcontainersByNameAndTypeAndParent(\r\n\t\tname: string,\r\n\t\tcontainerType: UmbPropertyContainerTypes,\r\n\t\tparentName: string | null,\r\n\t\tparentType?: UmbPropertyContainerTypes,\r\n\t) {\r\n\t\treturn createObservablePart(this.#contentTypeContainers, (data) => {\r\n\t\t\treturn data.filter(\r\n\t\t\t\t(x) =>\r\n\t\t\t\t\t// Match name and type:\r\n\t\t\t\t\tx.name === name &&\r\n\t\t\t\t\tx.type === containerType &&\r\n\t\t\t\t\t// If we look for a parent name, then we need to match that as well:\r\n\t\t\t\t\t(parentName !== null\r\n\t\t\t\t\t\t? // And we have a parent on this container, then we need to match the parent name and type as well\r\n\t\t\t\t\t\t\tx.parent\r\n\t\t\t\t\t\t\t? data.some((y) => x.parent!.id === y.id && y.name === parentName && y.type === parentType)\r\n\t\t\t\t\t\t\t: false\r\n\t\t\t\t\t\t: // if we do not have a parent then its not a match\r\n\t\t\t\t\t\t\tx.parent === null), // it parentName === null then we expect the container parent to be null.\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tgetContentTypeOfContainer(containerId: string) {\r\n\t\treturn this.#contentTypes\r\n\t\t\t.getValue()\r\n\t\t\t.find((contentType) => contentType.containers.some((c) => c.id === containerId));\r\n\t}\r\n\r\n\tcontentTypeOfProperty(propertyId: UmbPropertyTypeUnique) {\r\n\t\treturn this.#contentTypes.asObservablePart((contentTypes) =>\r\n\t\t\tcontentTypes.find((contentType) => contentType.properties.some((p) => p.unique === propertyId)),\r\n\t\t);\r\n\t}\r\n\r\n\t#observeRepository(repositoryAlias: string) {\r\n\t\tif (!repositoryAlias) throw new Error('Content Type structure manager must have a repository alias.');\r\n\r\n\t\tnew UmbExtensionApiInitializer<ManifestRepository<UmbDetailRepository<T>>>(\r\n\t\t\tthis,\r\n\t\t\tumbExtensionsRegistry,\r\n\t\t\trepositoryAlias,\r\n\t\t\t[this._host],\r\n\t\t\t(permitted, ctrl) => {\r\n\t\t\t\tthis.#repository = permitted ? ctrl.api : undefined;\r\n\t\t\t\tif (this.#repository) {\r\n\t\t\t\t\tthis.#initRepositoryResolver?.(this.#repository);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all property aliases for the content type including inherited and composed content types.\r\n\t * @returns {Promise<Array<string>>} - A promise that will be resolved with the list of all content type property aliases.\r\n\t */\r\n\tasync getContentTypePropertyAliases() {\r\n\t\treturn this.#contentTypes\r\n\t\t\t.getValue()\r\n\t\t\t.flatMap((x) => x.properties?.map((y) => y.alias) ?? [])\r\n\t\t\t.filter(UmbFilterDuplicateStrings);\r\n\t}\r\n\r\n\tpublic clear() {\r\n\t\tthis.#contentTypeObservers.forEach((observer) => observer.destroy());\r\n\t\tthis.#contentTypeObservers = [];\r\n\t\tthis.#repoManager?.clear();\r\n\t\tthis.#contentTypes.setValue([]);\r\n\t\tthis.#ownerContentTypeUnique = undefined;\r\n\t}\r\n\r\n\tpublic override destroy() {\r\n\t\tthis.#contentTypes.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n","import type { UmbContentTypeCompositionModel, UmbContentTypeDetailModel, UmbContentTypeSortModel } from '../types.js';\r\nimport { UmbContentTypeStructureManager } from '../structure/index.js';\r\nimport type { UmbContentTypeWorkspaceContext } from './content-type-workspace-context.interface.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type {\r\n\tUmbDetailRepository,\r\n\tUmbRepositoryResponse,\r\n\tUmbRepositoryResponseWithAsObservable,\r\n} from '@umbraco-cms/backoffice/repository';\r\nimport {\r\n\tUmbEntityDetailWorkspaceContextBase,\r\n\ttype UmbEntityDetailWorkspaceContextArgs,\r\n\ttype UmbEntityDetailWorkspaceContextCreateArgs,\r\n\ttype UmbRoutableWorkspaceContext,\r\n} from '@umbraco-cms/backoffice/workspace';\r\nimport type { UmbReferenceByUnique } from '@umbraco-cms/backoffice/models';\r\nimport type { Observable } from '@umbraco-cms/backoffice/observable-api';\r\nimport { UMB_ACTION_EVENT_CONTEXT } from '@umbraco-cms/backoffice/action';\r\nimport {\r\n\tUmbRequestReloadChildrenOfEntityEvent,\r\n\tUmbRequestReloadStructureForEntityEvent,\r\n} from '@umbraco-cms/backoffice/entity-action';\r\nimport type { UmbEntityModel } from '@umbraco-cms/backoffice/entity';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\r\nexport interface UmbContentTypeWorkspaceContextArgs extends UmbEntityDetailWorkspaceContextArgs {}\r\n\r\nconst LOADING_STATE_UNIQUE = 'umbLoadingContentTypeDetail';\r\n\r\nexport abstract class UmbContentTypeWorkspaceContextBase<\r\n\t\tDetailModelType extends UmbContentTypeDetailModel = UmbContentTypeDetailModel,\r\n\t\tDetailRepositoryType extends UmbDetailRepository<DetailModelType> = UmbDetailRepository<DetailModelType>,\r\n\t>\r\n\textends UmbEntityDetailWorkspaceContextBase<DetailModelType, DetailRepositoryType>\r\n\timplements UmbContentTypeWorkspaceContext<DetailModelType>, UmbRoutableWorkspaceContext\r\n{\r\n\tpublic readonly IS_CONTENT_TYPE_WORKSPACE_CONTEXT = true;\r\n\r\n\tpublic readonly name: Observable<string | undefined>;\r\n\tpublic readonly alias: Observable<string | undefined>;\r\n\tpublic readonly description: Observable<string | undefined>;\r\n\tpublic readonly icon: Observable<string | undefined>;\r\n\r\n\tpublic readonly allowedAtRoot: Observable<boolean | undefined>;\r\n\tpublic readonly variesByCulture: Observable<boolean | undefined>;\r\n\tpublic readonly variesBySegment: Observable<boolean | undefined>;\r\n\tpublic readonly isElement: Observable<boolean | undefined>;\r\n\tpublic readonly allowedContentTypes: Observable<Array<UmbContentTypeSortModel> | undefined>;\r\n\tpublic readonly compositions: Observable<Array<UmbContentTypeCompositionModel> | undefined>;\r\n\tpublic readonly collection: Observable<UmbReferenceByUnique | null | undefined>;\r\n\r\n\tpublic readonly structure: UmbContentTypeStructureManager<DetailModelType>;\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbContentTypeWorkspaceContextArgs) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis.structure = new UmbContentTypeStructureManager<DetailModelType>(this, args.detailRepositoryAlias);\r\n\r\n\t\tthis.name = this.structure.ownerContentTypeObservablePart((data) => data?.name);\r\n\t\tthis.alias = this.structure.ownerContentTypeObservablePart((data) => data?.alias);\r\n\t\tthis.description = this.structure.ownerContentTypeObservablePart((data) => data?.description);\r\n\t\tthis.icon = this.structure.ownerContentTypeObservablePart((data) => data?.icon);\r\n\t\tthis.allowedAtRoot = this.structure.ownerContentTypeObservablePart((data) => data?.allowedAtRoot);\r\n\t\tthis.variesByCulture = this.structure.ownerContentTypeObservablePart((data) => data?.variesByCulture);\r\n\t\tthis.variesBySegment = this.structure.ownerContentTypeObservablePart((data) => data?.variesBySegment);\r\n\t\tthis.isElement = this.structure.ownerContentTypeObservablePart((data) => data?.isElement);\r\n\t\tthis.allowedContentTypes = this.structure.ownerContentTypeObservablePart((data) => data?.allowedContentTypes);\r\n\t\tthis.compositions = this.structure.ownerContentTypeObservablePart((data) => data?.compositions);\r\n\t\tthis.collection = this.structure.ownerContentTypeObservablePart((data) => data?.collection);\r\n\r\n\t\t// Keep current data in sync with the owner content type - This is used for the discard changes feature\r\n\t\tthis.observe(this.structure.ownerContentType, (data) => this._data.setCurrent(data));\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new scaffold\r\n\t * @param { UmbEntityDetailWorkspaceContextCreateArgs<DetailModelType> } args The arguments for creating a new scaffold\r\n\t * @returns { Promise<DetailModelType | undefined> } The new scaffold\r\n\t */\r\n\tpublic override async createScaffold(\r\n\t\targs: UmbEntityDetailWorkspaceContextCreateArgs<DetailModelType>,\r\n\t): Promise<DetailModelType | undefined> {\r\n\t\tthis.resetState();\r\n\t\tthis.loading.addState({ unique: LOADING_STATE_UNIQUE, message: `Creating ${this.getEntityType()} scaffold` });\r\n\t\tthis._internal_setCreateUnderParent(args.parent);\r\n\r\n\t\tconst request = this.structure.createScaffold(args.preset);\r\n\t\tthis._getDataPromise = request;\r\n\t\tlet { data } = await request;\r\n\r\n\t\tif (data) {\r\n\t\t\tdata = await this._scaffoldProcessData(data);\r\n\r\n\t\t\tif (this.modalContext) {\r\n\t\t\t\t// Notice if the preset comes with values, they will overwrite the scaffolded values... [NL]\r\n\t\t\t\tdata = { ...data, ...this.modalContext.data.preset };\r\n\t\t\t}\r\n\r\n\t\t\tthis.setUnique(data.unique);\r\n\t\t\tthis.setIsNew(true);\r\n\t\t\tthis._data.setPersisted(data);\r\n\t\t}\r\n\r\n\t\tthis.loading.removeState(LOADING_STATE_UNIQUE);\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the data for the workspace\r\n\t * @param { string } unique The unique identifier of the data to load\r\n\t * @returns { Promise<UmbRepositoryResponse<DetailModelType> | UmbRepositoryResponseWithAsObservable<DetailModelType>> } The loaded data\r\n\t */\r\n\toverride async load(\r\n\t\tunique: string,\r\n\t): Promise<UmbRepositoryResponse<DetailModelType> | UmbRepositoryResponseWithAsObservable<DetailModelType>> {\r\n\t\tif (unique === this.getUnique() && this._getDataPromise) {\r\n\t\t\treturn await this._getDataPromise;\r\n\t\t}\r\n\r\n\t\tthis.resetState();\r\n\t\tthis.setUnique(unique);\r\n\t\tthis.loading.addState({ unique: LOADING_STATE_UNIQUE, message: `Loading ${this.getEntityType()} Details` });\r\n\t\tthis._getDataPromise = this.structure.loadType(unique);\r\n\t\tconst response = await this._getDataPromise;\r\n\t\tconst data = response.data;\r\n\t\tif (data) {\r\n\t\t\tthis._data.setPersisted(data);\r\n\t\t\tthis.setIsNew(false);\r\n\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.structure.ownerContentType,\r\n\t\t\t\t(entity: any) => this.#onDetailStoreChange(entity),\r\n\t\t\t\t'umbContentTypeDetailStoreObserver',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.loading.removeState(LOADING_STATE_UNIQUE);\r\n\t\treturn response;\r\n\t}\r\n\r\n\t#onDetailStoreChange(entity: DetailModelType | undefined) {\r\n\t\tif (!entity) {\r\n\t\t\tthis._data.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates the Content Type\r\n\t * @param { DetailModelType } currentData The current data\r\n\t * @param { UmbEntityModel } parent The parent entity\r\n\t * @memberof UmbContentTypeWorkspaceContextBase\r\n\t */\r\n\toverride async _create(currentData: DetailModelType, parent: UmbEntityModel) {\r\n\t\ttry {\r\n\t\t\tawait this.structure.create(parent?.unique);\r\n\r\n\t\t\tthis._data.setPersisted(this.structure.getOwnerContentType());\r\n\r\n\t\t\tconst eventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\t\tif (!eventContext) {\r\n\t\t\t\tthrow new Error('Could not get the action event context');\r\n\t\t\t}\r\n\t\t\tconst event = new UmbRequestReloadChildrenOfEntityEvent({\r\n\t\t\t\tentityType: parent.entityType,\r\n\t\t\t\tunique: parent.unique,\r\n\t\t\t});\r\n\t\t\teventContext.dispatchEvent(event);\r\n\r\n\t\t\tthis.setIsNew(false);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the content type for the workspace\r\n\t * @memberof UmbContentTypeWorkspaceContextBase\r\n\t */\r\n\toverride async _update() {\r\n\t\ttry {\r\n\t\t\tawait this.structure.save();\r\n\r\n\t\t\tthis._data.setPersisted(this.structure.getOwnerContentType());\r\n\r\n\t\t\tconst actionEventContext = await this.getContext(UMB_ACTION_EVENT_CONTEXT);\r\n\t\t\tif (!actionEventContext) {\r\n\t\t\t\tthrow new Error('Could not get the action event context');\r\n\t\t\t}\r\n\t\t\tconst event = new UmbRequestReloadStructureForEntityEvent({\r\n\t\t\t\tunique: this.getUnique()!,\r\n\t\t\t\tentityType: this.getEntityType(),\r\n\t\t\t});\r\n\r\n\t\t\tactionEventContext.dispatchEvent(event);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the name of the content type\r\n\t * @returns { string | undefined } The name of the content type\r\n\t */\r\n\tpublic getName(): string | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.name;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the name of the content type\r\n\t * @param { string } name The name of the content type\r\n\t */\r\n\tpublic setName(name: string) {\r\n\t\tthis.structure.updateOwnerContentType({ name } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the alias of the content type\r\n\t * @returns { string | undefined } The alias of the content type\r\n\t */\r\n\tpublic getAlias(): string | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.alias;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the alias of the content type\r\n\t * @param { string } alias The alias of the content type\r\n\t */\r\n\tpublic setAlias(alias: string) {\r\n\t\tthis.structure.updateOwnerContentType({ alias } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the description of the content type\r\n\t * @returns { string | undefined } The description of the content type\r\n\t */\r\n\tpublic getDescription(): string | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.description;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the description of the content type\r\n\t * @param { string } description The description of the content type\r\n\t */\r\n\tpublic setDescription(description: string) {\r\n\t\tthis.structure.updateOwnerContentType({ description } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the compositions of the content type\r\n\t * @returns { string | undefined } The icon of the content type\r\n\t */\r\n\tpublic getCompositions(): Array<UmbContentTypeCompositionModel> | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.compositions;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the compositions of the content type\r\n\t * @param { string } compositions The compositions of the content type\r\n\t * @returns { void }\r\n\t */\r\n\tpublic setCompositions(compositions: Array<UmbContentTypeCompositionModel>) {\r\n\t\tthis.structure.updateOwnerContentType({ compositions } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the icon of the content type\r\n\t * @returns { string | undefined } The icon of the content type\r\n\t */\r\n\tpublic getIcon(): string | undefined {\r\n\t\treturn this.structure.getOwnerContentType()?.icon;\r\n\t}\r\n\r\n\t// TODO: manage setting icon color alias?\r\n\tpublic setIcon(icon: string) {\r\n\t\tthis.structure.updateOwnerContentType({ icon } as Partial<DetailModelType>);\r\n\t}\r\n\r\n\tpublic override getData() {\r\n\t\treturn this.structure.getOwnerContentType();\r\n\t}\r\n\r\n\tpublic override destroy(): void {\r\n\t\tthis.structure.destroy();\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n"],"names":["UMB_WORKSPACE_CONTENT_TYPE_ALIAS_CONDITION_ALIAS","_workspaceContext","_UmbContentTypeWorkspaceEditorHeaderElement_instances","observeContentType_fn","onNameAndAliasChange_fn","onDescriptionChange_fn","UmbContentTypeWorkspaceEditorHeaderElement","UmbLitElement","__privateAdd","UMB_CONTENT_TYPE_WORKSPACE_CONTEXT","instance","__privateSet","__privateMethod","alias","color","modalManager","UMB_MODAL_MANAGER_CONTEXT","UMB_ICON_PICKER_MODAL","saved","__privateGet","html","ifDefined","umbBindToValidation","umbFocus","name","description","icon","isNew","event","css","__decorateClass","state","customElement","_dataTypeModal","_propertyEditorUiAlias","_UmbInputContentTypeCollectionConfigurationElement_instances","setValue_fn","clearDataType_fn","createDataType_fn","editDataType_fn","renderCreate_fn","renderConfigured_fn","UmbInputContentTypeCollectionConfigurationElement","UmbFormControlMixin","UmbModalRouteRegistrationController","UMB_DATA_TYPE_PICKER_FLOW_DATA_TYPE_PICKER_MODAL","routingInfo","submitData","routeBuilder","UMB_DATATYPE_WORKSPACE_MODAL","params","UMB_DATA_TYPE_ENTITY_TYPE","value","UmbChangeEvent","nothing","property","UmbContentTypeStructureRepositoryBase","UmbRepositoryBase","#structureSource","host","structureSource","unique","parentContentUnique","UmbContentTypeStructureServerDataSourceBase","#host","#getAllowedChildrenOf","#mapper","args","data","error","tryExecute","item","UmbFilterDuplicateStrings","index","array","UmbContentTypeStructureManager","UmbControllerBase","typeRepository","#init","resolve","reject","#initResolver","#initRejection","#editedTypes","UmbArrayState","x","#initRepository","#repository","#initRepositoryResolver","#contentTypeObservers","#contentTypes","y","#ownerContentTypeUnique","createObservablePart","contentTypes","#contentTypeContainers","p","properties","#observeRepository","#repoManager","UmbRepositoryDetailsManager","entries","entriesToBeUpdated","entriesToBeRemoved","entry","contentTypeCompositions","#loadContentTypeCompositions","id","result","preset","repsonse","contentType","parentUnique","ownerUnique","compositionUniques","newUniques","mappingFunction","containerId","contentTypeUnique","container","toContentTypeUnique","firstValueFrom","clonedContainer","UmbId","parentContainer","containers","type","parentId","newName","sortOrder","duplicatedParentContainer","newContainer","frozenContainers","appendToFrozenArray","containerType","ownerRootContainers","changedName","con","incrementString","partialUpdate","partialUpdateFrozenArray","removedContainerIds","updates","ids","frozenProperties","propertyUnique","filterFrozenArray","docTypes","docType","foundProp","propertyAlias","props","parentName","parentType","c","propertyId","repositoryAlias","UmbExtensionApiInitializer","umbExtensionsRegistry","permitted","ctrl","observer","LOADING_STATE_UNIQUE","UmbContentTypeWorkspaceContextBase","UmbEntityDetailWorkspaceContextBase","request","response","entity","#onDetailStoreChange","currentData","parent","eventContext","UMB_ACTION_EVENT_CONTEXT","UmbRequestReloadChildrenOfEntityEvent","actionEventContext","UmbRequestReloadStructureForEntityEvent","compositions"],"mappings":"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"}