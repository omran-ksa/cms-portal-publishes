{"version":3,"file":"content-type-move-root-containers-into-first-tab-helper.class-BMcf-7X5.js","sources":["../../../src/packages/content/content-type/modals/composition-picker/composition-picker-modal.token.ts","../../../src/packages/content/content-type/workspace/views/design/content-type-design-editor.context-token.ts","../../../src/packages/content/content-type/workspace/content-type-workspace.context-token.ts","../../../src/packages/content/content-type/structure/content-type-container-structure-helper.class.ts","../../../src/packages/content/content-type/structure/content-type-move-root-containers-into-first-tab-helper.class.ts"],"sourcesContent":["import { UmbModalToken } from '@umbraco-cms/backoffice/modal';\r\n\r\n// TODO: Stop sending the initial selection as part of data [NL], it should just be in the value:\r\nexport interface UmbCompositionPickerModalData {\r\n\tcompositionRepositoryAlias: string;\r\n\tselection: Array<string>;\r\n\tusedForInheritance: Array<string>;\r\n\tusedForComposition: Array<string>;\r\n\tunique: string | null;\r\n\tisElement: boolean;\r\n\tcurrentPropertyAliases: Array<string>;\r\n\tisNew: boolean;\r\n}\r\n\r\nexport interface UmbCompositionPickerModalValue {\r\n\tselection: Array<string>;\r\n}\r\n\r\nexport const UMB_COMPOSITION_PICKER_MODAL = new UmbModalToken<\r\n\tUmbCompositionPickerModalData,\r\n\tUmbCompositionPickerModalValue\r\n>('Umb.Modal.CompositionPicker', {\r\n\tmodal: {\r\n\t\ttype: 'sidebar',\r\n\t\tsize: 'small',\r\n\t},\r\n});\r\n","import type { UmbContentTypeDesignEditorContext } from './content-type-design-editor.context.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_CONTENT_TYPE_DESIGN_EDITOR_CONTEXT = new UmbContextToken<\r\n\tUmbContentTypeDesignEditorContext,\r\n\tUmbContentTypeDesignEditorContext\r\n>('UmbContentTypeDesignEditorContext');\r\n","import type { UmbContentTypeWorkspaceContext } from './content-type-workspace-context.interface.js';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\n\r\nexport const UMB_CONTENT_TYPE_WORKSPACE_CONTEXT = new UmbContextToken<\r\n\tUmbContentTypeWorkspaceContext,\r\n\tUmbContentTypeWorkspaceContext\r\n>(\r\n\t'UmbWorkspaceContext',\r\n\tundefined,\r\n\t(context): context is UmbContentTypeWorkspaceContext => (context as any).IS_CONTENT_TYPE_WORKSPACE_CONTEXT,\r\n);\r\n","import type { UmbContentTypeModel, UmbPropertyContainerTypes, UmbPropertyTypeContainerModel } from '../types.js';\r\nimport type { UmbContentTypeStructureManager } from './content-type-structure-manager.class.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbController, UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\n\r\n/**\r\n * This class is a helper class for managing the structure of containers in a content type.\r\n * This requires a structure manager {@link UmbContentTypeStructureManager} to manage the structure.\r\n */\r\nexport class UmbContentTypeContainerStructureHelper<T extends UmbContentTypeModel> extends UmbControllerBase {\r\n\t#init;\r\n\t#initResolver?: (value: unknown) => void;\r\n\r\n\t#containerId?: string | null;\r\n\t#childType?: UmbPropertyContainerTypes = 'Group';\r\n\r\n\t#structure?: UmbContentTypeStructureManager<T>;\r\n\r\n\t#containerObservers: Array<UmbController> = [];\r\n\r\n\t// State containing the all containers defined in the data:\r\n\t#childContainers = new UmbArrayState<UmbPropertyTypeContainerModel>([], (x) => x.id);\r\n\treadonly containers = this.#childContainers.asObservable();\r\n\r\n\t// State containing the merged containers (only one pr. name):\r\n\t#mergedChildContainers = new UmbArrayState<UmbPropertyTypeContainerModel>([], (x) => x.id);\r\n\treadonly mergedContainers = this.#mergedChildContainers.asObservable();\r\n\r\n\t// Owner containers are containers owned by the owner Content Type (The specific one up for editing)\r\n\t#ownerChildContainers: UmbPropertyTypeContainerModel[] = [];\r\n\r\n\t#hasProperties = new UmbArrayState<{ id: string | null; has: boolean }>([], (x) => x.id);\r\n\treadonly hasProperties = this.#hasProperties.asObservablePart((x) => x.some((y) => y.has));\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.#init = new Promise((resolve) => {\r\n\t\t\tthis.#initResolver = resolve;\r\n\t\t});\r\n\r\n\t\tthis.#mergedChildContainers.sortBy((a, b) => (a.sortOrder || 0) - (b.sortOrder || 0));\r\n\t\tthis.observe(this.containers, this.#performContainerMerge, null);\r\n\t}\r\n\r\n\tpublic setStructureManager(structure: UmbContentTypeStructureManager<T> | undefined) {\r\n\t\tif (this.#structure === structure || !structure) return;\r\n\t\tif (this.#structure && !structure) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'Structure manager is already set, the helpers are not designed to be re-setup with new managers',\r\n\t\t\t);\r\n\t\t}\r\n\t\tthis.#structure = structure;\r\n\t\tthis.#initResolver?.(undefined);\r\n\t\tthis.#initResolver = undefined;\r\n\t\tthis.#observeContainers();\r\n\t}\r\n\r\n\tpublic getStructureManager() {\r\n\t\treturn this.#structure;\r\n\t}\r\n\r\n\tpublic setIsRoot(value: boolean) {\r\n\t\tif (value === true) {\r\n\t\t\tthis.setContainerId(null);\r\n\t\t}\r\n\t}\r\n\tpublic getIsRoot() {\r\n\t\treturn this.#containerId === null;\r\n\t}\r\n\r\n\tpublic setContainerId(value: string | null | undefined) {\r\n\t\tif (this.#containerId === value) return;\r\n\t\tthis.#containerId = value;\r\n\t\tthis.#observeContainers();\r\n\t}\r\n\tpublic getContainerId() {\r\n\t\treturn this.#containerId;\r\n\t}\r\n\r\n\tpublic setContainerChildType(value?: UmbPropertyContainerTypes) {\r\n\t\tif (this.#childType === value) return;\r\n\t\tthis.#childType = value;\r\n\t\tthis.#observeContainers();\r\n\t}\r\n\tpublic getContainerChildType() {\r\n\t\treturn this.#childType;\r\n\t}\r\n\r\n\t#containerName?: string;\r\n\t#containerType?: UmbPropertyContainerTypes;\r\n\t#parentName?: string | null;\r\n\t#parentType?: UmbPropertyContainerTypes;\r\n\r\n\t#observeContainers() {\r\n\t\tif (!this.#structure || this.#containerId === undefined) return;\r\n\r\n\t\tif (this.#containerId === null) {\r\n\t\t\tthis.#observeHasPropertiesOf(null);\r\n\t\t\tthis.#observeRootContainers();\r\n\t\t\tthis.removeUmbControllerByAlias('_observeContainers');\r\n\t\t} else {\r\n\t\t\tthis.observe(\r\n\t\t\t\tthis.#structure.containerById(this.#containerId),\r\n\t\t\t\t(container) => {\r\n\t\t\t\t\tif (container) {\r\n\t\t\t\t\t\tthis.#containerName = container.name ?? '';\r\n\t\t\t\t\t\tthis.#containerType = container.type;\r\n\t\t\t\t\t\tif (container.parent) {\r\n\t\t\t\t\t\t\t// We have a parent for our main container, so lets observe that one as well:\r\n\t\t\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\t\t\tthis.#structure!.containerById(container.parent.id),\r\n\t\t\t\t\t\t\t\t(parent) => {\r\n\t\t\t\t\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\t\t\t\t\tthis.#parentName = parent.name ?? '';\r\n\t\t\t\t\t\t\t\t\t\tthis.#parentType = parent.type;\r\n\t\t\t\t\t\t\t\t\t\tthis.#observeSimilarContainers();\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.removeUmbControllerByAlias('_observeContainers');\r\n\t\t\t\t\t\t\t\t\t\tthis.#parentName = undefined;\r\n\t\t\t\t\t\t\t\t\t\tthis.#parentType = undefined;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t'_observeMainParentContainer',\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.removeUmbControllerByAlias('_observeMainParentContainer');\r\n\t\t\t\t\t\t\tthis.#parentName = null; //In this way we want to look for one without a parent. [NL]\r\n\t\t\t\t\t\t\tthis.#parentType = undefined;\r\n\t\t\t\t\t\t\tthis.#observeSimilarContainers();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.removeUmbControllerByAlias('_observeContainers');\r\n\t\t\t\t\t\tthis.#containerName = undefined;\r\n\t\t\t\t\t\tthis.#containerType = undefined;\r\n\t\t\t\t\t\t// TODO: reset has Properties.\r\n\t\t\t\t\t\tthis.#hasProperties.setValue([]);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'_observeMainContainer',\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t#observeSimilarContainers() {\r\n\t\tif (this.#containerName === undefined || !this.#containerType || this.#parentName === undefined) return;\r\n\t\tthis.observe(\r\n\t\t\tthis.#structure!.containersByNameAndTypeAndParent(\r\n\t\t\t\tthis.#containerName,\r\n\t\t\t\tthis.#containerType,\r\n\t\t\t\tthis.#parentName,\r\n\t\t\t\tthis.#parentType,\r\n\t\t\t),\r\n\t\t\t(containers) => {\r\n\t\t\t\tthis.#hasProperties.setValue([]);\r\n\t\t\t\tthis.#childContainers.setValue([]);\r\n\t\t\t\tthis.#containerObservers.forEach((x) => x.destroy());\r\n\t\t\t\tthis.#containerObservers = [];\r\n\r\n\t\t\t\tcontainers.forEach((container) => {\r\n\t\t\t\t\tthis.#observeHasPropertiesOf(container.id);\r\n\r\n\t\t\t\t\tthis.#containerObservers.push(\r\n\t\t\t\t\t\tthis.observe(\r\n\t\t\t\t\t\t\tthis.#structure!.containersOfParentId(container.id, this.#childType!),\r\n\t\t\t\t\t\t\t(containers) => {\r\n\t\t\t\t\t\t\t\t// get the direct owner containers of this container id: [NL]\r\n\t\t\t\t\t\t\t\tthis.#ownerChildContainers =\r\n\t\t\t\t\t\t\t\t\tthis.#structure!.getOwnerContainers(this.#childType!, this.#containerId!) ?? [];\r\n\r\n\t\t\t\t\t\t\t\t// Remove existing containers that are not the parent of the new containers: [NL]\r\n\t\t\t\t\t\t\t\tthis.#childContainers.filter(\r\n\t\t\t\t\t\t\t\t\t(x) => x.parent?.id !== container.id || containers.some((y) => y.id === x.id),\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tthis.#childContainers.append(containers);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'_observeGroupsOf_' + container.id,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t'_observeContainers',\r\n\t\t);\r\n\t}\r\n\r\n\t#observeRootContainers() {\r\n\t\tif (!this.#structure || !this.#childType || this.#containerId === undefined) return;\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#structure.rootContainers(this.#childType),\r\n\t\t\t(rootContainers) => {\r\n\t\t\t\t// Here (When getting root containers) we get containers from all ContentTypes. It also means we need to do an extra filtering to ensure we only get one of each containers. [NL]\r\n\r\n\t\t\t\t// For that we get the owner containers first (We do not need to observe as this observation will be triggered if one of the owner containers change) [NL]\r\n\t\t\t\tthis.#ownerChildContainers = this.#structure!.getOwnerContainers(this.#childType!, this.#containerId!) ?? [];\r\n\r\n\t\t\t\tthis.#childContainers.setValue(rootContainers);\r\n\t\t\t},\r\n\t\t\t'_observeRootContainers',\r\n\t\t);\r\n\t}\r\n\r\n\t#observeHasPropertiesOf(groupId?: string | null) {\r\n\t\tif (!this.#structure || groupId === undefined) return;\r\n\r\n\t\tthis.observe(\r\n\t\t\tthis.#structure.hasPropertyStructuresOf(groupId),\r\n\t\t\t(hasProperties) => {\r\n\t\t\t\tthis.#hasProperties.appendOne({ id: groupId, has: hasProperties });\r\n\t\t\t},\r\n\t\t\t'_observePropertyStructureOfGroup' + groupId,\r\n\t\t);\r\n\t}\r\n\r\n\t#filterNonOwnerContainers(containers: Array<UmbPropertyTypeContainerModel>) {\r\n\t\treturn this.#ownerChildContainers.length > 0\r\n\t\t\t? containers.filter(\r\n\t\t\t\t\t(anyCon) =>\r\n\t\t\t\t\t\t!this.#ownerChildContainers.some(\r\n\t\t\t\t\t\t\t(ownerCon) =>\r\n\t\t\t\t\t\t\t\t// Then if this is not the owner container but matches one by name & type, then we do not want it.\r\n\t\t\t\t\t\t\t\townerCon.id !== anyCon.id && ownerCon.name === anyCon.name && ownerCon.type === anyCon.type,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t)\r\n\t\t\t: containers;\r\n\t}\r\n\r\n\t#performContainerMerge = (containers: Array<UmbPropertyTypeContainerModel>) => {\r\n\t\t// Remove containers that matches with a owner container:\r\n\t\tlet merged = this.#filterNonOwnerContainers(containers);\r\n\t\t// Remove containers of same name and type:\r\n\t\t// This only works cause we are dealing with a single level of containers in this Helper, if we had more levels we would need to be more clever about the parent as well. [NL]\r\n\t\tmerged = merged.filter((x, i, cons) => i === cons.findIndex((y) => y.name === x.name && y.type === x.type));\r\n\t\tthis.#mergedChildContainers.setValue(merged);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the container is an owner container.\r\n\t * @param containerId\r\n\t */\r\n\tisOwnerChildContainer(containerId?: string) {\r\n\t\tif (!this.#structure || !containerId) return;\r\n\t\treturn this.#ownerChildContainers.some((x) => x.id === containerId);\r\n\t}\r\n\r\n\tgetContentTypeOfContainer(containerId?: string) {\r\n\t\tif (!this.#structure || !containerId) return;\r\n\t\treturn this.#structure.getContentTypeOfContainer(containerId);\r\n\t}\r\n\r\n\tcontainersByNameAndType(name: string, type: UmbPropertyContainerTypes) {\r\n\t\treturn this.#childContainers.asObservablePart((cons) => cons.filter((x) => x.name === name && x.type === type));\r\n\t}\r\n\r\n\t/** Manipulate methods: */\r\n\r\n\t/*async insertContainer(container: UmbPropertyTypeContainerModel, sortOrder = 0) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure) return false;\r\n\r\n\t\tconst newContainer = { ...container, sortOrder };\r\n\r\n\t\tawait this.#structure.insertContainer(null, newContainer);\r\n\t\treturn true;\r\n\t}*/\r\n\r\n\tasync addContainer(parentContainerId?: string | null, sortOrder?: number) {\r\n\t\tif (!this.#structure) return;\r\n\r\n\t\tawait this.#structure.createContainer(null, parentContainerId, this.#childType, sortOrder);\r\n\t}\r\n\r\n\tasync removeContainer(groupId: string) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure) return false;\r\n\r\n\t\tawait this.#structure.removeContainer(null, groupId);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync partialUpdateContainer(containerId: string, partialUpdate: Partial<UmbPropertyTypeContainerModel>) {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#structure || !containerId || !partialUpdate) return;\r\n\r\n\t\treturn await this.#structure.updateContainer(null, containerId, partialUpdate);\r\n\t}\r\n}\r\n","import type { UmbContentTypeModel } from '../types.js';\r\nimport type { UmbContentTypeStructureManager } from './content-type-structure-manager.class.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nconst MoveRootContainersIntoFirstTabHelperControllerAlias = Symbol('moveRootContainersHelper');\r\n/**\r\n * This class is a helper class that specifically takes care of moving owner root containers into the first created tab.\r\n * This will give the user the experience of the first tab becoming the 'main' tab.\r\n */\r\nexport class UmbContentTypeMoveRootGroupsIntoFirstTabHelper<T extends UmbContentTypeModel> extends UmbControllerBase {\r\n\t#structure?: UmbContentTypeStructureManager<T>;\r\n\r\n\tconstructor(host: UmbControllerHost, structure: UmbContentTypeStructureManager<T>) {\r\n\t\tsuper(host, MoveRootContainersIntoFirstTabHelperControllerAlias);\r\n\t\tthis.#structure = structure;\r\n\t\tthis.#observeContainers();\r\n\t}\r\n\r\n\tasync #observeContainers() {\r\n\t\tif (!this.#structure) return;\r\n\r\n\t\tawait this.observe(\r\n\t\t\tthis.#structure.ownerContainersOf('Tab', null),\r\n\t\t\t(tabContainers) => {\r\n\t\t\t\t// If the amount of containers now became 1, we should move all root containers into this tab:\r\n\t\t\t\tif (tabContainers?.length === 1) {\r\n\t\t\t\t\tconst firstTabId = tabContainers[0].id;\r\n\t\t\t\t\tconst rootContainers = this.#structure?.getOwnerContainers('Group', null);\r\n\t\t\t\t\trootContainers?.forEach((groupContainer) => {\r\n\t\t\t\t\t\tthis.#structure?.updateContainer(null, groupContainer.id, { parent: { id: firstTabId } });\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.destroy();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'_observeMainContainer',\r\n\t\t).asPromise();\r\n\r\n\t\tthis.destroy();\r\n\t}\r\n\r\n\toverride destroy() {\r\n\t\tsuper.destroy();\r\n\t\tthis.#structure = undefined;\r\n\t}\r\n}\r\n"],"names":["UMB_COMPOSITION_PICKER_MODAL","UmbModalToken","UMB_CONTENT_TYPE_DESIGN_EDITOR_CONTEXT","UmbContextToken","UMB_CONTENT_TYPE_WORKSPACE_CONTEXT","context","UmbContentTypeContainerStructureHelper","UmbControllerBase","host","#childType","#containerObservers","#childContainers","UmbArrayState","x","#mergedChildContainers","#ownerChildContainers","#hasProperties","y","#performContainerMerge","containers","merged","#filterNonOwnerContainers","i","cons","#init","resolve","#initResolver","a","b","#containerId","#structure","structure","#observeContainers","value","#containerName","#containerType","#parentName","#parentType","#observeHasPropertiesOf","#observeRootContainers","container","parent","#observeSimilarContainers","rootContainers","groupId","hasProperties","anyCon","ownerCon","containerId","name","type","parentContainerId","sortOrder","partialUpdate","MoveRootContainersIntoFirstTabHelperControllerAlias","UmbContentTypeMoveRootGroupsIntoFirstTabHelper","tabContainers","firstTabId","groupContainer"],"mappings":"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"}