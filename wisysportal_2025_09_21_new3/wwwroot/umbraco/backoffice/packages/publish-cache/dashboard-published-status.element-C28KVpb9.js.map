{"version":3,"file":"dashboard-published-status.element-C28KVpb9.js","sources":["../../../src/packages/publish-cache/dashboard-published-status.element.ts"],"sourcesContent":["import { css, customElement, html, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\nimport { PublishedCacheService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport type { UUIButtonState } from '@umbraco-cms/backoffice/external/uui';\r\n\r\n@customElement('umb-dashboard-published-status')\r\nexport class UmbDashboardPublishedStatusElement extends UmbLitElement {\r\n\t@state()\r\n\tprivate _buttonStateReload: UUIButtonState = undefined;\r\n\r\n\t@state()\r\n\tprivate _buttonStateRebuild: UUIButtonState = undefined;\r\n\r\n\t#isFirstRebuildStatusPoll: boolean = true;\r\n\r\n\t//Reload\r\n\tprivate async _reloadMemoryCache() {\r\n\t\tthis._buttonStateReload = 'waiting';\r\n\t\tconst { error } = await tryExecute(this, PublishedCacheService.postPublishedCacheReload());\r\n\t\tif (error) {\r\n\t\t\tthis._buttonStateReload = 'failed';\r\n\t\t} else {\r\n\t\t\tthis._buttonStateReload = 'success';\r\n\t\t}\r\n\t}\r\n\tprivate async _onReloadCacheHandler() {\r\n\t\tawait umbConfirmModal(this, {\r\n\t\t\theadline: 'Reload',\r\n\t\t\tcontent: html` Trigger a in-memory and local file cache reload on all servers.`,\r\n\t\t\tcolor: 'danger',\r\n\t\t\tconfirmLabel: 'Continue',\r\n\t\t});\r\n\r\n\t\tthis._reloadMemoryCache();\r\n\t}\r\n\r\n\t// Rebuild\r\n\tprivate async _rebuildDatabaseCache() {\r\n\t\tthis._buttonStateRebuild = 'waiting';\r\n\t\tconst { error } = await tryExecute(this, PublishedCacheService.postPublishedCacheRebuild());\r\n\t\tif (error) {\r\n\t\t\tthis._buttonStateRebuild = 'failed';\r\n\t\t} else {\r\n\t\t\tthis.#isFirstRebuildStatusPoll = true;\r\n\t\t\tthis._pollForRebuildDatabaseCacheStatus();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async _pollForRebuildDatabaseCacheStatus() {\r\n\t\t//Checking the server after 1 second and then every 5 seconds to see if the database cache is still rebuilding.\r\n\t\twhile (this._buttonStateRebuild === 'waiting') {\r\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, this.#isFirstRebuildStatusPoll ? 1000 : 5000));\r\n\t\t\tthis.#isFirstRebuildStatusPoll = false;\r\n\t\t\tconst { data, error } = await tryExecute(this, PublishedCacheService.getPublishedCacheRebuildStatus());\r\n\t\t\tif (error || !data) {\r\n\t\t\t\tthis._buttonStateRebuild = 'failed';\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!data.isRebuilding) {\r\n\t\t\t\tthis._buttonStateRebuild = 'success';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async _onRebuildCacheHandler() {\r\n\t\tawait umbConfirmModal(this, {\r\n\t\t\theadline: 'Rebuild',\r\n\t\t\tcontent: html` Rebuild content in cmsContentNu database table. Expensive.`,\r\n\t\t\tcolor: 'danger',\r\n\t\t\tconfirmLabel: 'Continue',\r\n\t\t});\r\n\r\n\t\tthis._rebuildDatabaseCache();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html`\r\n\t\t\t<uui-box headline=\"Memory Cache\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThis button lets you reload the in-memory cache, by entirely reloading it from the database cache (but it does\r\n\t\t\t\t\tnot rebuild that database cache). This is relatively fast. Use it when you think that the memory cache has not\r\n\t\t\t\t\tbeen properly refreshed, after some events triggered—which would indicate a minor Umbraco issue. (note:\r\n\t\t\t\t\ttriggers the reload on all servers in an LB environment).\r\n\t\t\t\t</p>\r\n\t\t\t\t<uui-button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tlook=\"primary\"\r\n\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\tlabel=\"Reload Memory Cache\"\r\n\t\t\t\t\t@click=${this._onReloadCacheHandler}\r\n\t\t\t\t\t.state=${this._buttonStateReload}>\r\n\t\t\t\t\tReload Memory Cache\r\n\t\t\t\t</uui-button>\r\n\t\t\t</uui-box>\r\n\r\n\t\t\t<uui-box headline=\"Database Cache\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThis button lets you rebuild the database cache, ie the content of the cmsContentNu table. Rebuilding can be\r\n\t\t\t\t\texpensive. Use it when reloading is not enough, and you think that the database cache has not been properly\r\n\t\t\t\t\tgenerated—which would indicate some critical Umbraco issue.\r\n\t\t\t\t</p>\r\n\t\t\t\t<uui-button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tlook=\"primary\"\r\n\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\tlabel=\"Rebuild Database Cache\"\r\n\t\t\t\t\t@click=${this._onRebuildCacheHandler}\r\n\t\t\t\t\t.state=${this._buttonStateRebuild}>\r\n\t\t\t\t\tRebuild Database Cache\r\n\t\t\t\t</uui-button>\r\n\t\t\t</uui-box>\r\n\t\t`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t:host {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tpadding: var(--uui-size-layout-1);\r\n\t\t\t}\r\n\r\n\t\t\tuui-box + uui-box {\r\n\t\t\t\tmargin-top: var(--uui-size-space-5);\r\n\t\t\t}\r\n\t\t\tuui-box p:first-child {\r\n\t\t\t\tmargin-block-start: 0;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbDashboardPublishedStatusElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-dashboard-published-status': UmbDashboardPublishedStatusElement;\r\n\t}\r\n}\r\n"],"names":["_isFirstRebuildStatusPoll","UmbDashboardPublishedStatusElement","UmbLitElement","__privateAdd","error","tryExecute","PublishedCacheService","umbConfirmModal","html","__privateSet","resolve","__privateGet","data","UmbTextStyles","css","__decorateClass","state","customElement","UmbDashboardPublishedStatusElement$1"],"mappings":";;;;;;;;;;;;gVAAAA;AASa,IAAAC,IAAN,cAAiDC,EAAc;AAAA,EAA/D,cAAA;AAAA,UAAA,GAAA,SAAA,GAEN,KAAQ,qBAAqC,QAG7C,KAAQ,sBAAsC,QAETC,EAAA,MAAAH,GAAA,EAAA;AAAA,EAAA;AAAA;AAAA,EAGrC,MAAc,qBAAqB;AAClC,SAAK,qBAAqB;AACpB,UAAA,EAAE,OAAAI,MAAU,MAAMC,EAAW,MAAMC,EAAsB,0BAA0B;AACzF,IAAIF,IACH,KAAK,qBAAqB,WAE1B,KAAK,qBAAqB;AAAA,EAC3B;AAAA,EAED,MAAc,wBAAwB;AACrC,UAAMG,EAAgB,MAAM;AAAA,MAC3B,UAAU;AAAA,MACV,SAASC;AAAA,MACT,OAAO;AAAA,MACP,cAAc;AAAA,IAAA,CACd,GAED,KAAK,mBAAmB;AAAA,EAAA;AAAA;AAAA,EAIzB,MAAc,wBAAwB;AACrC,SAAK,sBAAsB;AACrB,UAAA,EAAE,OAAAJ,MAAU,MAAMC,EAAW,MAAMC,EAAsB,2BAA2B;AAC1F,IAAIF,IACH,KAAK,sBAAsB,YAE3BK,EAAA,MAAKT,GAA4B,EAAA,GACjC,KAAK,mCAAmC;AAAA,EACzC;AAAA,EAGD,MAAc,qCAAqC;AAE3C,WAAA,KAAK,wBAAwB,aAAW;AACxC,YAAA,IAAI,QAAQ,CAACU,MAAY,WAAWA,GAASC,EAAK,MAAAX,CAAA,IAA4B,MAAO,GAAI,CAAC,GAChGS,EAAA,MAAKT,GAA4B,EAAA;AAC3B,YAAA,EAAE,MAAAY,GAAM,OAAAR,MAAU,MAAMC,EAAW,MAAMC,EAAsB,gCAAgC;AACjG,UAAAF,KAAS,CAACQ,GAAM;AACnB,aAAK,sBAAsB;AAC3B;AAAA,MAAA;AAGG,MAACA,EAAK,iBACT,KAAK,sBAAsB;AAAA,IAC5B;AAAA,EACD;AAAA,EAGD,MAAc,yBAAyB;AACtC,UAAML,EAAgB,MAAM;AAAA,MAC3B,UAAU;AAAA,MACV,SAASC;AAAA,MACT,OAAO;AAAA,MACP,cAAc;AAAA,IAAA,CACd,GAED,KAAK,sBAAsB;AAAA,EAAA;AAAA,EAGnB,SAAS;AACV,WAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAaK,KAAK,qBAAqB;AAAA,cAC1B,KAAK,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAgBvB,KAAK,sBAAsB;AAAA,cAC3B,KAAK,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAuBtC;AAtHCR,IAAA,oBAAA,QAAA;AAPYC,EA6GI,SAAS;AAAA,EACxBY;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaD;AA1HQC,EAAA;AAAA,EADPC,EAAM;AAAA,GADKf,EAEJ,WAAA,sBAAA,CAAA;AAGAc,EAAA;AAAA,EADPC,EAAM;AAAA,GAJKf,EAKJ,WAAA,uBAAA,CAAA;AALIA,IAANc,EAAA;AAAA,EADNE,EAAc,gCAAgC;AAAA,GAClChB,CAAA;AA+Hb,MAAAiB,IAAejB;"}