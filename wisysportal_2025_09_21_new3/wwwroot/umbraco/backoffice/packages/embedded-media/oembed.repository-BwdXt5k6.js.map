{"version":3,"file":"oembed.repository-BwdXt5k6.js","sources":["../../../src/packages/embedded-media/repository/oembed.server.data.ts","../../../src/packages/embedded-media/repository/oembed.repository.ts"],"sourcesContent":["import { OEmbedService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the OEmbed that fetches data from a given URL.\r\n * @class UmbOEmbedServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbOEmbedServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbOEmbedServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbOEmbedServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches markup for the given URL.\r\n\t * @param {string} unique\r\n\t * @memberof UmbOEmbedServerDataSource\r\n\t */\r\n\tasync getOEmbedQuery({ url, maxWidth, maxHeight }: { url?: string; maxWidth?: number; maxHeight?: number }) {\r\n\t\treturn tryExecute(this.#host, OEmbedService.getOembedQuery({ query: { url, maxWidth, maxHeight } }));\r\n\t}\r\n}\r\n","import { UmbOEmbedServerDataSource } from './oembed.server.data.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\n\r\nexport class UmbOEmbedRepository extends UmbControllerBase implements UmbApi {\r\n\t#dataSource = new UmbOEmbedServerDataSource(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t}\r\n\r\n\tasync requestOEmbed({ url, maxWidth, maxHeight }: { url?: string; maxWidth?: number; maxHeight?: number }) {\r\n\t\tconst { data, error } = await this.#dataSource.getOEmbedQuery({ url, maxWidth, maxHeight });\r\n\t\tif (!error) {\r\n\t\t\treturn { data };\r\n\t\t}\r\n\t\treturn { error };\r\n\t}\r\n}\r\n\r\nexport { UmbOEmbedRepository as api };\r\n"],"names":["UmbOEmbedServerDataSource","#host","host","url","maxWidth","maxHeight","tryExecute","OEmbedService","UmbOEmbedRepository","UmbControllerBase","#dataSource","data","error"],"mappings":";;;AASO,MAAMA,EAA0B;AAAA,EACtCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,MAAM,eAAe,EAAE,KAAAC,GAAK,UAAAC,GAAU,WAAAC,KAAsE;AAC3G,WAAOC,EAAW,KAAKL,IAAOM,EAAc,eAAe,EAAE,OAAO,EAAE,KAAAJ,GAAK,UAAAC,GAAU,WAAAC,EAAU,EAAG,CAAA,CAAC;AAAA,EAAA;AAErG;ACxBO,MAAMG,UAA4BC,EAAoC;AAAA,EAC5EC,KAAc,IAAIV,EAA0B,IAAI;AAAA,EAEhD,YAAYE,GAAyB;AACpC,UAAMA,CAAI;AAAA,EAAA;AAAA,EAGX,MAAM,cAAc,EAAE,KAAAC,GAAK,UAAAC,GAAU,WAAAC,KAAsE;AAC1G,UAAM,EAAE,MAAAM,GAAM,OAAAC,EAAM,IAAI,MAAM,KAAKF,GAAY,eAAe,EAAE,KAAAP,GAAK,UAAAC,GAAU,WAAAC,EAAA,CAAW;AAC1F,WAAKO,IAGE,EAAE,OAAAA,EAAM,IAFP,EAAE,MAAAD,EAAK;AAAA,EAEA;AAEjB;"}