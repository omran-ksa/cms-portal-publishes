{"version":3,"file":"media-collection.repository-DsEyT-BB.js","sources":["../../../src/packages/media/media/collection/repository/media-collection.server.data-source.ts","../../../src/packages/media/media/collection/repository/media-collection.repository.ts"],"sourcesContent":["import type { UmbMediaCollectionFilterModel, UmbMediaCollectionItemModel } from '../types.js';\r\nimport { UMB_MEDIA_ENTITY_TYPE } from '../../entity.js';\r\nimport { DirectionModel, MediaService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport type { MediaCollectionResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbCollectionDataSource } from '@umbraco-cms/backoffice/collection';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbMediaCollectionServerDataSource implements UmbCollectionDataSource<UmbMediaCollectionItemModel> {\r\n\t#host: UmbControllerHost;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\tasync getCollection(filter: UmbMediaCollectionFilterModel) {\r\n\t\tconst query = {\r\n\t\t\tid: filter.unique ?? '',\r\n\t\t\tdataTypeId: filter.dataTypeId,\r\n\t\t\torderBy: filter.orderBy ?? 'updateDate',\r\n\t\t\torderDirection: filter.orderDirection === 'asc' ? DirectionModel.ASCENDING : DirectionModel.DESCENDING,\r\n\t\t\tfilter: filter.filter,\r\n\t\t\tskip: filter.skip ?? 0,\r\n\t\t\ttake: filter.take ?? 100,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(this.#host, MediaService.getCollectionMedia({ query }));\r\n\r\n\t\tif (data) {\r\n\t\t\tconst items = data.items.map((item: MediaCollectionResponseModel) => {\r\n\t\t\t\t// TODO: [LK] Temp solution, review how to get the name from the corresponding variant.\r\n\t\t\t\tconst variant = item.variants[0];\r\n\r\n\t\t\t\tconst model: UmbMediaCollectionItemModel = {\r\n\t\t\t\t\tunique: item.id,\r\n\t\t\t\t\tentityType: UMB_MEDIA_ENTITY_TYPE,\r\n\t\t\t\t\tcontentTypeAlias: item.mediaType.alias,\r\n\t\t\t\t\tcreateDate: new Date(variant.createDate),\r\n\t\t\t\t\tcreator: item.creator,\r\n\t\t\t\t\ticon: item.mediaType.icon,\r\n\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\tsortOrder: item.sortOrder,\r\n\t\t\t\t\tupdateDate: new Date(variant.updateDate),\r\n\t\t\t\t\tupdater: item.creator, // TODO: Check if the `updater` is available for media items. [LK]\r\n\t\t\t\t\tvalues: item.values.map((item) => {\r\n\t\t\t\t\t\treturn { alias: item.alias, value: item.value as string };\r\n\t\t\t\t\t}),\r\n\t\t\t\t};\r\n\t\t\t\treturn model;\r\n\t\t\t});\r\n\r\n\t\t\treturn { data: { items, total: data.total } };\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n}\r\n","import type { UmbMediaCollectionFilterModel } from '../types.js';\r\nimport { UmbMediaCollectionServerDataSource } from './media-collection.server.data-source.js';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbCollectionRepository } from '@umbraco-cms/backoffice/collection';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\n\r\nexport class UmbMediaCollectionRepository extends UmbRepositoryBase implements UmbCollectionRepository {\r\n\t#collectionSource: UmbMediaCollectionServerDataSource;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#collectionSource = new UmbMediaCollectionServerDataSource(host);\r\n\t}\r\n\r\n\tasync getDefaultConfiguration() {\r\n\t\treturn {\r\n\t\t\t// TODO: The default Collection data-type ID (for the Media ListView) will come from the server soon.  [LK]\r\n\t\t\tdefaultDataTypeId: '3a0156c4-3b8c-4803-bdc1-6871faa83fff',\r\n\t\t};\r\n\t}\r\n\r\n\tasync requestCollection(query: UmbMediaCollectionFilterModel) {\r\n\t\treturn this.#collectionSource.getCollection(query);\r\n\t}\r\n}\r\n\r\nexport default UmbMediaCollectionRepository;\r\n"],"names":["UmbMediaCollectionServerDataSource","#host","host","filter","query","DirectionModel","data","error","tryExecute","MediaService","item","variant","UMB_MEDIA_ENTITY_TYPE","UmbMediaCollectionRepository","UmbRepositoryBase","#collectionSource"],"mappings":";;;;AAQO,MAAMA,EAAmG;AAAA,EAC/GC;AAAA,EAEA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA,EAGd,MAAM,cAAcC,GAAuC;AAC1D,UAAMC,IAAQ;AAAA,MACb,IAAID,EAAO,UAAU;AAAA,MACrB,YAAYA,EAAO;AAAA,MACnB,SAASA,EAAO,WAAW;AAAA,MAC3B,gBAAgBA,EAAO,mBAAmB,QAAQE,EAAe,YAAYA,EAAe;AAAA,MAC5F,QAAQF,EAAO;AAAA,MACf,MAAMA,EAAO,QAAQ;AAAA,MACrB,MAAMA,EAAO,QAAQ;AAAA,IACtB,GAEM,EAAE,MAAAG,GAAM,OAAAC,EAAM,IAAI,MAAMC,EAAW,KAAKP,IAAOQ,EAAa,mBAAmB,EAAE,OAAAL,EAAO,CAAA,CAAC;AAE/F,WAAIE,IAuBI,EAAE,MAAM,EAAE,OAtBHA,EAAK,MAAM,IAAI,CAACI,MAAuC;AAE9D,YAAAC,IAAUD,EAAK,SAAS,CAAC;AAiBxB,aAfoC;AAAA,QAC1C,QAAQA,EAAK;AAAA,QACb,YAAYE;AAAA,QACZ,kBAAkBF,EAAK,UAAU;AAAA,QACjC,YAAY,IAAI,KAAKC,EAAQ,UAAU;AAAA,QACvC,SAASD,EAAK;AAAA,QACd,MAAMA,EAAK,UAAU;AAAA,QACrB,MAAMC,EAAQ;AAAA,QACd,WAAWD,EAAK;AAAA,QAChB,YAAY,IAAI,KAAKC,EAAQ,UAAU;AAAA,QACvC,SAASD,EAAK;AAAA;AAAA,QACd,QAAQA,EAAK,OAAO,IAAI,CAACA,OACjB,EAAE,OAAOA,EAAK,OAAO,OAAOA,EAAK,MAAgB,EACxD;AAAA,MACF;AAAA,IACO,CACP,GAEuB,OAAOJ,EAAK,QAAQ,IAGtC,EAAE,OAAAC,EAAM;AAAA,EAAA;AAEjB;AClDO,MAAMM,UAAqCC,EAAqD;AAAA,EACtGC;AAAA,EAEA,YAAYb,GAAyB;AACpC,UAAMA,CAAI,GAEL,KAAAa,KAAoB,IAAIf,EAAmCE,CAAI;AAAA,EAAA;AAAA,EAGrE,MAAM,0BAA0B;AACxB,WAAA;AAAA;AAAA,MAEN,mBAAmB;AAAA,IACpB;AAAA,EAAA;AAAA,EAGD,MAAM,kBAAkBE,GAAsC;AACtD,WAAA,KAAKW,GAAkB,cAAcX,CAAK;AAAA,EAAA;AAEnD;"}