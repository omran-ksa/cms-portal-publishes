{"version":3,"file":"imaging.store-COwLNIg-.js","sources":["../../../src/packages/media/imaging/imaging.store.ts"],"sourcesContent":["import { UMB_IMAGING_STORE_CONTEXT } from './imaging.store.token.js';\r\nimport type { UmbImagingResizeModel } from './types.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\n\r\nexport class UmbImagingStore extends UmbContextBase implements UmbApi {\r\n\t#data;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_IMAGING_STORE_CONTEXT.toString());\r\n\t\tthis.#data = new Map<string, Map<string, string>>();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the data from the store.\r\n\t * @param {string} unique - The media key\r\n\t * @returns {Map<string, string> | undefined} - The data if it exists\r\n\t */\r\n\tgetData(unique: string) {\r\n\t\treturn this.#data.get(unique);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a specific crop if it exists.\r\n\t * @param {string} unique - The media key\r\n\t * @param {string} data - The resize configuration\r\n\t * @returns {string | undefined} - The crop if it exists\r\n\t */\r\n\tgetCrop(unique: string, data?: UmbImagingResizeModel) {\r\n\t\treturn this.#data.get(unique)?.get(this.#generateCropKey(data));\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new crop to the store.\r\n\t * @param {string} unique - The media key\r\n\t * @param {string} urlInfo - The URL of the crop\r\n\t * @param { | undefined} data - The resize configuration\r\n\t */\r\n\taddCrop(unique: string, urlInfo: string, data?: UmbImagingResizeModel) {\r\n\t\tif (!this.#data.has(unique)) {\r\n\t\t\tthis.#data.set(unique, new Map());\r\n\t\t}\r\n\t\tthis.#data.get(unique)?.set(this.#generateCropKey(data), urlInfo);\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a unique key for the crop based on the width, height and mode.\r\n\t * @param {UmbImagingResizeModel} data - The resize configuration\r\n\t * @returns {string} - The crop key\r\n\t */\r\n\t#generateCropKey(data?: UmbImagingResizeModel) {\r\n\t\treturn data ? `${data.width}x${data.height};${data.mode}` : 'generic';\r\n\t}\r\n}\r\n\r\nexport default UmbImagingStore;\r\n"],"names":["UmbImagingStore","UmbContextBase","#data","host","UMB_IMAGING_STORE_CONTEXT","unique","data","#generateCropKey","urlInfo"],"mappings":";;AAMO,MAAMA,UAAwBC,EAAiC;AAAA,EACrEC;AAAA,EAEA,YAAYC,GAAyB;AAC9B,UAAAA,GAAMC,EAA0B,UAAU,GAC3C,KAAAF,yBAAY,IAAiC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQnD,QAAQG,GAAgB;AAChB,WAAA,KAAKH,GAAM,IAAIG,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS7B,QAAQA,GAAgBC,GAA8B;AAC9C,WAAA,KAAKJ,GAAM,IAAIG,CAAM,GAAG,IAAI,KAAKE,GAAiBD,CAAI,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS/D,QAAQD,GAAgBG,GAAiBF,GAA8B;AACtE,IAAK,KAAKJ,GAAM,IAAIG,CAAM,KACzB,KAAKH,GAAM,IAAIG,GAAQ,oBAAI,KAAK,GAE5B,KAAAH,GAAM,IAAIG,CAAM,GAAG,IAAI,KAAKE,GAAiBD,CAAI,GAAGE,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjED,GAAiBD,GAA8B;AACvC,WAAAA,IAAO,GAAGA,EAAK,KAAK,IAAIA,EAAK,MAAM,IAAIA,EAAK,IAAI,KAAK;AAAA,EAAA;AAE9D;"}