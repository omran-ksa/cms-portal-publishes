{"version":3,"file":"trash.repository-DjBnokmZ.js","sources":["../../../src/packages/media/media/recycle-bin/entity-action/bulk-trash/repository/trash.repository.ts"],"sourcesContent":["import { UmbMediaRecycleBinServerDataSource } from '../../../repository/media-recycle-bin.server.data-source.js';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport type { UmbBulkTrashRepository, UmbBulkTrashRequestArgs } from '@umbraco-cms/backoffice/entity-bulk-action';\r\nimport type { UmbRepositoryErrorResponse } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDeprecation } from '@umbraco-cms/backoffice/utils';\r\n\r\n/**\r\n * @deprecated since 15.3.0. Will be removed in 17.0.0. Call trash method on UmbMediaRecycleBinRepository instead.\r\n */\r\nexport class UmbBulkTrashMediaRepository extends UmbRepositoryBase implements UmbBulkTrashRepository {\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\t#recycleBinSource = new UmbMediaRecycleBinServerDataSource(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tnew UmbDeprecation({\r\n\t\t\tremoveInVersion: '17.0.0',\r\n\t\t\tdeprecated: 'UmbBulkTrashDocumentRepository',\r\n\t\t\tsolution: 'Call trash method on UmbMediaRecycleBinRepository instead.',\r\n\t\t}).warn();\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n\t\t\tthis.#notificationContext = notificationContext;\r\n\t\t});\r\n\t}\r\n\r\n\tasync requestBulkTrash(args: UmbBulkTrashRequestArgs): Promise<UmbRepositoryErrorResponse> {\r\n\t\tlet count = 0;\r\n\r\n\t\tfor (const unique of args.uniques) {\r\n\t\t\tconst { error } = await this.#recycleBinSource.trash({ unique });\r\n\r\n\t\t\tif (error) {\r\n\t\t\t\tconst notification = { data: { message: error.message } };\r\n\t\t\t\tthis.#notificationContext?.peek('danger', notification);\r\n\t\t\t} else {\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (count > 0) {\r\n\t\t\tconst notification = { data: { message: `Trashed ${count} media ${count === 1 ? 'item' : 'items'}` } };\r\n\t\t\tthis.#notificationContext?.peek('positive', notification);\r\n\t\t}\r\n\r\n\t\treturn {};\r\n\t}\r\n}\r\n\r\nexport { UmbBulkTrashMediaRepository as api };\r\n"],"names":["UmbBulkTrashMediaRepository","UmbRepositoryBase","#notificationContext","#recycleBinSource","UmbMediaRecycleBinServerDataSource","host","UmbDeprecation","UMB_NOTIFICATION_CONTEXT","notificationContext","args","count","unique","error","notification"],"mappings":";;;;AAWO,MAAMA,UAAoCC,EAAoD;AAAA,EACpGC;AAAA,EACAC,KAAoB,IAAIC,EAAmC,IAAI;AAAA,EAE/D,YAAYC,GAAyB;AACpC,UAAMA,CAAI,GAEV,IAAIC,EAAe;AAAA,MAClB,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,UAAU;AAAA,IACV,CAAA,EAAE,KAAK,GAEH,KAAA,eAAeC,GAA0B,CAACC,MAAwB;AACtE,WAAKN,KAAuBM;AAAA,IAAA,CAC5B;AAAA,EAAA;AAAA,EAGF,MAAM,iBAAiBC,GAAoE;AAC1F,QAAIC,IAAQ;AAED,eAAAC,KAAUF,EAAK,SAAS;AAC5B,YAAA,EAAE,OAAAG,MAAU,MAAM,KAAKT,GAAkB,MAAM,EAAE,QAAAQ,GAAQ;AAE/D,UAAIC,GAAO;AACV,cAAMC,IAAe,EAAE,MAAM,EAAE,SAASD,EAAM,UAAU;AACnD,aAAAV,IAAsB,KAAK,UAAUW,CAAY;AAAA,MAAA;AAEtD,QAAAH;AAAA,IACD;AAGD,QAAIA,IAAQ,GAAG;AACd,YAAMG,IAAe,EAAE,MAAM,EAAE,SAAS,WAAWH,CAAK,UAAUA,MAAU,IAAI,SAAS,OAAO,KAAK;AAChG,WAAAR,IAAsB,KAAK,YAAYW,CAAY;AAAA,IAAA;AAGzD,WAAO,CAAC;AAAA,EAAA;AAEV;"}