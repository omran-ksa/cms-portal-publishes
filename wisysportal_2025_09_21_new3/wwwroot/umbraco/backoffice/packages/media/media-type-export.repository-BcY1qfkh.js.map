{"version":3,"file":"media-type-export.repository-BcY1qfkh.js","sources":["../../../src/packages/media/media-types/entity-actions/export/repository/media-type-export.server.data-source.ts","../../../src/packages/media/media-types/entity-actions/export/repository/media-type-export.repository.ts"],"sourcesContent":["import { MediaTypeService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * Export Media Server Data Source\r\n * @export\r\n * @class UmbExportMediaTypeServerDataSource\r\n */\r\nexport class UmbExportMediaTypeServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbExportMediaTypeServerDataSource.\r\n\t * @param {UmbControllerHost} host\r\n\t * @memberof UmbExportMediaTypeServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Export an item for the given id to the destination unique\r\n\t * @param {unique} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbExportMediaTypeServerDataSource\r\n\t */\r\n\tasync export(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn tryExecute(this.#host, MediaTypeService.getMediaTypeByIdExport({ path: { id: unique } }));\r\n\t}\r\n}\r\n","import { UmbExportMediaTypeServerDataSource } from './media-type-export.server.data-source.js';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbExportMediaTypeRepository extends UmbRepositoryBase {\r\n\t#exportSource = new UmbExportMediaTypeServerDataSource(this);\r\n\r\n\tasync requestExport(unique: string) {\r\n\t\tconst { data, error } = await this.#exportSource.export(unique);\r\n\r\n\t\tif (!error) {\r\n\t\t\tconst notificationContext = await this.getContext(UMB_NOTIFICATION_CONTEXT);\r\n\t\t\tif (!notificationContext) {\r\n\t\t\t\tthrow new Error('Notification context not found');\r\n\t\t\t}\r\n\t\t\tconst notification = { data: { message: `Exported` } };\r\n\t\t\tnotificationContext.peek('positive', notification);\r\n\t\t}\r\n\r\n\t\treturn { data, error };\r\n\t}\r\n}\r\n\r\nexport { UmbExportMediaTypeRepository as api };\r\n"],"names":["UmbExportMediaTypeServerDataSource","#host","host","unique","tryExecute","MediaTypeService","UmbExportMediaTypeRepository","UmbRepositoryBase","#exportSource","data","error","notificationContext","UMB_NOTIFICATION_CONTEXT","notification"],"mappings":";;;;AASO,MAAMA,EAAmC;AAAA,EAC/CC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,OAAOC,GAAgB;AAC5B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAEhD,WAAOC,EAAW,KAAKH,IAAOI,EAAiB,uBAAuB,EAAE,MAAM,EAAE,IAAIF,EAAA,EAAU,CAAA,CAAC;AAAA,EAAA;AAEjG;AC5BO,MAAMG,UAAqCC,EAAkB;AAAA,EACnEC,KAAgB,IAAIR,EAAmC,IAAI;AAAA,EAE3D,MAAM,cAAcG,GAAgB;AAC7B,UAAA,EAAE,MAAAM,GAAM,OAAAC,EAAM,IAAI,MAAM,KAAKF,GAAc,OAAOL,CAAM;AAE9D,QAAI,CAACO,GAAO;AACX,YAAMC,IAAsB,MAAM,KAAK,WAAWC,CAAwB;AAC1E,UAAI,CAACD;AACE,cAAA,IAAI,MAAM,gCAAgC;AAEjD,YAAME,IAAe,EAAE,MAAM,EAAE,SAAS,aAAa;AACjC,MAAAF,EAAA,KAAK,YAAYE,CAAY;AAAA,IAAA;AAG3C,WAAA,EAAE,MAAAJ,GAAM,OAAAC,EAAM;AAAA,EAAA;AAEvB;"}