{"version":3,"file":"media-type-tree.repository-B2QordZN.js","sources":["../../../src/packages/media/media-types/tree/media-type-tree.server.data-source.ts","../../../src/packages/media/media-types/tree/media-type-tree.repository.ts"],"sourcesContent":["import {\r\n\tUMB_MEDIA_TYPE_ENTITY_TYPE,\r\n\tUMB_MEDIA_TYPE_FOLDER_ENTITY_TYPE,\r\n\tUMB_MEDIA_TYPE_ROOT_ENTITY_TYPE,\r\n} from '../entity.js';\r\nimport type { UmbMediaTypeTreeItemModel } from './types.js';\r\nimport type { MediaTypeTreeItemResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { MediaTypeService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type {\r\n\tUmbTreeAncestorsOfRequestArgs,\r\n\tUmbTreeChildrenOfRequestArgs,\r\n\tUmbTreeRootItemsRequestArgs,\r\n} from '@umbraco-cms/backoffice/tree';\r\nimport { UmbTreeServerDataSourceBase } from '@umbraco-cms/backoffice/tree';\r\n\r\n/**\r\n * A data source for the Media Type tree that fetches data from the server\r\n * @class UmbMediaTypeTreeServerDataSource\r\n * @augments {UmbTreeServerDataSourceBase}\r\n */\r\nexport class UmbMediaTypeTreeServerDataSource extends UmbTreeServerDataSourceBase<\r\n\tMediaTypeTreeItemResponseModel,\r\n\tUmbMediaTypeTreeItemModel\r\n> {\r\n\t/**\r\n\t * Creates an instance of UmbMediaTypeTreeServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbMediaTypeTreeServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, {\r\n\t\t\tgetRootItems,\r\n\t\t\tgetChildrenOf,\r\n\t\t\tgetAncestorsOf,\r\n\t\t\tmapper,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst getRootItems = (args: UmbTreeRootItemsRequestArgs) =>\r\n\t// eslint-disable-next-line local-rules/no-direct-api-import\r\n\tMediaTypeService.getTreeMediaTypeRoot({\r\n\t\tquery: { foldersOnly: args.foldersOnly, skip: args.skip, take: args.take },\r\n\t});\r\n\r\nconst getChildrenOf = (args: UmbTreeChildrenOfRequestArgs) => {\r\n\tif (args.parent.unique === null) {\r\n\t\treturn getRootItems(args);\r\n\t} else {\r\n\t\t// eslint-disable-next-line local-rules/no-direct-api-import\r\n\t\treturn MediaTypeService.getTreeMediaTypeChildren({\r\n\t\t\tquery: { parentId: args.parent.unique, foldersOnly: args.foldersOnly, skip: args.skip, take: args.take },\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst getAncestorsOf = (args: UmbTreeAncestorsOfRequestArgs) =>\r\n\t// eslint-disable-next-line local-rules/no-direct-api-import\r\n\tMediaTypeService.getTreeMediaTypeAncestors({\r\n\t\tquery: { descendantId: args.treeItem.unique },\r\n\t});\r\n\r\nconst mapper = (item: MediaTypeTreeItemResponseModel): UmbMediaTypeTreeItemModel => {\r\n\treturn {\r\n\t\tunique: item.id,\r\n\t\tparent: {\r\n\t\t\tunique: item.parent ? item.parent.id : null,\r\n\t\t\tentityType: item.parent ? UMB_MEDIA_TYPE_ENTITY_TYPE : UMB_MEDIA_TYPE_ROOT_ENTITY_TYPE,\r\n\t\t},\r\n\t\tname: item.name,\r\n\t\tentityType: item.isFolder ? UMB_MEDIA_TYPE_FOLDER_ENTITY_TYPE : UMB_MEDIA_TYPE_ENTITY_TYPE,\r\n\t\thasChildren: item.hasChildren,\r\n\t\tisFolder: item.isFolder,\r\n\t\ticon: item.icon,\r\n\t};\r\n};\r\n","import { UMB_MEDIA_TYPE_ROOT_ENTITY_TYPE } from '../entity.js';\r\nimport { UmbMediaTypeTreeServerDataSource } from './media-type-tree.server.data-source.js';\r\nimport { UMB_MEDIA_TYPE_TREE_STORE_CONTEXT } from './media-type-tree.store.context-token.js';\r\nimport type { UmbMediaTypeTreeItemModel, UmbMediaTypeTreeRootModel } from './types.js';\r\nimport { UmbTreeRepositoryBase } from '@umbraco-cms/backoffice/tree';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\n\r\nexport class UmbMediaTypeTreeRepository\r\n\textends UmbTreeRepositoryBase<UmbMediaTypeTreeItemModel, UmbMediaTypeTreeRootModel>\r\n\timplements UmbApi\r\n{\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbMediaTypeTreeServerDataSource, UMB_MEDIA_TYPE_TREE_STORE_CONTEXT);\r\n\t}\r\n\r\n\tasync requestTreeRoot() {\r\n\t\tconst { data: treeRootData } = await this._treeSource.getRootItems({ skip: 0, take: 1 });\r\n\t\tconst hasChildren = treeRootData ? treeRootData.total > 0 : false;\r\n\r\n\t\tconst data: UmbMediaTypeTreeRootModel = {\r\n\t\t\tunique: null,\r\n\t\t\tentityType: UMB_MEDIA_TYPE_ROOT_ENTITY_TYPE,\r\n\t\t\tname: '#treeHeaders_mediaTypes',\r\n\t\t\thasChildren,\r\n\t\t\tisFolder: true,\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n}\r\n\r\nexport default UmbMediaTypeTreeRepository;\r\n"],"names":["UmbMediaTypeTreeServerDataSource","UmbTreeServerDataSourceBase","host","getRootItems","getChildrenOf","getAncestorsOf","mapper","args","MediaTypeService","item","UMB_MEDIA_TYPE_ENTITY_TYPE","UMB_MEDIA_TYPE_ROOT_ENTITY_TYPE","UMB_MEDIA_TYPE_FOLDER_ENTITY_TYPE","UmbMediaTypeTreeRepository","UmbTreeRepositoryBase","UMB_MEDIA_TYPE_TREE_STORE_CONTEXT","treeRootData","hasChildren"],"mappings":";;;AAqBO,MAAMA,UAAyCC,EAGpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,YAAYC,GAAyB;AACpC,UAAMA,GAAM;AAAA,MACX,cAAAC;AAAA,MACA,eAAAC;AAAA,MACA,gBAAAC;AAAA,MACA,QAAAC;AAAA,IAAA,CACA;AAAA,EAAA;AAEH;AAEA,MAAMH,IAAe,CAACI;AAAA;AAAA,EAErBC,EAAiB,qBAAqB;AAAA,IACrC,OAAO,EAAE,aAAaD,EAAK,aAAa,MAAMA,EAAK,MAAM,MAAMA,EAAK,KAAK;AAAA,EACzE,CAAA;AAAA,GAEIH,IAAgB,CAACG,MAClBA,EAAK,OAAO,WAAW,OACnBJ,EAAaI,CAAI,IAGjBC,EAAiB,yBAAyB;AAAA,EAChD,OAAO,EAAE,UAAUD,EAAK,OAAO,QAAQ,aAAaA,EAAK,aAAa,MAAMA,EAAK,MAAM,MAAMA,EAAK,KAAK;AAAA,CACvG,GAIGF,IAAiB,CAACE;AAAA;AAAA,EAEvBC,EAAiB,0BAA0B;AAAA,IAC1C,OAAO,EAAE,cAAcD,EAAK,SAAS,OAAO;AAAA,EAC5C,CAAA;AAAA,GAEID,IAAS,CAACG,OACR;AAAA,EACN,QAAQA,EAAK;AAAA,EACb,QAAQ;AAAA,IACP,QAAQA,EAAK,SAASA,EAAK,OAAO,KAAK;AAAA,IACvC,YAAYA,EAAK,SAASC,IAA6BC;AAAA,EACxD;AAAA,EACA,MAAMF,EAAK;AAAA,EACX,YAAYA,EAAK,WAAWG,IAAoCF;AAAA,EAChE,aAAaD,EAAK;AAAA,EAClB,UAAUA,EAAK;AAAA,EACf,MAAMA,EAAK;AACZ;ACnEM,MAAMI,UACJC,EAET;AAAA,EACC,YAAYZ,GAAyB;AAC9B,UAAAA,GAAMF,GAAkCe,CAAiC;AAAA,EAAA;AAAA,EAGhF,MAAM,kBAAkB;AACvB,UAAM,EAAE,MAAMC,EAAa,IAAI,MAAM,KAAK,YAAY,aAAa,EAAE,MAAM,GAAG,MAAM,GAAG,GACjFC,IAAcD,IAAeA,EAAa,QAAQ,IAAI;AAU5D,WAAO,EAAE,MAR+B;AAAA,MACvC,QAAQ;AAAA,MACR,YAAYL;AAAA,MACZ,MAAM;AAAA,MACN,aAAAM;AAAA,MACA,UAAU;AAAA,IACX,EAEc;AAAA,EAAA;AAEhB;"}