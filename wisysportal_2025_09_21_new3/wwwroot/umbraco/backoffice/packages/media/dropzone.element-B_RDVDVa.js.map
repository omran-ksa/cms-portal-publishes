{"version":3,"file":"dropzone.element-B_RDVDVa.js","sources":["../../../src/packages/media/media/collection/repository/constants.ts","../../../src/packages/media/media/collection/views/constants.ts","../../../src/packages/media/media/collection/constants.ts","../../../src/packages/media/media/entity-actions/move-to/repository/constants.ts","../../../src/packages/media/media/entity-actions/sort-children-of/repository/constants.ts","../../../src/packages/media/media/entity-bulk-actions/move-to/repository/constants.ts","../../../src/packages/media/media/menu/constants.ts","../../../src/packages/media/media/url/repository/constants.ts","../../../src/packages/media/media/recycle-bin/tree/constants.ts","../../../src/packages/media/media/recycle-bin/repository/constants.ts","../../../src/packages/media/media/recycle-bin/entity-action/bulk-trash/repository/constants.ts","../../../src/packages/media/media/recycle-bin/constants.ts","../../../src/packages/media/media/reference/repository/constants.ts","../../../src/packages/media/media/repository/detail/constants.ts","../../../src/packages/media/media/repository/validation/constants.ts","../../../src/packages/media/media/search/global-search/constants.ts","../../../src/packages/media/media/tree/constants.ts","../../../src/packages/media/media/workspace/constants.ts","../../../src/packages/media/media/dropzone/modals/dropzone-media-type-picker/dropzone-media-type-picker-modal.element.ts","../../../src/packages/media/media/dropzone/modals/dropzone-media-type-picker/dropzone-media-type-picker-modal.token.ts","../../../src/packages/media/media/dropzone/media-dropzone.manager.ts","../../../src/packages/media/media/dropzone/dropzone-media.element.ts","../../../src/packages/media/media/dropzone/dropzone.element.ts"],"sourcesContent":["export const UMB_MEDIA_COLLECTION_REPOSITORY_ALIAS = 'Umb.Repository.MediaCollection';\r\n","export const UMB_MEDIA_GRID_COLLECTION_VIEW_ALIAS = 'Umb.CollectionView.Media.Grid';\r\nexport const UMB_MEDIA_TABLE_COLLECTION_VIEW_ALIAS = 'Umb.CollectionView.Media.Table';\r\n","export const UMB_MEDIA_COLLECTION_ALIAS = 'Umb.Collection.Media';\r\nexport * from './repository/constants.js';\r\nexport * from './views/constants.js';\r\nexport { UMB_MEDIA_COLLECTION_CONTEXT } from './media-collection.context-token.js';\r\n","export const UMB_MOVE_MEDIA_REPOSITORY_ALIAS = 'Umb.Repository.Media.Move';\r\n","export const UMB_SORT_CHILDREN_OF_MEDIA_REPOSITORY_ALIAS = 'Umb.Repository.Media.SortChildrenOf';\r\n","export const UMB_BULK_MOVE_MEDIA_REPOSITORY_ALIAS = 'Umb.Repository.Media.BulkMove';\r\n","export const UMB_MEDIA_MENU_ALIAS = 'Umb.Menu.Media';\r\n","export const UMB_MEDIA_URL_REPOSITORY_ALIAS = 'Umb.Repository.Media.Url';\r\nexport const UMB_MEDIA_URL_STORE_ALIAS = 'Umb.Store.MediaUrl';\r\nexport { UMB_MEDIA_URL_STORE_CONTEXT } from './media-url.store.context-token.js';\r\n","export const UMB_MEDIA_RECYCLE_BIN_TREE_REPOSITORY_ALIAS = 'Umb.Repository.Media.RecycleBin.Tree';\r\nexport const UMB_MEDIA_RECYCLE_BIN_TREE_STORE_ALIAS = 'Umb.Store.Media.RecycleBin.Tree';\r\nexport const UMB_MEDIA_RECYCLE_BIN_TREE_ALIAS = 'Umb.Tree.Media.RecycleBin';\r\n\r\nexport { UMB_MEDIA_RECYCLE_BIN_TREE_STORE_CONTEXT } from './media-recycle-bin-tree.store.context-token.js';\r\n","export const UMB_MEDIA_RECYCLE_BIN_REPOSITORY_ALIAS = 'Umb.Repository.Media.RecycleBin';\r\n","export const UMB_BULK_TRASH_MEDIA_REPOSITORY_ALIAS = 'Umb.Repository.Media.BulkTrash';\r\n","export * from './tree/constants.js';\r\nexport * from './repository/constants.js';\r\nexport * from './entity-action/constants.js';\r\nexport const UMB_MEDIA_RECYCLE_BIN_ROOT_ENTITY_TYPE = 'media-recycle-bin-root';\r\n","export const UMB_MEDIA_REFERENCE_REPOSITORY_ALIAS = 'Umb.Repository.Media.Reference';\r\n","export const UMB_MEDIA_DETAIL_REPOSITORY_ALIAS = 'Umb.Repository.Media.Detail';\r\nexport const UMB_MEDIA_DETAIL_STORE_ALIAS = 'Umb.Store.Media.Detail';\r\nexport { UMB_MEDIA_DETAIL_STORE_CONTEXT } from './media-detail.store.context-token.js';\r\n","export const UMB_MEDIA_VALIDATION_REPOSITORY_ALIAS = 'Umb.Repository.Document.Validation';\r\n","export const UMB_MEDIA_GLOBAL_SEARCH_ALIAS = 'Umb.GlobalSearch.Media';\r\n","export const UMB_MEDIA_TREE_REPOSITORY_ALIAS = 'Umb.Repository.Media.Tree';\r\nexport const UMB_MEDIA_TREE_STORE_ALIAS = 'Umb.Store.Media.Tree';\r\nexport const UMB_MEDIA_TREE_ALIAS = 'Umb.Tree.Media';\r\nexport { UMB_MEDIA_TREE_STORE_CONTEXT } from './media-tree.store.context-token.js';\r\nexport { UMB_MEDIA_TREE_PICKER_MODAL } from './media-tree-picker-modal.token.js';\r\n","import type { UmbMediaVariantModel } from '../types.js';\r\n\r\nexport * from './media-workspace.context-token.js';\r\n\r\nexport const UMB_MEDIA_WORKSPACE_ALIAS = 'Umb.Workspace.Media';\r\n\r\nexport const UMB_MEMBER_DETAIL_MODEL_VARIANT_SCAFFOLD: UmbMediaVariantModel = {\r\n\tculture: null,\r\n\tsegment: null,\r\n\tname: '',\r\n\tcreateDate: null,\r\n\tupdateDate: null,\r\n} as const;\r\n","import type {\r\n\tUmbDropzoneMediaTypePickerModalData,\r\n\tUmbDropzoneMediaTypePickerModalValue,\r\n} from './dropzone-media-type-picker-modal.token.js';\r\nimport { css, customElement, html, query, repeat, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbModalBaseElement } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\nimport type { UmbAllowedMediaTypeModel } from '@umbraco-cms/backoffice/media-type';\r\nimport type { UUIButtonElement } from '@umbraco-cms/backoffice/external/uui';\r\nimport type { UmbEntityUnique } from '@umbraco-cms/backoffice/entity';\r\n\r\n@customElement('umb-dropzone-media-type-picker-modal')\r\nexport class UmbDropzoneMediaTypePickerModalElement extends UmbModalBaseElement<\r\n\tUmbDropzoneMediaTypePickerModalData,\r\n\tUmbDropzoneMediaTypePickerModalValue\r\n> {\r\n\t@state()\r\n\tprivate _options: Array<UmbAllowedMediaTypeModel> = [];\r\n\r\n\t@query('#auto')\r\n\tprivate _buttonAuto!: UUIButtonElement;\r\n\r\n\toverride connectedCallback() {\r\n\t\tsuper.connectedCallback();\r\n\t\tthis._options = this.data?.options ?? [];\r\n\t\trequestAnimationFrame(() => this._buttonAuto.focus());\r\n\t}\r\n\r\n\t#onAutoPick() {\r\n\t\tthis.value = { mediaTypeUnique: undefined };\r\n\t\tthis._submitModal();\r\n\t}\r\n\r\n\t#onMediaTypePick(unique: UmbEntityUnique) {\r\n\t\tif (!unique) {\r\n\t\t\tthrow new Error('Invalid media type unique');\r\n\t\t}\r\n\t\tthis.value = { mediaTypeUnique: unique };\r\n\t\tthis._submitModal();\r\n\t}\r\n\r\n\toverride render() {\r\n\t\treturn html` <div id=\"options\">\r\n\t\t\t<uui-button id=\"auto\" look=\"secondary\" @click=${() => this.#onAutoPick()} label=\"Automatically\" compact>\r\n\t\t\t\t<umb-icon name=\"icon-wand\"></umb-icon> Auto pick\r\n\t\t\t</uui-button>\r\n\t\t\t${repeat(\r\n\t\t\t\tthis._options,\r\n\t\t\t\t(option) => option.unique,\r\n\t\t\t\t(option) =>\r\n\t\t\t\t\thtml`<uui-button\r\n\t\t\t\t\t\tlook=\"secondary\"\r\n\t\t\t\t\t\t@click=${() => this.#onMediaTypePick(option.unique)}\r\n\t\t\t\t\t\tlabel=${option.name}\r\n\t\t\t\t\t\tcompact>\r\n\t\t\t\t\t\t<umb-icon .name=${option.icon ?? 'icon-circle-dotted'}></umb-icon>${option.name}\r\n\t\t\t\t\t</uui-button>`,\r\n\t\t\t)}\r\n\t\t</div>`;\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\tUmbTextStyles,\r\n\t\tcss`\r\n\t\t\t#options {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tmargin: var(--uui-size-layout-1);\r\n\t\t\t\tgap: var(--uui-size-3);\r\n\t\t\t}\r\n\t\t\tuui-button {\r\n\t\t\t\twidth: 150px;\r\n\t\t\t\theight: 150px;\r\n\t\t\t}\r\n\t\t\tumb-icon {\r\n\t\t\t\tfont-size: var(--uui-size-10);\r\n\t\t\t\tmargin-bottom: var(--uui-size-2);\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbDropzoneMediaTypePickerModalElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-dropzone-media-type-picker-modal': UmbDropzoneMediaTypePickerModalElement;\r\n\t}\r\n}\r\n","import type { UmbAllowedMediaTypeModel } from '@umbraco-cms/backoffice/media-type';\r\nimport { UmbModalToken } from '@umbraco-cms/backoffice/modal';\r\n\r\nexport interface UmbDropzoneMediaTypePickerModalData {\r\n\toptions: Array<UmbAllowedMediaTypeModel>;\r\n\tfiles?: Array<File>;\r\n}\r\n\r\nexport type UmbDropzoneMediaTypePickerModalValue = {\r\n\tmediaTypeUnique: string | undefined;\r\n};\r\n\r\nexport const UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL = new UmbModalToken<\r\n\tUmbDropzoneMediaTypePickerModalData,\r\n\tUmbDropzoneMediaTypePickerModalValue\r\n>('Umb.Modal.Dropzone.MediaTypePicker', {\r\n\tmodal: {\r\n\t\ttype: 'dialog',\r\n\t},\r\n});\r\n","import { UmbMediaDetailRepository } from '../repository/detail/index.js';\r\nimport type { UmbMediaDetailModel, UmbMediaValueModel } from '../types.js';\r\nimport { UMB_MEDIA_PROPERTY_VALUE_ENTITY_TYPE } from '../entity.js';\r\nimport { UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL } from './modals/index.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport {\r\n\tUmbDropzoneManager,\r\n\tUmbFileDropzoneItemStatus,\r\n\ttype UmbFileDropzoneDroppedItems,\r\n\ttype UmbUploadableFile,\r\n\ttype UmbUploadableFolder,\r\n\ttype UmbUploadableItem,\r\n} from '@umbraco-cms/backoffice/dropzone';\r\nimport {\r\n\tUmbMediaTypeStructureRepository,\r\n\ttype UmbAllowedChildrenOfMediaType,\r\n\ttype UmbAllowedMediaTypeModel,\r\n\ttype UmbAllowedMediaTypesOfExtension,\r\n} from '@umbraco-cms/backoffice/media-type';\r\nimport { UmbArrayState } from '@umbraco-cms/backoffice/observable-api';\r\nimport { TemporaryFileStatus } from '@umbraco-cms/backoffice/temporary-file';\r\nimport { umbOpenModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\n\r\nexport class UmbMediaDropzoneManager extends UmbDropzoneManager {\r\n\t// The available media types for a file extension.\r\n\treadonly #availableMediaTypesOf = new UmbArrayState<UmbAllowedMediaTypesOfExtension>([], (x) => x.extension);\r\n\r\n\t// The media types that the parent will allow to be created under it.\r\n\treadonly #allowedChildrenOf = new UmbArrayState<UmbAllowedChildrenOfMediaType>([], (x) => x.mediaTypeUnique);\r\n\r\n\t#mediaTypeStructure = new UmbMediaTypeStructureRepository(this);\r\n\t#mediaDetailRepository = new UmbMediaDetailRepository(this);\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\t#localization = new UmbLocalizationController(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (context) => {\r\n\t\t\tthis.#notificationContext = context;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Uploads files and folders to the server and creates the media items with corresponding media type.\\\r\n\t * Allows the user to pick a media type option if multiple types are allowed.\r\n\t * @param {UmbFileDropzoneDroppedItems} items - The files and folders to upload.\r\n\t * @param {string | null} parentUnique - Where the items should be uploaded.\r\n\t * @returns {Array<UmbUploadableItem>} - The items about to be uploaded.\r\n\t */\r\n\tpublic createMediaItems(\r\n\t\titems: UmbFileDropzoneDroppedItems,\r\n\t\tparentUnique: string | null = null,\r\n\t): Array<UmbUploadableItem> {\r\n\t\tconst uploadableItems = this._setupProgress(items, parentUnique);\r\n\r\n\t\tif (!uploadableItems.length) return [];\r\n\r\n\t\tif (uploadableItems.length === 1) {\r\n\t\t\t// When there is only one item being uploaded, allow the user to pick the media type, if more than one is allowed.\r\n\t\t\tthis.#createOneMediaItem(uploadableItems[0]);\r\n\t\t} else {\r\n\t\t\t// When there are multiple items being uploaded, automatically pick the media types for each item. We probably want to allow the user to pick the media type in the future.\r\n\t\t\tthis.#createMediaItems(uploadableItems);\r\n\t\t}\r\n\r\n\t\treturn uploadableItems;\r\n\t}\r\n\r\n\tasync #createMediaItems(uploadableItems: Array<UmbUploadableItem>) {\r\n\t\tfor (const item of uploadableItems) {\r\n\t\t\tconst options = await this.#getMediaTypeOptions(item);\r\n\t\t\tif (!options.length) {\r\n\t\t\t\tthis._updateStatus(item, UmbFileDropzoneItemStatus.NOT_ALLOWED);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst mediaTypeUnique = options[0].unique;\r\n\r\n\t\t\tif (!mediaTypeUnique) {\r\n\t\t\t\tthrow new Error('Media type unique is not defined');\r\n\t\t\t}\r\n\r\n\t\t\t// Handle files and folders differently: a file is uploaded as temp then created as a media item, and a folder is created as a media item directly\r\n\t\t\tif (item.temporaryFile) {\r\n\t\t\t\tthis.#handleFile(item as UmbUploadableFile, mediaTypeUnique);\r\n\t\t\t} else if (item.folder) {\r\n\t\t\t\tthis.#handleFolder(item as UmbUploadableFolder, mediaTypeUnique);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync #handleFile(item: UmbUploadableFile, mediaTypeUnique: string) {\r\n\t\t// Upload the file as a temporary file and update progress.\r\n\t\tconst temporaryFile = await this._tempFileManager.uploadOne(item.temporaryFile);\r\n\r\n\t\tif (temporaryFile.status === TemporaryFileStatus.CANCELLED) {\r\n\t\t\tthis._updateStatus(item, UmbFileDropzoneItemStatus.CANCELLED);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (temporaryFile.status !== TemporaryFileStatus.SUCCESS) {\r\n\t\t\tthis._updateStatus(item, UmbFileDropzoneItemStatus.ERROR);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Create the media item.\r\n\t\tconst scaffold = await this.#getItemScaffold(item, mediaTypeUnique);\r\n\t\tconst { data } = await this.#mediaDetailRepository.create(scaffold, item.parentUnique);\r\n\r\n\t\tif (data) {\r\n\t\t\tthis._updateStatus(item, UmbFileDropzoneItemStatus.COMPLETE);\r\n\t\t} else {\r\n\t\t\tthis._updateStatus(item, UmbFileDropzoneItemStatus.ERROR);\r\n\t\t}\r\n\t}\r\n\r\n\tasync #handleFolder(item: UmbUploadableFolder, mediaTypeUnique: string) {\r\n\t\tconst scaffold = await this.#getItemScaffold(item, mediaTypeUnique);\r\n\t\tconst { data } = await this.#mediaDetailRepository.create(scaffold, item.parentUnique);\r\n\t\tif (data) {\r\n\t\t\tthis._updateStatus(item, UmbFileDropzoneItemStatus.COMPLETE);\r\n\t\t} else {\r\n\t\t\tthis._updateStatus(item, UmbFileDropzoneItemStatus.ERROR);\r\n\t\t}\r\n\t}\r\n\r\n\t// Media types\r\n\tasync #getMediaTypeOptions(item: UmbUploadableItem): Promise<Array<UmbAllowedMediaTypeModel>> {\r\n\t\t// Check the parent which children media types are allowed\r\n\t\tconst parent = item.parentUnique ? await this.#mediaDetailRepository.requestByUnique(item.parentUnique) : null;\r\n\t\tconst allowedChildren = await this.#getAllowedChildrenOf(parent?.data?.mediaType.unique ?? null, item.parentUnique);\r\n\r\n\t\tconst extension = item.temporaryFile?.file.name.split('.').pop() ?? null;\r\n\r\n\t\t// Check which media types allow the file's extension\r\n\t\tconst availableMediaType = await this.#getAvailableMediaTypesOf(extension);\r\n\r\n\t\tif (!availableMediaType.length) return [];\r\n\r\n\t\tconst options = allowedChildren.filter((x) => availableMediaType.find((y) => y.unique === x.unique));\r\n\t\treturn options;\r\n\t}\r\n\r\n\tasync #getAvailableMediaTypesOf(extension: string | null) {\r\n\t\t// Check if we already have information on this file extension.\r\n\t\tconst available = this.#availableMediaTypesOf\r\n\t\t\t.getValue()\r\n\t\t\t.find((x) => x.extension === extension)?.availableMediaTypes;\r\n\t\tif (available) return available;\r\n\r\n\t\t// Request information on this file extension\r\n\t\tconst availableMediaTypes = extension\r\n\t\t\t? await this.#mediaTypeStructure.requestMediaTypesOf({ fileExtension: extension })\r\n\t\t\t: await this.#mediaTypeStructure.requestMediaTypesOfFolders();\r\n\r\n\t\tthis.#availableMediaTypesOf.appendOne({ extension, availableMediaTypes });\r\n\t\treturn availableMediaTypes;\r\n\t}\r\n\r\n\tasync #getAllowedChildrenOf(mediaTypeUnique: string | null, parentUnique: string | null) {\r\n\t\t//Check if we already got information on this media type.\r\n\t\tconst allowed = this.#allowedChildrenOf\r\n\t\t\t.getValue()\r\n\t\t\t.find((x) => x.mediaTypeUnique === mediaTypeUnique)?.allowedChildren;\r\n\t\tif (allowed) return allowed;\r\n\r\n\t\t// Request information on this media type.\r\n\t\tconst { data } = await this.#mediaTypeStructure.requestAllowedChildrenOf(mediaTypeUnique, parentUnique);\r\n\t\tif (!data) throw new Error('Parent media type does not exist');\r\n\r\n\t\tthis.#allowedChildrenOf.appendOne({ mediaTypeUnique, allowedChildren: data.items });\r\n\t\treturn data.items;\r\n\t}\r\n\r\n\t// Scaffold\r\n\tasync #getItemScaffold(item: UmbUploadableItem, mediaTypeUnique: string): Promise<UmbMediaDetailModel> {\r\n\t\t// TODO: Use a scaffolding feature to ensure consistency. [NL]\r\n\t\tconst name = item.temporaryFile ? item.temporaryFile.file.name : (item.folder?.name ?? '');\r\n\t\tconst umbracoFile: UmbMediaValueModel = {\r\n\t\t\teditorAlias: '',\r\n\t\t\talias: 'umbracoFile',\r\n\t\t\tvalue: { temporaryFileId: item.temporaryFile?.temporaryUnique },\r\n\t\t\tculture: null,\r\n\t\t\tsegment: null,\r\n\t\t\tentityType: UMB_MEDIA_PROPERTY_VALUE_ENTITY_TYPE,\r\n\t\t};\r\n\r\n\t\tconst preset: Partial<UmbMediaDetailModel> = {\r\n\t\t\tunique: item.unique,\r\n\t\t\tmediaType: { unique: mediaTypeUnique, collection: null },\r\n\t\t\tvariants: [{ culture: null, segment: null, createDate: null, updateDate: null, name }],\r\n\t\t\tvalues: item.temporaryFile ? [umbracoFile] : undefined,\r\n\t\t};\r\n\t\tconst { data } = await this.#mediaDetailRepository.createScaffold(preset);\r\n\t\treturn data!;\r\n\t}\r\n\r\n\tasync #showDialogMediaTypePicker(options: Array<UmbAllowedMediaTypeModel>) {\r\n\t\tconst value = await umbOpenModal(this, UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL, { data: { options } }).catch(\r\n\t\t\t() => undefined,\r\n\t\t);\r\n\t\treturn value?.mediaTypeUnique;\r\n\t}\r\n\r\n\tasync #createOneMediaItem(item: UmbUploadableItem) {\r\n\t\tconst options = await this.#getMediaTypeOptions(item);\r\n\t\tif (!options.length) {\r\n\t\t\tthis.#notificationContext?.peek('warning', {\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tmessage: `${this.#localization.term('media_disallowedFileType')}: ${item.temporaryFile?.file.name}.`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\treturn this._updateStatus(item, UmbFileDropzoneItemStatus.NOT_ALLOWED);\r\n\t\t}\r\n\r\n\t\tconst mediaTypeUnique = options.length > 1 ? await this.#showDialogMediaTypePicker(options) : options[0].unique;\r\n\r\n\t\tif (!mediaTypeUnique) {\r\n\t\t\treturn this._updateStatus(item, UmbFileDropzoneItemStatus.CANCELLED);\r\n\t\t}\r\n\r\n\t\tif (item.temporaryFile) {\r\n\t\t\tthis.#handleFile(item as UmbUploadableFile, mediaTypeUnique);\r\n\t\t} else if (item.folder) {\r\n\t\t\tthis.#handleFolder(item as UmbUploadableFolder, mediaTypeUnique);\r\n\t\t}\r\n\t}\r\n}\r\n","import { UmbMediaDropzoneManager } from './media-dropzone.manager.js';\r\nimport {\r\n\tUmbInputDropzoneElement,\r\n\tUmbFileDropzoneItemStatus,\r\n\tUmbDropzoneSubmittedEvent,\r\n\ttype UmbUploadableItem,\r\n} from '@umbraco-cms/backoffice/dropzone';\r\nimport { css, customElement, property } from '@umbraco-cms/backoffice/external/lit';\r\nimport type { UUIFileDropzoneEvent } from '@umbraco-cms/backoffice/external/uui';\r\n\r\n/**\r\n * A dropzone for uploading files and folders as media items. It is hidden by default and will be shown when dragging files over the window.\r\n * @element umb-dropzone-media\r\n * @fires ProgressEvent When the progress of the upload changes.\r\n * @fires UmbDropzoneSubmittedEvent When the upload is submitted.\r\n * @fires UmbDropzoneChangeEvent When any upload changes.\r\n * @fires CustomEvent<'complete'> When all uploads are complete (deprecated: use {@link UmbDropzoneChangeEvent} instead).\r\n * @slot - The default slot.\r\n */\r\n@customElement('umb-dropzone-media')\r\nexport class UmbDropzoneMediaElement extends UmbInputDropzoneElement {\r\n\t@property({ attribute: 'parent-unique' })\r\n\tparentUnique: string | null = null;\r\n\r\n\t/**\r\n\t * Gets the current value of the uploaded items.\r\n\t * @returns {Array<UmbUploadableItem>} An array of uploadable items.\r\n\t */\r\n\tpublic getItems(): Array<UmbUploadableItem> {\r\n\t\treturn this._progressItems;\r\n\t}\r\n\r\n\tprotected override _manager = new UmbMediaDropzoneManager(this);\r\n\tpublic progressItems = () => this._manager.progressItems;\r\n\tpublic progress = () => this._manager.progress;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tdocument.addEventListener('dragenter', this.#handleDragEnter.bind(this));\r\n\t\tdocument.addEventListener('dragleave', this.#handleDragLeave.bind(this));\r\n\t\tdocument.addEventListener('drop', this.#handleDrop.bind(this));\r\n\r\n\t\t// TODO: Revisit this. I am not sure why it is needed to call these methods here when they are already called in the constructor of the parent class.\r\n\t\t// If we do not call them here, the observer will use the wrong instance of the dropzone manager (UmbDropZoneManager instead of UmbMediaDropzoneManager).\r\n\t\tthis._observeProgress();\r\n\t\tthis._observeProgressItems();\r\n\t}\r\n\r\n\tprotected override _observeProgressItems() {\r\n\t\tsuper._observeProgressItems();\r\n\t\tthis.observe(\r\n\t\t\tthis._manager.progressItems,\r\n\t\t\t(progressItems: Array<UmbUploadableItem>) => {\r\n\t\t\t\tconst waiting = progressItems.find((item) => item.status === UmbFileDropzoneItemStatus.WAITING);\r\n\t\t\t\tif (progressItems.length && !waiting) {\r\n\t\t\t\t\tthis.dispatchEvent(new CustomEvent('complete', { detail: progressItems }));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'_observeProgressItemsComplete',\r\n\t\t);\r\n\t}\r\n\r\n\toverride disconnectedCallback(): void {\r\n\t\tsuper.disconnectedCallback();\r\n\t\tdocument.removeEventListener('dragenter', this.#handleDragEnter.bind(this));\r\n\t\tdocument.removeEventListener('dragleave', this.#handleDragLeave.bind(this));\r\n\t\tdocument.removeEventListener('drop', this.#handleDrop.bind(this));\r\n\t}\r\n\r\n\toverride async onUpload(event: UUIFileDropzoneEvent) {\r\n\t\tif (this.disabled) return;\r\n\t\tif (!event.detail.files.length && !event.detail.folders.length) return;\r\n\r\n\t\tconst uploadable = this._manager.createMediaItems(event.detail, this.parentUnique);\r\n\t\tthis.dispatchEvent(new UmbDropzoneSubmittedEvent(uploadable));\r\n\t}\r\n\r\n\t#handleDragEnter(e: DragEvent) {\r\n\t\tif (this.disabled) return;\r\n\t\t// Avoid collision with UmbSorterController\r\n\t\tconst types = e.dataTransfer?.types;\r\n\t\tif (!types?.length || !types?.includes('Files')) return;\r\n\r\n\t\tthis.toggleAttribute('dragging', true);\r\n\t}\r\n\r\n\t#handleDragLeave() {\r\n\t\tif (this.disabled) return;\r\n\t\tthis.toggleAttribute('dragging', false);\r\n\t}\r\n\r\n\t#handleDrop(event: DragEvent) {\r\n\t\tevent.preventDefault();\r\n\t\tif (this.disabled) return;\r\n\t\tthis.toggleAttribute('dragging', false);\r\n\t}\r\n\r\n\tstatic override styles = [\r\n\t\t...UmbInputDropzoneElement.styles,\r\n\t\tcss`\r\n\t\t\t:host(:not([disabled])[dragging]) #dropzone {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\tpointer-events: all;\r\n\t\t\t}\r\n\r\n\t\t\t[dropzone] {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\r\n\t\t\t#dropzone {\r\n\t\t\t\topacity: 0;\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tz-index: 100;\r\n\t\t\t\tborder-radius: var(--uui-border-radius);\r\n\t\t\t\tborder: 1px solid var(--uui-color-focus);\r\n\t\t\t\tbox-sizing:border-box;\r\n\t\t\t}\r\n\t\t`,\r\n\t];\r\n}\r\n\r\nexport default UmbDropzoneMediaElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'umb-dropzone-media': UmbDropzoneMediaElement;\r\n\t}\r\n}\r\n","import { UmbDropzoneMediaElement } from './dropzone-media.element.js';\r\nimport { UmbDeprecation } from '@umbraco-cms/backoffice/utils';\r\nimport { customElement } from '@umbraco-cms/backoffice/external/lit';\r\n\r\nconst DEPRECATION_MESSAGE = new UmbDeprecation({\r\n\tdeprecated: '<umb-dropzone />',\r\n\tremoveInVersion: '18',\r\n\tsolution: 'Use <umb-dropzone-media /> for media items and <umb-input-dropzone /> for all other files and folders.',\r\n});\r\n\r\n/**\r\n * @inheritdoc\r\n * @deprecated Use {@link UmbDropzoneMediaElement} for media items instead, and {@link UmbInputDropzoneElement} for all other files and folders. This will be removed in Umbraco 18.\r\n */\r\n@customElement('umb-dropzone')\r\nexport default class UmbDropzoneElement extends UmbDropzoneMediaElement {\r\n\toverride connectedCallback(): void {\r\n\t\tsuper.connectedCallback();\r\n\t\tDEPRECATION_MESSAGE.warn();\r\n\t}\r\n}\r\n"],"names":["UMB_MEDIA_COLLECTION_REPOSITORY_ALIAS","UMB_MEDIA_GRID_COLLECTION_VIEW_ALIAS","UMB_MEDIA_TABLE_COLLECTION_VIEW_ALIAS","UMB_MEDIA_COLLECTION_ALIAS","UMB_MOVE_MEDIA_REPOSITORY_ALIAS","UMB_SORT_CHILDREN_OF_MEDIA_REPOSITORY_ALIAS","UMB_BULK_MOVE_MEDIA_REPOSITORY_ALIAS","UMB_MEDIA_MENU_ALIAS","UMB_MEDIA_URL_REPOSITORY_ALIAS","UMB_MEDIA_URL_STORE_ALIAS","UMB_MEDIA_RECYCLE_BIN_TREE_REPOSITORY_ALIAS","UMB_MEDIA_RECYCLE_BIN_TREE_STORE_ALIAS","UMB_MEDIA_RECYCLE_BIN_TREE_ALIAS","UMB_MEDIA_RECYCLE_BIN_REPOSITORY_ALIAS","UMB_BULK_TRASH_MEDIA_REPOSITORY_ALIAS","UMB_MEDIA_RECYCLE_BIN_ROOT_ENTITY_TYPE","UMB_MEDIA_REFERENCE_REPOSITORY_ALIAS","UMB_MEDIA_DETAIL_REPOSITORY_ALIAS","UMB_MEDIA_DETAIL_STORE_ALIAS","UMB_MEDIA_VALIDATION_REPOSITORY_ALIAS","UMB_MEDIA_GLOBAL_SEARCH_ALIAS","UMB_MEDIA_TREE_REPOSITORY_ALIAS","UMB_MEDIA_TREE_STORE_ALIAS","UMB_MEDIA_TREE_ALIAS","UMB_MEDIA_WORKSPACE_ALIAS","UMB_MEMBER_DETAIL_MODEL_VARIANT_SCAFFOLD","_UmbDropzoneMediaTypePickerModalElement_instances","onAutoPick_fn","onMediaTypePick_fn","UmbDropzoneMediaTypePickerModalElement","UmbModalBaseElement","__privateAdd","html","__privateMethod","repeat","option","unique","UmbTextStyles","css","__decorateClass","state","query","customElement","UmbDropzoneMediaTypePickerModalElement$1","UMB_DROPZONE_MEDIA_TYPE_PICKER_MODAL","UmbModalToken","UmbMediaDropzoneManager","UmbDropzoneManager","#availableMediaTypesOf","UmbArrayState","x","#allowedChildrenOf","#mediaTypeStructure","UmbMediaTypeStructureRepository","#mediaDetailRepository","UmbMediaDetailRepository","#notificationContext","#localization","UmbLocalizationController","host","UMB_NOTIFICATION_CONTEXT","context","items","parentUnique","uploadableItems","#createOneMediaItem","#createMediaItems","item","options","#getMediaTypeOptions","UmbFileDropzoneItemStatus","mediaTypeUnique","#handleFile","#handleFolder","temporaryFile","TemporaryFileStatus","scaffold","#getItemScaffold","data","parent","allowedChildren","#getAllowedChildrenOf","extension","availableMediaType","#getAvailableMediaTypesOf","y","available","availableMediaTypes","allowed","name","umbracoFile","UMB_MEDIA_PROPERTY_VALUE_ENTITY_TYPE","preset","#showDialogMediaTypePicker","umbOpenModal","_UmbDropzoneMediaElement_instances","handleDragEnter_fn","handleDragLeave_fn","handleDrop_fn","UmbDropzoneMediaElement","UmbInputDropzoneElement","progressItems","waiting","event","uploadable","UmbDropzoneSubmittedEvent","e","types","property","DEPRECATION_MESSAGE","UmbDeprecation","UmbDropzoneElement"],"mappings":"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"}