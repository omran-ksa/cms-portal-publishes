{"version":3,"file":"media-recycle-bin-tree.repository-DQ2zuOt5.js","sources":["../../../src/packages/media/media/recycle-bin/tree/media-recycle-bin-tree.server.data-source.ts","../../../src/packages/media/media/recycle-bin/tree/media-recycle-bin-tree.repository.ts"],"sourcesContent":["import { UMB_MEDIA_ENTITY_TYPE, UMB_MEDIA_ROOT_ENTITY_TYPE } from '../../entity.js';\r\nimport type { UmbMediaRecycleBinTreeItemModel } from './types.js';\r\nimport type { MediaRecycleBinItemResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { MediaService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type {\r\n\tUmbTreeAncestorsOfRequestArgs,\r\n\tUmbTreeChildrenOfRequestArgs,\r\n\tUmbTreeRootItemsRequestArgs,\r\n} from '@umbraco-cms/backoffice/tree';\r\nimport { UmbTreeServerDataSourceBase } from '@umbraco-cms/backoffice/tree';\r\n\r\n/**\r\n * A data source for the Media Recycle Bin tree that fetches data from the server\r\n * @class UmbMediaRecycleBinTreeServerDataSource\r\n * @implements {UmbTreeDataSource}\r\n */\r\nexport class UmbMediaRecycleBinTreeServerDataSource extends UmbTreeServerDataSourceBase<\r\n\tMediaRecycleBinItemResponseModel,\r\n\tUmbMediaRecycleBinTreeItemModel\r\n> {\r\n\t/**\r\n\t * Creates an instance of UmbMediaRecycleBinTreeServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbMediaRecycleBinTreeServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, {\r\n\t\t\tgetRootItems,\r\n\t\t\tgetChildrenOf,\r\n\t\t\tgetAncestorsOf,\r\n\t\t\tmapper,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst getRootItems = (args: UmbTreeRootItemsRequestArgs) =>\r\n\t// eslint-disable-next-line local-rules/no-direct-api-import\r\n\tMediaService.getRecycleBinMediaRoot({ query: { skip: args.skip, take: args.take } });\r\n\r\nconst getChildrenOf = (args: UmbTreeChildrenOfRequestArgs) => {\r\n\tif (args.parent.unique === null) {\r\n\t\treturn getRootItems(args);\r\n\t} else {\r\n\t\t// eslint-disable-next-line local-rules/no-direct-api-import\r\n\t\treturn MediaService.getRecycleBinMediaChildren({\r\n\t\t\tquery: { parentId: args.parent.unique, skip: args.skip, take: args.take },\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst getAncestorsOf = (args: UmbTreeAncestorsOfRequestArgs) =>\r\n\t// eslint-disable-next-line local-rules/no-direct-api-import\r\n\tMediaService.getTreeMediaAncestors({\r\n\t\tquery: { descendantId: args.treeItem.unique },\r\n\t});\r\n\r\nconst mapper = (item: MediaRecycleBinItemResponseModel): UmbMediaRecycleBinTreeItemModel => {\r\n\treturn {\r\n\t\tunique: item.id,\r\n\t\tparent: {\r\n\t\t\tunique: item.parent ? item.parent.id : null,\r\n\t\t\tentityType: item.parent ? UMB_MEDIA_ENTITY_TYPE : UMB_MEDIA_ROOT_ENTITY_TYPE,\r\n\t\t},\r\n\t\tentityType: UMB_MEDIA_ENTITY_TYPE,\r\n\t\tnoAccess: false,\r\n\t\tisTrashed: true,\r\n\t\thasChildren: item.hasChildren,\r\n\t\tmediaType: {\r\n\t\t\tunique: item.mediaType.id,\r\n\t\t\ticon: item.mediaType.icon,\r\n\t\t\tcollection: item.mediaType.collection ? { unique: item.mediaType.collection.id } : null,\r\n\t\t},\r\n\t\tvariants: item.variants.map((variant) => {\r\n\t\t\treturn {\r\n\t\t\t\tname: variant.name,\r\n\t\t\t\tculture: variant.culture || null,\r\n\t\t\t\tsegment: null, // TODO: add segment to the backend API?\r\n\t\t\t};\r\n\t\t}),\r\n\t\tname: item.variants[0]?.name, // TODO: this is not correct. We need to get it from the variants. This is a temp solution.\r\n\t\tisFolder: false,\r\n\t\tcreateDate: item.createDate,\r\n\t};\r\n};\r\n","import { UMB_MEDIA_RECYCLE_BIN_ROOT_ENTITY_TYPE } from '../constants.js';\r\nimport { UmbMediaRecycleBinTreeServerDataSource } from './media-recycle-bin-tree.server.data-source.js';\r\nimport type { UmbMediaRecycleBinTreeItemModel, UmbMediaRecycleBinTreeRootModel } from './types.js';\r\nimport { UMB_MEDIA_RECYCLE_BIN_TREE_STORE_CONTEXT } from './media-recycle-bin-tree.store.context-token.js';\r\nimport { UmbTreeRepositoryBase } from '@umbraco-cms/backoffice/tree';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\n\r\nexport class UmbMediaRecycleBinTreeRepository\r\n\textends UmbTreeRepositoryBase<UmbMediaRecycleBinTreeItemModel, UmbMediaRecycleBinTreeRootModel>\r\n\timplements UmbApi\r\n{\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbMediaRecycleBinTreeServerDataSource, UMB_MEDIA_RECYCLE_BIN_TREE_STORE_CONTEXT);\r\n\t}\r\n\r\n\tasync requestTreeRoot() {\r\n\t\tconst { data: treeRootData } = await this._treeSource.getRootItems({ skip: 0, take: 1 });\r\n\t\tconst hasChildren = treeRootData ? treeRootData.total > 0 : false;\r\n\r\n\t\tconst data = {\r\n\t\t\tunique: null,\r\n\t\t\tentityType: UMB_MEDIA_RECYCLE_BIN_ROOT_ENTITY_TYPE,\r\n\t\t\tname: '#treeHeaders_contentRecycleBin',\r\n\t\t\ticon: 'icon-trash',\r\n\t\t\thasChildren,\r\n\t\t\tisContainer: false,\r\n\t\t\tisFolder: true,\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n}\r\n\r\nexport { UmbMediaRecycleBinTreeRepository as api };\r\n"],"names":["UmbMediaRecycleBinTreeServerDataSource","UmbTreeServerDataSourceBase","host","getRootItems","getChildrenOf","getAncestorsOf","mapper","args","MediaService","item","UMB_MEDIA_ENTITY_TYPE","UMB_MEDIA_ROOT_ENTITY_TYPE","variant","UmbMediaRecycleBinTreeRepository","UmbTreeRepositoryBase","UMB_MEDIA_RECYCLE_BIN_TREE_STORE_CONTEXT","treeRootData","hasChildren","UMB_MEDIA_RECYCLE_BIN_ROOT_ENTITY_TYPE"],"mappings":";;;;AAiBO,MAAMA,UAA+CC,EAG1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,YAAYC,GAAyB;AACpC,UAAMA,GAAM;AAAA,MACX,cAAAC;AAAA,MACA,eAAAC;AAAA,MACA,gBAAAC;AAAA,MACA,QAAAC;AAAA,IAAA,CACA;AAAA,EAAA;AAEH;AAEA,MAAMH,IAAe,CAACI;AAAA;AAAA,EAErBC,EAAa,uBAAuB,EAAE,OAAO,EAAE,MAAMD,EAAK,MAAM,MAAMA,EAAK,OAAQ,CAAA;AAAA,GAE9EH,IAAgB,CAACG,MAClBA,EAAK,OAAO,WAAW,OACnBJ,EAAaI,CAAI,IAGjBC,EAAa,2BAA2B;AAAA,EAC9C,OAAO,EAAE,UAAUD,EAAK,OAAO,QAAQ,MAAMA,EAAK,MAAM,MAAMA,EAAK,KAAK;AAAA,CACxE,GAIGF,IAAiB,CAACE;AAAA;AAAA,EAEvBC,EAAa,sBAAsB;AAAA,IAClC,OAAO,EAAE,cAAcD,EAAK,SAAS,OAAO;AAAA,EAC5C,CAAA;AAAA,GAEID,IAAS,CAACG,OACR;AAAA,EACN,QAAQA,EAAK;AAAA,EACb,QAAQ;AAAA,IACP,QAAQA,EAAK,SAASA,EAAK,OAAO,KAAK;AAAA,IACvC,YAAYA,EAAK,SAASC,IAAwBC;AAAA,EACnD;AAAA,EACA,YAAYD;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,aAAaD,EAAK;AAAA,EAClB,WAAW;AAAA,IACV,QAAQA,EAAK,UAAU;AAAA,IACvB,MAAMA,EAAK,UAAU;AAAA,IACrB,YAAYA,EAAK,UAAU,aAAa,EAAE,QAAQA,EAAK,UAAU,WAAW,OAAO;AAAA,EACpF;AAAA,EACA,UAAUA,EAAK,SAAS,IAAI,CAACG,OACrB;AAAA,IACN,MAAMA,EAAQ;AAAA,IACd,SAASA,EAAQ,WAAW;AAAA,IAC5B,SAAS;AAAA;AAAA,EACV,EACA;AAAA,EACD,MAAMH,EAAK,SAAS,CAAC,GAAG;AAAA;AAAA,EACxB,UAAU;AAAA,EACV,YAAYA,EAAK;AAClB;AC3EM,MAAMI,UACJC,EAET;AAAA,EACC,YAAYZ,GAAyB;AAC9B,UAAAA,GAAMF,GAAwCe,CAAwC;AAAA,EAAA;AAAA,EAG7F,MAAM,kBAAkB;AACvB,UAAM,EAAE,MAAMC,EAAa,IAAI,MAAM,KAAK,YAAY,aAAa,EAAE,MAAM,GAAG,MAAM,GAAG,GACjFC,IAAcD,IAAeA,EAAa,QAAQ,IAAI;AAY5D,WAAO,EAAE,MAVI;AAAA,MACZ,QAAQ;AAAA,MACR,YAAYE;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAAD;AAAA,MACA,aAAa;AAAA,MACb,UAAU;AAAA,IACX,EAEc;AAAA,EAAA;AAEhB;"}