{"version":3,"file":"document-configuration.context-Bz7FvH_D.js","sources":["../../../src/packages/documents/documents/global-contexts/document-configuration.context.ts"],"sourcesContent":["import { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbContextToken } from '@umbraco-cms/backoffice/context-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport { DocumentService, type DocumentConfigurationResponseModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n// TODO: Turn this into a Repository with a Store that holds the cache [NL]\r\n/**\r\n * A context for fetching and caching the document configuration.\r\n * @internal\r\n */\r\nexport class UmbDocumentConfigurationContext extends UmbContextBase implements UmbApi {\r\n\t/**\r\n\t * The cached document configuration.\r\n\t */\r\n\tstatic #DocumentConfiguration: Promise<DocumentConfigurationResponseModel | null>;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_DOCUMENT_CONFIGURATION_CONTEXT);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the document configuration from the server, or return the cached configuration if it has already been fetched.\r\n\t * @returns A promise that resolves to the document configuration, or null if the configuration could not be fetched.\r\n\t */\r\n\tgetDocumentConfiguration(): Promise<DocumentConfigurationResponseModel | null> {\r\n\t\treturn (UmbDocumentConfigurationContext.#DocumentConfiguration ??= this.fetchDocumentConfiguration());\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the document configuration from the server.\r\n\t * @returns A promise that resolves to the document configuration, or null if the configuration could not be fetched.\r\n\t */\r\n\tasync fetchDocumentConfiguration() {\r\n\t\tconst { data } = await tryExecute(this, DocumentService.getDocumentConfiguration());\r\n\r\n\t\treturn data ?? null;\r\n\t}\r\n}\r\n\r\n// Export as default to work as a global context:\r\nexport default UmbDocumentConfigurationContext;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const UMB_DOCUMENT_CONFIGURATION_CONTEXT = new UmbContextToken<UmbDocumentConfigurationContext>(\r\n\t'UmbDocumentConfigurationContext',\r\n);\r\n"],"names":["UmbDocumentConfigurationContext","UmbContextBase","#DocumentConfiguration","host","UMB_DOCUMENT_CONFIGURATION_CONTEXT","data","tryExecute","DocumentService","UmbContextToken"],"mappings":";;;;AAYO,MAAMA,UAAwCC,EAAiC;AAAA;AAAA;AAAA;AAAA,EAIrF,OAAOC;AAAA,EAEP,YAAYC,GAAyB;AACpC,UAAMA,GAAMC,CAAkC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/C,2BAA+E;AACtE,WAAAJ,EAAgCE,OAA2B,KAAK,2BAA2B;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpG,MAAM,6BAA6B;AAC5B,UAAA,EAAE,MAAAG,MAAS,MAAMC,EAAW,MAAMC,EAAgB,0BAA0B;AAElF,WAAOF,KAAQ;AAAA,EAAA;AAEjB;AAQO,MAAMD,IAAqC,IAAII;AAAA,EACrD;AACD;"}