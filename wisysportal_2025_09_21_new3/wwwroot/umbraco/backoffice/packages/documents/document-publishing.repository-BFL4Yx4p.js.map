{"version":3,"file":"document-publishing.repository-BFL4Yx4p.js","sources":["../../../src/packages/documents/documents/publishing/repository/document-publishing.server.data-source.ts","../../../src/packages/documents/documents/publishing/repository/document-publishing.repository.ts"],"sourcesContent":["import type { UmbDocumentDetailModel, UmbDocumentVariantPublishModel } from '../../types.js';\r\nimport { UMB_DOCUMENT_ENTITY_TYPE, UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE } from '../../entity.js';\r\nimport type {\r\n\tCultureAndScheduleRequestModel,\r\n\tPublishDocumentRequestModel,\r\n\tPublishDocumentWithDescendantsRequestModel,\r\n\tUnpublishDocumentRequestModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { DocumentService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\nimport type { UmbDataSourceResponse } from '@umbraco-cms/backoffice/repository';\r\n\r\n/**\r\n * A server data source for Document publishing\r\n * @class UmbDocumentPublishingServerDataSource\r\n * @implements {DocumentTreeDataSource}\r\n */\r\nexport class UmbDocumentPublishingServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbDocumentPublishingServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbDocumentPublishingServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Publish one or more variants of a Document\r\n\t * @param {string} unique\r\n\t * @param {Array<UmbVariantId>} variantIds\r\n\t * @param variants\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentPublishingServerDataSource\r\n\t */\r\n\tasync publish(unique: string, variants: Array<UmbDocumentVariantPublishModel>) {\r\n\t\tif (!unique) throw new Error('Id is missing');\r\n\r\n\t\tconst publishSchedules: CultureAndScheduleRequestModel[] = variants.map<CultureAndScheduleRequestModel>(\r\n\t\t\t(variant) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tculture: variant.variantId.isCultureInvariant() ? null : variant.variantId.toCultureString(),\r\n\t\t\t\t\tschedule: variant.schedule,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\t// TODO: THIS DOES NOT TAKE SEGMENTS INTO ACCOUNT!!!!!!\r\n\t\tconst body: PublishDocumentRequestModel = {\r\n\t\t\tpublishSchedules,\r\n\t\t};\r\n\r\n\t\treturn tryExecute(this.#host, DocumentService.putDocumentByIdPublish({ path: { id: unique }, body: body }));\r\n\t}\r\n\r\n\t/**\r\n\t * Unpublish one or more variants of a Document\r\n\t * @param {string} unique\r\n\t * @param {Array<UmbVariantId>} variantIds\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentPublishingServerDataSource\r\n\t */\r\n\tasync unpublish(unique: string, variantIds: Array<UmbVariantId>) {\r\n\t\tif (!unique) throw new Error('Id is missing');\r\n\r\n\t\t// TODO: THIS DOES NOT TAKE SEGMENTS INTO ACCOUNT!!!!!!\r\n\r\n\t\t// If variants are culture invariant, we need to pass null to the API\r\n\t\tconst hasInvariant = variantIds.some((variant) => variant.isCultureInvariant());\r\n\r\n\t\tif (hasInvariant) {\r\n\t\t\tconst body: UnpublishDocumentRequestModel = {\r\n\t\t\t\tcultures: null,\r\n\t\t\t};\r\n\r\n\t\t\treturn tryExecute(this.#host, DocumentService.putDocumentByIdUnpublish({ path: { id: unique }, body: body }));\r\n\t\t}\r\n\r\n\t\tconst body: UnpublishDocumentRequestModel = {\r\n\t\t\tcultures: variantIds.map((variant) => variant.toCultureString()),\r\n\t\t};\r\n\r\n\t\treturn tryExecute(this.#host, DocumentService.putDocumentByIdUnpublish({ path: { id: unique }, body: body }));\r\n\t}\r\n\r\n\t/**\r\n\t * Publish variants of a document and all its descendants\r\n\t * @param unique\r\n\t * @param variantIds\r\n\t * @param includeUnpublishedDescendants\r\n\t * @memberof UmbDocumentPublishingServerDataSource\r\n\t */\r\n\tasync publishWithDescendants(\r\n\t\tunique: string,\r\n\t\tvariantIds: Array<UmbVariantId>,\r\n\t\tincludeUnpublishedDescendants: boolean,\r\n\t) {\r\n\t\tif (!unique) throw new Error('Id is missing');\r\n\r\n\t\tconst body: PublishDocumentWithDescendantsRequestModel = {\r\n\t\t\tcultures: variantIds.map((variant) => variant.toCultureString()),\r\n\t\t\tincludeUnpublishedDescendants,\r\n\t\t};\r\n\r\n\t\t// Initiate the publish descendants task and get back a task Id.\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDocumentService.putDocumentByIdPublishWithDescendants({ path: { id: unique }, body: body }),\r\n\t\t);\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\tconst taskId = data.taskId;\r\n\r\n\t\t// Poll until we know publishing is finished, then return the result.\r\n\t\tlet isFirstPoll = true;\r\n\t\twhile (true) {\r\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, isFirstPoll ? 1000 : 5000));\r\n\t\t\tisFirstPoll = false;\r\n\t\t\tconst { data, error } = await tryExecute(\r\n\t\t\t\tthis.#host,\r\n\t\t\t\tDocumentService.getDocumentByIdPublishWithDescendantsResultByTaskId({ path: { id: unique, taskId } }),\r\n\t\t\t);\r\n\t\t\tif (error || !data) {\r\n\t\t\t\treturn { error };\r\n\t\t\t}\r\n\r\n\t\t\tif (data.isComplete) {\r\n\t\t\t\treturn { error: null };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the published Document by its unique\r\n\t * @param {string} unique - Document unique\r\n\t * @returns {Promise<UmbDataSourceResponse<UmbDocumentDetailModel>>} Published document\r\n\t * @memberof UmbDocumentPublishingServerDataSource\r\n\t */\r\n\tasync published(unique: string): Promise<UmbDataSourceResponse<UmbDocumentDetailModel>> {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDocumentService.getDocumentByIdPublished({ path: { id: unique } }),\r\n\t\t);\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst document: UmbDocumentDetailModel = {\r\n\t\t\tentityType: UMB_DOCUMENT_ENTITY_TYPE,\r\n\t\t\tunique: data.id,\r\n\t\t\tvalues: data.values.map((value) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\teditorAlias: value.editorAlias,\r\n\t\t\t\t\tentityType: UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE,\r\n\t\t\t\t\tculture: value.culture || null,\r\n\t\t\t\t\tsegment: value.segment || null,\r\n\t\t\t\t\talias: value.alias,\r\n\t\t\t\t\tvalue: value.value,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\tvariants: data.variants.map((variant) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tculture: variant.culture || null,\r\n\t\t\t\t\tsegment: variant.segment || null,\r\n\t\t\t\t\tstate: variant.state,\r\n\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\tpublishDate: variant.publishDate || null,\r\n\t\t\t\t\tcreateDate: variant.createDate,\r\n\t\t\t\t\tupdateDate: variant.updateDate,\r\n\t\t\t\t\tscheduledPublishDate: variant.scheduledPublishDate || null,\r\n\t\t\t\t\tscheduledUnpublishDate: variant.scheduledUnpublishDate || null,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\ttemplate: data.template ? { unique: data.template.id } : null,\r\n\t\t\tdocumentType: {\r\n\t\t\t\tunique: data.documentType.id,\r\n\t\t\t\tcollection: data.documentType.collection ? { unique: data.documentType.collection.id } : null,\r\n\t\t\t\ticon: data.documentType.icon,\r\n\t\t\t},\r\n\t\t\tisTrashed: data.isTrashed,\r\n\t\t};\r\n\r\n\t\treturn { data: document };\r\n\t}\r\n}\r\n","import type { UmbDocumentDetailModel, UmbDocumentVariantPublishModel } from '../../types.js';\r\nimport { UmbDocumentPublishingServerDataSource } from './document-publishing.server.data-source.js';\r\nimport { UmbRepositoryBase, type UmbRepositoryResponse } from '@umbraco-cms/backoffice/repository';\r\nimport type { UmbVariantId } from '@umbraco-cms/backoffice/variant';\r\n\r\nexport class UmbDocumentPublishingRepository extends UmbRepositoryBase {\r\n\t#publishingDataSource = new UmbDocumentPublishingServerDataSource(this);\r\n\r\n\t/**\r\n\t * Publish one or more variants of a Document\r\n\t * @param {string} id\r\n\t * @param {Array<UmbVariantId>} variantIds\r\n\t * @param unique\r\n\t * @param variants\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentPublishingRepository\r\n\t */\r\n\tasync publish(unique: string, variants: Array<UmbDocumentVariantPublishModel>) {\r\n\t\tif (!unique) throw new Error('id is missing');\r\n\t\tif (!variants.length) throw new Error('variant IDs are missing');\r\n\r\n\t\treturn this.#publishingDataSource.publish(unique, variants);\r\n\t}\r\n\r\n\t/**\r\n\t * Unpublish one or more variants of a Document\r\n\t * @param {string} id\r\n\t * @param {Array<UmbVariantId>} variantIds\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentPublishingRepository\r\n\t */\r\n\tasync unpublish(id: string, variantIds: Array<UmbVariantId>) {\r\n\t\tif (!id) throw new Error('id is missing');\r\n\t\tif (!variantIds) throw new Error('variant IDs are missing');\r\n\r\n\t\treturn this.#publishingDataSource.unpublish(id, variantIds);\r\n\t}\r\n\r\n\t/**\r\n\t * Publish variants of a document including its descendants\r\n\t * @param id\r\n\t * @param variantIds\r\n\t * @param includeUnpublishedDescendants\r\n\t * @memberof UmbDocumentPublishingRepository\r\n\t */\r\n\tasync publishWithDescendants(id: string, variantIds: Array<UmbVariantId>, includeUnpublishedDescendants: boolean) {\r\n\t\tif (!id) throw new Error('id is missing');\r\n\t\tif (!variantIds) throw new Error('variant IDs are missing');\r\n\r\n\t\treturn this.#publishingDataSource.publishWithDescendants(id, variantIds, includeUnpublishedDescendants);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the published data of a document\r\n\t * @param {string} unique Document unique\r\n\t * @returns { Promise<UmbRepositoryResponse<UmbDocumentDetailModel>>} Published document\r\n\t * @memberof UmbDocumentPublishingRepository\r\n\t */\r\n\tasync published(unique: string): Promise<UmbRepositoryResponse<UmbDocumentDetailModel>> {\r\n\t\treturn this.#publishingDataSource.published(unique);\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentPublishingRepository as api };\r\n"],"names":["UmbDocumentPublishingServerDataSource","#host","host","unique","variants","body","variant","tryExecute","DocumentService","variantIds","includeUnpublishedDescendants","data","error","taskId","isFirstPoll","resolve","UMB_DOCUMENT_ENTITY_TYPE","value","UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE","UmbDocumentPublishingRepository","UmbRepositoryBase","#publishingDataSource","id"],"mappings":"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"}