{"version":3,"file":"document-blueprint-detail.repository-v6KhCqYg.js","sources":["../../../src/packages/documents/document-blueprints/repository/detail/document-blueprint-detail.server.data-source.ts","../../../src/packages/documents/document-blueprints/repository/detail/document-blueprint-detail.repository.ts"],"sourcesContent":["import type { UmbDocumentBlueprintDetailModel } from '../../types.js';\r\nimport { UMB_DOCUMENT_BLUEPRINT_ENTITY_TYPE } from '../../entity.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDataSourceResponse, UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\nimport type {\r\n\tCreateDocumentBlueprintRequestModel,\r\n\tDocumentBlueprintResponseModel,\r\n\tUpdateDocumentBlueprintRequestModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { DocumentBlueprintService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE } from '@umbraco-cms/backoffice/document';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the Document that fetches data from the server\r\n * @class UmbDocumentBlueprintServerDataSource\r\n * @implements {UmbDetailDataSource}\r\n */\r\nexport class UmbDocumentBlueprintServerDataSource implements UmbDetailDataSource<UmbDocumentBlueprintDetailModel> {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbDocumentBlueprintServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbDocumentBlueprintServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Document scaffold\r\n\t * @param preset\r\n\t * @returns { UmbDocumentBlueprintDetailModel }\r\n\t * @memberof UmbDocumentBlueprintServerDataSource\r\n\t */\r\n\tasync createScaffold(preset: Partial<UmbDocumentBlueprintDetailModel> = {}) {\r\n\t\tconst data: UmbDocumentBlueprintDetailModel = {\r\n\t\t\tentityType: UMB_DOCUMENT_BLUEPRINT_ENTITY_TYPE,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\tdocumentType: {\r\n\t\t\t\tunique: '',\r\n\t\t\t\tcollection: null,\r\n\t\t\t},\r\n\t\t\tvalues: [],\r\n\t\t\tvariants: [],\r\n\t\t\t...preset,\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new variant scaffold.\r\n\t * @returns A new variant scaffold.\r\n\t */\r\n\t/*\r\n\t// TDOD: remove if not used\r\n\tcreateVariantScaffold(): UmbDocumentBlueprintVariantModel {\r\n\t\treturn {\r\n\t\t\tstate: null,\r\n\t\t\tculture: null,\r\n\t\t\tsegment: null,\r\n\t\t\tname: '',\r\n\t\t\tpublishDate: null,\r\n\t\t\tcreateDate: null,\r\n\t\t\tupdateDate: null,\r\n\t\t};\r\n\t}\r\n\t*/\r\n\r\n\t/**\r\n\t * Fetches a Document with the given id from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentBlueprintServerDataSource\r\n\t */\r\n\tasync read(unique: string): Promise<UmbDataSourceResponse<UmbDocumentBlueprintDetailModel>> {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDocumentBlueprintService.getDocumentBlueprintById({ path: { id: unique } }),\r\n\t\t);\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\tconst document = this.#createDocumentBlueprintDetailModel(data);\r\n\r\n\t\treturn { data: document };\r\n\t}\r\n\r\n\tasync scaffoldByUnique(unique: string): Promise<UmbDataSourceResponse<UmbDocumentBlueprintDetailModel>> {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDocumentBlueprintService.getDocumentBlueprintByIdScaffold({ path: { id: unique } }),\r\n\t\t);\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\tconst document = this.#createDocumentBlueprintDetailModel(data);\r\n\r\n\t\treturn { data: document };\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a new Document on the server\r\n\t * @param {UmbDocumentBlueprintDetailModel} model\r\n\t * @param parentUnique\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentBlueprintServerDataSource\r\n\t */\r\n\tasync create(model: UmbDocumentBlueprintDetailModel, parentUnique: string | null = null) {\r\n\t\tif (!model) throw new Error('Document is missing');\r\n\t\tif (!model.unique) throw new Error('Document unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: CreateDocumentBlueprintRequestModel = {\r\n\t\t\tid: model.unique,\r\n\t\t\tparent: parentUnique ? { id: parentUnique } : null,\r\n\t\t\tdocumentType: { id: model.documentType.unique },\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDocumentBlueprintService.postDocumentBlueprint({\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data && typeof data === 'string') {\r\n\t\t\treturn this.read(data);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a Document on the server\r\n\t * @param {UmbDocumentBlueprintDetailModel} Document\r\n\t * @param model\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentBlueprintServerDataSource\r\n\t */\r\n\tasync update(model: UmbDocumentBlueprintDetailModel) {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: UpdateDocumentBlueprintRequestModel = {\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDocumentBlueprintService.putDocumentBlueprintById({\r\n\t\t\t\tpath: { id: model.unique },\r\n\t\t\t\tbody,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn this.read(model.unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a Document on the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentBlueprintServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\treturn tryExecute(this.#host, DocumentBlueprintService.deleteDocumentBlueprintById({ path: { id: unique } }));\r\n\t}\r\n\r\n\t#createDocumentBlueprintDetailModel(data: DocumentBlueprintResponseModel): UmbDocumentBlueprintDetailModel {\r\n\t\treturn {\r\n\t\t\tentityType: UMB_DOCUMENT_BLUEPRINT_ENTITY_TYPE,\r\n\t\t\tunique: data.id,\r\n\t\t\tvalues: data.values.map((value) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\teditorAlias: value.editorAlias,\r\n\t\t\t\t\tentityType: UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE,\r\n\t\t\t\t\tculture: value.culture || null,\r\n\t\t\t\t\tsegment: value.segment || null,\r\n\t\t\t\t\talias: value.alias,\r\n\t\t\t\t\tvalue: value.value,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\tvariants: data.variants.map((variant) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstate: variant.state,\r\n\t\t\t\t\tculture: variant.culture || null,\r\n\t\t\t\t\tsegment: variant.segment || null,\r\n\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\tpublishDate: variant.publishDate || null,\r\n\t\t\t\t\tcreateDate: variant.createDate,\r\n\t\t\t\t\tupdateDate: variant.updateDate,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\tdocumentType: {\r\n\t\t\t\tunique: data.documentType.id,\r\n\t\t\t\tcollection: data.documentType.collection ? { unique: data.documentType.collection.id } : null,\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n}\r\n","import type { UmbDocumentBlueprintDetailModel } from '../../types.js';\r\nimport { UmbDocumentBlueprintServerDataSource } from './document-blueprint-detail.server.data-source.js';\r\nimport { UMB_DOCUMENT_BLUEPRINT_DETAIL_STORE_CONTEXT } from './document-blueprint-detail.store.context-token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbDocumentBlueprintDetailRepository extends UmbDetailRepositoryBase<\r\n\tUmbDocumentBlueprintDetailModel,\r\n\tUmbDocumentBlueprintServerDataSource\r\n> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbDocumentBlueprintServerDataSource, UMB_DOCUMENT_BLUEPRINT_DETAIL_STORE_CONTEXT);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets an existing document blueprint by its unique identifier for scaffolding purposes, i.e. to create a new document based on an existing blueprint.\r\n\t * @param {string} unique - The unique identifier of the document blueprint.\r\n\t * @returns {UmbRepositoryResponse<UmbDocumentBlueprintDetailModel>} - The document blueprint data.\r\n\t * @memberof UmbDocumentBlueprintDetailRepository\r\n\t */\r\n\tscaffoldByUnique(unique: string) {\r\n\t\treturn this.detailDataSource.scaffoldByUnique(unique);\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentBlueprintDetailRepository as api };\r\n"],"names":["UmbDocumentBlueprintServerDataSource","#host","host","preset","UMB_DOCUMENT_BLUEPRINT_ENTITY_TYPE","UmbId","unique","data","error","tryExecute","DocumentBlueprintService","#createDocumentBlueprintDetailModel","model","parentUnique","body","value","UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE","variant","UmbDocumentBlueprintDetailRepository","UmbDetailRepositoryBase","UMB_DOCUMENT_BLUEPRINT_DETAIL_STORE_CONTEXT"],"mappings":"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"}