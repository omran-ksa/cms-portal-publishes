{"version":3,"file":"document-type-composition.repository-BLbQD94J.js","sources":["../../../src/packages/documents/document-types/repository/composition/document-type-composition.server.data-source.ts","../../../src/packages/documents/document-types/repository/composition/document-type-composition.repository.ts"],"sourcesContent":["import type {\r\n\tUmbDocumentTypeCompositionCompatibleModel,\r\n\tUmbDocumentTypeCompositionReferenceModel,\r\n\tUmbDocumentTypeAvailableCompositionRequestModel,\r\n} from '../../types.js';\r\nimport {\r\n\ttype DocumentTypeCompositionRequestModel,\r\n\tDocumentTypeService,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport type { UmbContentTypeCompositionDataSource } from '@umbraco-cms/backoffice/content-type';\r\n\r\n/**\r\n * A data source for the Document Type Composition that fetches data from the server\r\n * @class UmbDocumentTypeCompositionServerDataSource\r\n */\r\nexport class UmbDocumentTypeCompositionServerDataSource\r\n\timplements\r\n\t\tUmbContentTypeCompositionDataSource<\r\n\t\t\tUmbDocumentTypeCompositionReferenceModel,\r\n\t\t\tUmbDocumentTypeCompositionCompatibleModel,\r\n\t\t\tUmbDocumentTypeAvailableCompositionRequestModel\r\n\t\t>\r\n{\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbDocumentTypeCompositionServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbDocumentTypeCompositionServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\t/**\r\n\t * Fetches the compatible compositions for a document type from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentTypeCompositionServerDataSource\r\n\t */\r\n\tasync getReferences(unique: string) {\r\n\t\tconst response = await tryExecute(\r\n\t\t\tthis.#host,\r\n\t\t\tDocumentTypeService.getDocumentTypeByIdCompositionReferences({ path: { id: unique } }),\r\n\t\t);\r\n\t\tconst error = response.error;\r\n\t\tconst data: Array<UmbDocumentTypeCompositionReferenceModel> | undefined = response.data?.map((reference) => {\r\n\t\t\treturn {\r\n\t\t\t\tunique: reference.id,\r\n\t\t\t\ticon: reference.icon,\r\n\t\t\t\tname: reference.name,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn { data, error };\r\n\t}\r\n\t/**\r\n\t * Updates the compositions for a document type on the server\r\n\t * @param {DocumentTypeCompositionRequestModel} body\r\n\t * @param args\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentTypeCompositionServerDataSource\r\n\t */\r\n\tasync availableCompositions(args: UmbDocumentTypeAvailableCompositionRequestModel) {\r\n\t\tconst body: DocumentTypeCompositionRequestModel = {\r\n\t\t\tid: args.unique,\r\n\t\t\tisElement: args.isElement,\r\n\t\t\tcurrentCompositeIds: args.currentCompositeUniques,\r\n\t\t\tcurrentPropertyAliases: args.currentPropertyAliases,\r\n\t\t};\r\n\r\n\t\tconst response = await tryExecute(this.#host, DocumentTypeService.postDocumentTypeAvailableCompositions({ body }));\r\n\t\tconst error = response.error;\r\n\t\tconst data: Array<UmbDocumentTypeCompositionCompatibleModel> | undefined = response.data?.map((composition) => {\r\n\t\t\treturn {\r\n\t\t\t\tunique: composition.id,\r\n\t\t\t\tname: composition.name,\r\n\t\t\t\ticon: composition.icon,\r\n\t\t\t\tfolderPath: composition.folderPath,\r\n\t\t\t\tisCompatible: composition.isCompatible,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn { data, error };\r\n\t}\r\n}\r\n","import type {\r\n\tUmbDocumentTypeAvailableCompositionRequestModel,\r\n\tUmbDocumentTypeCompositionCompatibleModel,\r\n\tUmbDocumentTypeCompositionReferenceModel,\r\n} from '../../types.js';\r\nimport { UmbDocumentTypeCompositionServerDataSource } from './document-type-composition.server.data-source.js';\r\nimport type { UmbContentTypeCompositionRepository } from '@umbraco-cms/backoffice/content-type';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbDocumentTypeCompositionRepository\r\n\textends UmbRepositoryBase\r\n\timplements\r\n\t\tUmbContentTypeCompositionRepository<\r\n\t\t\tUmbDocumentTypeCompositionReferenceModel,\r\n\t\t\tUmbDocumentTypeCompositionCompatibleModel,\r\n\t\t\tUmbDocumentTypeAvailableCompositionRequestModel\r\n\t\t>\r\n{\r\n\t#compositionSource: UmbDocumentTypeCompositionServerDataSource;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\t\tthis.#compositionSource = new UmbDocumentTypeCompositionServerDataSource(this);\r\n\t}\r\n\r\n\tasync getReferences(unique: string) {\r\n\t\treturn this.#compositionSource.getReferences(unique);\r\n\t}\r\n\r\n\tasync availableCompositions(args: UmbDocumentTypeAvailableCompositionRequestModel) {\r\n\t\treturn this.#compositionSource.availableCompositions(args);\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentTypeCompositionRepository as api };\r\n"],"names":["UmbDocumentTypeCompositionServerDataSource","#host","host","unique","response","tryExecute","DocumentTypeService","error","reference","args","body","composition","UmbDocumentTypeCompositionRepository","UmbRepositoryBase","#compositionSource"],"mappings":";;;AAiBO,MAAMA,EAOb;AAAA,EACCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,MAAM,cAAcC,GAAgB;AACnC,UAAMC,IAAW,MAAMC;AAAA,MACtB,KAAKJ;AAAA,MACLK,EAAoB,yCAAyC,EAAE,MAAM,EAAE,IAAIH,EAAA,EAAU,CAAA;AAAA,IACtF,GACMI,IAAQH,EAAS;AAShB,WAAA,EAAE,MARiEA,EAAS,MAAM,IAAI,CAACI,OACtF;AAAA,MACN,QAAQA,EAAU;AAAA,MAClB,MAAMA,EAAU;AAAA,MAChB,MAAMA,EAAU;AAAA,IACjB,EACA,GAEc,OAAAD,EAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAStB,MAAM,sBAAsBE,GAAuD;AAClF,UAAMC,IAA4C;AAAA,MACjD,IAAID,EAAK;AAAA,MACT,WAAWA,EAAK;AAAA,MAChB,qBAAqBA,EAAK;AAAA,MAC1B,wBAAwBA,EAAK;AAAA,IAC9B,GAEML,IAAW,MAAMC,EAAW,KAAKJ,IAAOK,EAAoB,sCAAsC,EAAE,MAAAI,EAAK,CAAC,CAAC,GAC3GH,IAAQH,EAAS;AAWhB,WAAA,EAAE,MAVkEA,EAAS,MAAM,IAAI,CAACO,OACvF;AAAA,MACN,QAAQA,EAAY;AAAA,MACpB,MAAMA,EAAY;AAAA,MAClB,MAAMA,EAAY;AAAA,MAClB,YAAYA,EAAY;AAAA,MACxB,cAAcA,EAAY;AAAA,IAC3B,EACA,GAEc,OAAAJ,EAAM;AAAA,EAAA;AAEvB;AC5EO,MAAMK,UACJC,EAOT;AAAA,EACCC;AAAA,EAEA,YAAYZ,GAAyB;AACpC,UAAMA,CAAI,GACL,KAAAY,KAAqB,IAAId,EAA2C,IAAI;AAAA,EAAA;AAAA,EAG9E,MAAM,cAAcG,GAAgB;AAC5B,WAAA,KAAKW,GAAmB,cAAcX,CAAM;AAAA,EAAA;AAAA,EAGpD,MAAM,sBAAsBM,GAAuD;AAC3E,WAAA,KAAKK,GAAmB,sBAAsBL,CAAI;AAAA,EAAA;AAE3D;"}