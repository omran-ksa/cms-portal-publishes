{"version":3,"file":"document-global-search-nD8a5kJ7.js","sources":["../../../src/packages/documents/documents/search/global-search/document-global-search.ts"],"sourcesContent":["import type { UmbDocumentSearchProvider } from '../document.search-provider.js';\r\nimport {\r\n\tUmbGlobalSearchBase,\r\n\ttype UmbGlobalSearchApi,\r\n\ttype UmbSearchRequestArgs,\r\n} from '@umbraco-cms/backoffice/search';\r\nimport { UMB_VARIANT_CONTEXT } from '@umbraco-cms/backoffice/variant';\r\n\r\nexport class UmbDocumentGlobalSearch\r\n\textends UmbGlobalSearchBase<UmbDocumentSearchProvider>\r\n\timplements UmbGlobalSearchApi\r\n{\r\n\toverride async search(args: UmbSearchRequestArgs) {\r\n\t\tawait this._init;\r\n\r\n\t\tif (!this._searchProvider) {\r\n\t\t\tthrow new Error('Search provider is not available');\r\n\t\t}\r\n\r\n\t\t// TODO: change this to consume so we don't emit context events for every search change [MR]\r\n\t\tconst variantContext = await this.getContext(UMB_VARIANT_CONTEXT);\r\n\t\tconst displayCulture = await variantContext?.getDisplayCulture();\r\n\r\n\t\treturn await this._searchProvider.search({ culture: displayCulture, query: args.query });\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentGlobalSearch as api };\r\n"],"names":["UmbDocumentGlobalSearch","UmbGlobalSearchBase","args","displayCulture","UMB_VARIANT_CONTEXT"],"mappings":";;AAQO,MAAMA,UACJC,EAET;AAAA,EACC,MAAe,OAAOC,GAA4B;AAG7C,QAFJ,MAAM,KAAK,OAEP,CAAC,KAAK;AACH,YAAA,IAAI,MAAM,kCAAkC;AAK7C,UAAAC,IAAiB,OADA,MAAM,KAAK,WAAWC,CAAmB,IACnB,kBAAkB;AAExD,WAAA,MAAM,KAAK,gBAAgB,OAAO,EAAE,SAASD,GAAgB,OAAOD,EAAK,OAAO;AAAA,EAAA;AAEzF;"}