{"version":3,"file":"document-notifications.repository-Crs2B9Ne.js","sources":["../../../src/packages/documents/documents/entity-actions/notifications/repository/document-notifications.server.data.ts","../../../src/packages/documents/documents/entity-actions/notifications/repository/document-notifications.repository.ts"],"sourcesContent":["import { DocumentService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UpdateDocumentNotificationsRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the Document Culture and Hostnames that fetches data from the server\r\n * @class UmbDocumentNotificationsServerDataSource\r\n */\r\nexport class UmbDocumentNotificationsServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbDocumentNotificationsServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbDocumentNotificationsServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches the Culture and Hostnames for the given Document unique\r\n\t * @param {string} unique - The unique identifier of the Document\r\n\t * @memberof UmbDocumentNotificationsServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\t\treturn tryExecute(this.#host, DocumentService.getDocumentByIdNotifications({ path: { id: unique } }));\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Culture and Hostnames for the given Document unique\r\n\t * @param {string} unique - The unique identifier of the Document\r\n\t * @param {UpdateDocumentNotificationsRequestModel} data - The data to update\r\n\t * @memberof UmbDocumentNotificationsServerDataSource\r\n\t */\r\n\tasync update(unique: string, data: UpdateDocumentNotificationsRequestModel) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\t\treturn tryExecute(this.#host, DocumentService.putDocumentByIdNotifications({ path: { id: unique }, body: data }));\r\n\t}\r\n}\r\n","import { UmbDocumentNotificationsServerDataSource } from './document-notifications.server.data.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport type { UpdateDocumentNotificationsRequestModel } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\n\r\nexport class UmbDocumentNotificationsRepository extends UmbControllerBase implements UmbApi {\r\n\t#dataSource = new UmbDocumentNotificationsServerDataSource(this);\r\n\r\n\t#notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n\t#localize = new UmbLocalizationController(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\r\n\t\t\tthis.#notificationContext = instance;\r\n\t\t});\r\n\t}\r\n\r\n\tasync readNotifications(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await this.#dataSource.read(unique);\r\n\t\tif (!error) {\r\n\t\t\treturn { data };\r\n\t\t}\r\n\t\treturn { error };\r\n\t}\r\n\r\n\tasync updateNotifications(unique: string, documentName: string, data: UpdateDocumentNotificationsRequestModel) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\t\tif (!data) throw new Error('Data is missing');\r\n\r\n\t\tconst { error } = await this.#dataSource.update(unique, data);\r\n\t\tif (!error) {\r\n\t\t\tconst notification = {\r\n\t\t\t\tdata: { message: this.#localize.term('notifications_notificationsSavedFor', documentName) },\r\n\t\t\t};\r\n\t\t\tthis.#notificationContext?.peek('positive', notification);\r\n\t\t}\r\n\t\treturn { error };\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentNotificationsRepository as api };\r\n"],"names":["UmbDocumentNotificationsServerDataSource","#host","host","unique","tryExecute","DocumentService","data","UmbDocumentNotificationsRepository","UmbControllerBase","#dataSource","#notificationContext","#localize","UmbLocalizationController","UMB_NOTIFICATION_CONTEXT","instance","error","documentName","notification"],"mappings":";;;;;AASO,MAAMA,EAAyC;AAAA,EACrDC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,MAAM,KAAKC,GAAgB;AAC1B,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAChD,WAAOC,EAAW,KAAKH,IAAOI,EAAgB,6BAA6B,EAAE,MAAM,EAAE,IAAIF,EAAA,EAAU,CAAA,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrG,MAAM,OAAOA,GAAgBG,GAA+C;AAC3E,QAAI,CAACH,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAChD,WAAOC,EAAW,KAAKH,IAAOI,EAAgB,6BAA6B,EAAE,MAAM,EAAE,IAAIF,EAAO,GAAG,MAAMG,EAAM,CAAA,CAAC;AAAA,EAAA;AAElH;ACjCO,MAAMC,UAA2CC,EAAoC;AAAA,EAC3FC,KAAc,IAAIT,EAAyC,IAAI;AAAA,EAE/DU;AAAA,EAEAC,KAAY,IAAIC,EAA0B,IAAI;AAAA,EAE9C,YAAYV,GAAyB;AACpC,UAAMA,CAAI,GAEL,KAAA,eAAeW,GAA0B,CAACC,MAAa;AAC3D,WAAKJ,KAAuBI;AAAA,IAAA,CAC5B;AAAA,EAAA;AAAA,EAGF,MAAM,kBAAkBX,GAAgB;AACvC,QAAI,CAACA,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAE1C,UAAA,EAAE,MAAAG,GAAM,OAAAS,EAAM,IAAI,MAAM,KAAKN,GAAY,KAAKN,CAAM;AAC1D,WAAKY,IAGE,EAAE,OAAAA,EAAM,IAFP,EAAE,MAAAT,EAAK;AAAA,EAEA;AAAA,EAGhB,MAAM,oBAAoBH,GAAgBa,GAAsBV,GAA+C;AAC9G,QAAI,CAACH,EAAc,OAAA,IAAI,MAAM,mBAAmB;AAChD,QAAI,CAACG,EAAY,OAAA,IAAI,MAAM,iBAAiB;AAEtC,UAAA,EAAE,OAAAS,MAAU,MAAM,KAAKN,GAAY,OAAON,GAAQG,CAAI;AAC5D,QAAI,CAACS,GAAO;AACX,YAAME,IAAe;AAAA,QACpB,MAAM,EAAE,SAAS,KAAKN,GAAU,KAAK,uCAAuCK,CAAY,EAAE;AAAA,MAC3F;AACK,WAAAN,IAAsB,KAAK,YAAYO,CAAY;AAAA,IAAA;AAEzD,WAAO,EAAE,OAAAF,EAAM;AAAA,EAAA;AAEjB;"}