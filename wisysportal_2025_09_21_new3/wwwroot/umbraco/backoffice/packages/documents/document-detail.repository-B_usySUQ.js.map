{"version":3,"file":"document-detail.repository-B_usySUQ.js","sources":["../../../src/packages/documents/documents/repository/detail/document-detail.server.data-source.ts","../../../src/packages/documents/documents/repository/detail/document-detail.repository.ts"],"sourcesContent":["import type { UmbDocumentDetailModel } from '../../types.js';\r\nimport { UMB_DOCUMENT_ENTITY_TYPE, UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE } from '../../entity.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type { UmbDetailDataSource } from '@umbraco-cms/backoffice/repository';\r\nimport type {\r\n\tCreateDocumentRequestModel,\r\n\tUpdateDocumentRequestModel,\r\n} from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { DocumentService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\nimport { umbDeepMerge, type UmbDeepPartialObject } from '@umbraco-cms/backoffice/utils';\r\nimport type { UmbReferenceByUnique } from '@umbraco-cms/backoffice/models';\r\nimport { UmbDocumentTypeDetailServerDataSource } from '@umbraco-cms/backoffice/document-type';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\n\r\n/**\r\n * A data source for the Document that fetches data from the server\r\n * @class UmbDocumentServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbDocumentServerDataSource\r\n\textends UmbControllerBase\r\n\timplements UmbDetailDataSource<UmbDocumentDetailModel>\r\n{\r\n\t/**\r\n\t * Creates a new Document scaffold\r\n\t * @param preset\r\n\t * @returns { UmbDocumentDetailModel }\r\n\t * @memberof UmbDocumentServerDataSource\r\n\t */\r\n\tasync createScaffold(preset: UmbDeepPartialObject<UmbDocumentDetailModel> = {}) {\r\n\t\tlet documentTypeIcon: string | null = null;\r\n\t\tlet documentTypeCollection: UmbReferenceByUnique | null = null;\r\n\r\n\t\tconst documentTypeUnique = preset.documentType?.unique;\r\n\r\n\t\tif (!documentTypeUnique) {\r\n\t\t\tthrow new Error('Document type unique is missing');\r\n\t\t}\r\n\r\n\t\tconst { data } = await new UmbDocumentTypeDetailServerDataSource(this).read(documentTypeUnique);\r\n\t\tdocumentTypeIcon = data?.icon ?? null;\r\n\t\tdocumentTypeCollection = data?.collection ?? null;\r\n\r\n\t\tconst defaultData: UmbDocumentDetailModel = {\r\n\t\t\tentityType: UMB_DOCUMENT_ENTITY_TYPE,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\ttemplate: null,\r\n\t\t\tdocumentType: {\r\n\t\t\t\tunique: documentTypeUnique,\r\n\t\t\t\tcollection: documentTypeCollection,\r\n\t\t\t\ticon: documentTypeIcon,\r\n\t\t\t},\r\n\t\t\tisTrashed: false,\r\n\t\t\tvalues: [],\r\n\t\t\tvariants: [],\r\n\t\t};\r\n\r\n\t\tconst scaffold = umbDeepMerge(preset, defaultData);\r\n\r\n\t\treturn { data: scaffold };\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a Document with the given id from the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentServerDataSource\r\n\t */\r\n\tasync read(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\r\n\t\tconst { data, error } = await tryExecute(this, DocumentService.getDocumentById({ path: { id: unique } }));\r\n\r\n\t\tif (error || !data) {\r\n\t\t\treturn { error };\r\n\t\t}\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst document: UmbDocumentDetailModel = {\r\n\t\t\tentityType: UMB_DOCUMENT_ENTITY_TYPE,\r\n\t\t\tunique: data.id,\r\n\t\t\tvalues: data.values.map((value) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\teditorAlias: value.editorAlias,\r\n\t\t\t\t\tentityType: UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE,\r\n\t\t\t\t\tculture: value.culture || null,\r\n\t\t\t\t\tsegment: value.segment || null,\r\n\t\t\t\t\talias: value.alias,\r\n\t\t\t\t\tvalue: value.value,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\tvariants: data.variants.map((variant) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tculture: variant.culture || null,\r\n\t\t\t\t\tsegment: variant.segment || null,\r\n\t\t\t\t\tstate: variant.state,\r\n\t\t\t\t\tname: variant.name,\r\n\t\t\t\t\tpublishDate: variant.publishDate || null,\r\n\t\t\t\t\tcreateDate: variant.createDate,\r\n\t\t\t\t\tupdateDate: variant.updateDate,\r\n\t\t\t\t\tscheduledPublishDate: variant.scheduledPublishDate || null,\r\n\t\t\t\t\tscheduledUnpublishDate: variant.scheduledUnpublishDate || null,\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\ttemplate: data.template ? { unique: data.template.id } : null,\r\n\t\t\tdocumentType: {\r\n\t\t\t\tunique: data.documentType.id,\r\n\t\t\t\tcollection: data.documentType.collection ? { unique: data.documentType.collection.id } : null,\r\n\t\t\t\ticon: data.documentType.icon,\r\n\t\t\t},\r\n\t\t\tisTrashed: data.isTrashed,\r\n\t\t};\r\n\r\n\t\treturn { data: document };\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts a new Document on the server\r\n\t * @param {UmbDocumentDetailModel} model - Document Model\r\n\t * @param parentUnique\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentServerDataSource\r\n\t */\r\n\tasync create(model: UmbDocumentDetailModel, parentUnique: string | null = null) {\r\n\t\tif (!model) throw new Error('Document is missing');\r\n\t\tif (!model.unique) throw new Error('Document unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: CreateDocumentRequestModel = {\r\n\t\t\tid: model.unique,\r\n\t\t\tparent: parentUnique ? { id: parentUnique } : null,\r\n\t\t\tdocumentType: { id: model.documentType.unique },\r\n\t\t\ttemplate: model.template ? { id: model.template.unique } : null,\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { data, error } = await tryExecute(\r\n\t\t\tthis,\r\n\t\t\tDocumentService.postDocument({\r\n\t\t\t\tbody: body,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (data) {\r\n\t\t\treturn this.read(data as any);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a Document on the server\r\n\t * @param {UmbDocumentDetailModel} model - Document Model\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentServerDataSource\r\n\t */\r\n\tasync update(model: UmbDocumentDetailModel) {\r\n\t\tif (!model.unique) throw new Error('Unique is missing');\r\n\r\n\t\t// TODO: make data mapper to prevent errors\r\n\t\tconst body: UpdateDocumentRequestModel = {\r\n\t\t\ttemplate: model.template ? { id: model.template.unique } : null,\r\n\t\t\tvalues: model.values,\r\n\t\t\tvariants: model.variants,\r\n\t\t};\r\n\r\n\t\tconst { error } = await tryExecute(\r\n\t\t\tthis,\r\n\t\t\tDocumentService.putDocumentById({\r\n\t\t\t\tpath: { id: model.unique },\r\n\t\t\t\tbody: body,\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tif (!error) {\r\n\t\t\treturn this.read(model.unique);\r\n\t\t}\r\n\r\n\t\treturn { error };\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a Document on the server\r\n\t * @param {string} unique\r\n\t * @returns {*}\r\n\t * @memberof UmbDocumentServerDataSource\r\n\t */\r\n\tasync delete(unique: string) {\r\n\t\tif (!unique) throw new Error('Unique is missing');\r\n\t\treturn tryExecute(this, DocumentService.deleteDocumentById({ path: { id: unique } }));\r\n\t}\r\n}\r\n","import type { UmbDocumentDetailModel } from '../../types.js';\r\nimport { UmbDocumentServerDataSource } from './document-detail.server.data-source.js';\r\nimport { UMB_DOCUMENT_DETAIL_STORE_CONTEXT } from './document-detail.store.context-token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\nexport class UmbDocumentDetailRepository extends UmbDetailRepositoryBase<UmbDocumentDetailModel> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbDocumentServerDataSource, UMB_DOCUMENT_DETAIL_STORE_CONTEXT);\r\n\t}\r\n}\r\n\r\nexport { UmbDocumentDetailRepository as api };\r\n"],"names":["UmbDocumentServerDataSource","UmbControllerBase","preset","documentTypeIcon","documentTypeCollection","documentTypeUnique","data","UmbDocumentTypeDetailServerDataSource","defaultData","UMB_DOCUMENT_ENTITY_TYPE","UmbId","umbDeepMerge","unique","error","tryExecute","DocumentService","value","UMB_DOCUMENT_PROPERTY_VALUE_ENTITY_TYPE","variant","model","parentUnique","body","UmbDocumentDetailRepository","UmbDetailRepositoryBase","host","UMB_DOCUMENT_DETAIL_STORE_CONTEXT"],"mappings":"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"}