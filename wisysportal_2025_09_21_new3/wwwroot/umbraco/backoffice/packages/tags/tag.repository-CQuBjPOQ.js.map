{"version":3,"file":"tag.repository-CQuBjPOQ.js","sources":["../../../src/packages/tags/repository/sources/tag.server.data.ts","../../../src/packages/tags/repository/tag.repository.ts"],"sourcesContent":["import { TagService } from '@umbraco-cms/backoffice/external/backend-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { tryExecute } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * A data source for the Tag that fetches data from the server\r\n * @class UmbTagServerDataSource\r\n * @implements {RepositoryDetailDataSource}\r\n */\r\nexport class UmbTagServerDataSource {\r\n\t#host: UmbControllerHost;\r\n\r\n\t/**\r\n\t * Creates an instance of UmbTagServerDataSource.\r\n\t * @param {UmbControllerHost} host - The controller host for this controller to be appended to\r\n\t * @memberof UmbTagServerDataSource\r\n\t */\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tthis.#host = host;\r\n\t}\r\n\r\n\t/**\r\n\t * Get a list of tags on the server\r\n\t * @param root0\r\n\t * @param root0.query\r\n\t * @param root0.skip\r\n\t * @param root0.take\r\n\t * @param root0.tagGroup\r\n\t * @param root0.culture\r\n\t * @returns {*}\r\n\t * @memberof UmbTagServerDataSource\r\n\t */\r\n\tasync getCollection({\r\n\t\tquery,\r\n\t\tskip,\r\n\t\ttake,\r\n\t\ttagGroup,\r\n\t\tculture,\r\n\t}: {\r\n\t\tquery: string;\r\n\t\tskip: number;\r\n\t\ttake: number;\r\n\t\ttagGroup?: string;\r\n\t\tculture?: string;\r\n\t}) {\r\n\t\treturn tryExecute(this.#host, TagService.getTag({ query: { query, skip, take, tagGroup, culture } }));\r\n\t}\r\n}\r\n","import { UmbTagServerDataSource } from './sources/tag.server.data.js';\r\nimport type { UmbTagStore } from './tag.store.js';\r\nimport { UMB_TAG_STORE_CONTEXT } from './tag.store.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbApi } from '@umbraco-cms/backoffice/extension-api';\r\n\r\nexport class UmbTagRepository extends UmbControllerBase implements UmbApi {\r\n\t#init!: Promise<unknown>;\r\n\r\n\t#dataSource: UmbTagServerDataSource;\r\n\t#tagStore?: UmbTagStore;\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host);\r\n\r\n\t\tthis.#dataSource = new UmbTagServerDataSource(this);\r\n\r\n\t\tthis.#init = this.consumeContext(UMB_TAG_STORE_CONTEXT, (instance) => {\r\n\t\t\tthis.#tagStore = instance;\r\n\t\t}).asPromise({ preventTimeout: true });\r\n\t}\r\n\r\n\tasync requestTags(\r\n\t\ttagGroupName: string,\r\n\t\tculture: string | null,\r\n\t\t{ skip, take, query } = { skip: 0, take: 1000, query: '' },\r\n\t) {\r\n\t\tawait this.#init;\r\n\r\n\t\tconst requestCulture = culture || '';\r\n\r\n\t\tconst { data, error } = await this.#dataSource.getCollection({\r\n\t\t\tskip,\r\n\t\t\ttake,\r\n\t\t\ttagGroup: tagGroupName,\r\n\t\t\tculture: requestCulture,\r\n\t\t\tquery,\r\n\t\t});\r\n\r\n\t\tif (data) {\r\n\t\t\t// TODO: allow to append an array of items to the store\r\n\t\t\t// TODO: Lone: append culture? \"Invariant\" if null. Niels: Actually, as of my current stand point, I think we should aim for invariant to be the value of ´null´.\r\n\t\t\tdata.items.forEach((x) => this.#tagStore?.append(x));\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tdata,\r\n\t\t\terror,\r\n\t\t\tasObservable: () => this.#tagStore!.byQuery(tagGroupName, requestCulture, query),\r\n\t\t};\r\n\t}\r\n\r\n\tasync queryTags(\r\n\t\ttagGroupName: string,\r\n\t\tculture: string | null,\r\n\t\tquery: string,\r\n\t\t{ skip, take } = { skip: 0, take: 1000 },\r\n\t) {\r\n\t\treturn this.requestTags(tagGroupName, culture, { skip, take, query });\r\n\t}\r\n}\r\n\r\nexport default UmbTagRepository;\r\n"],"names":["UmbTagServerDataSource","#host","host","query","skip","take","tagGroup","culture","tryExecute","TagService","UmbTagRepository","UmbControllerBase","#init","#dataSource","#tagStore","UMB_TAG_STORE_CONTEXT","instance","tagGroupName","requestCulture","data","error","x"],"mappings":";;;;AASO,MAAMA,EAAuB;AAAA,EACnCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYC,GAAyB;AACpC,SAAKD,KAAQC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcd,MAAM,cAAc;AAAA,IACnB,OAAAC;AAAA,IACA,MAAAC;AAAA,IACA,MAAAC;AAAA,IACA,UAAAC;AAAA,IACA,SAAAC;AAAA,EAAA,GAOE;AACF,WAAOC,EAAW,KAAKP,IAAOQ,EAAW,OAAO,EAAE,OAAO,EAAE,OAAAN,GAAO,MAAAC,GAAM,MAAAC,GAAM,UAAAC,GAAU,SAAAC,EAAQ,EAAG,CAAA,CAAC;AAAA,EAAA;AAEtG;ACxCO,MAAMG,UAAyBC,EAAoC;AAAA,EACzEC;AAAA,EAEAC;AAAA,EACAC;AAAA,EAEA,YAAYZ,GAAyB;AACpC,UAAMA,CAAI,GAEL,KAAAW,KAAc,IAAIb,EAAuB,IAAI,GAElD,KAAKY,KAAQ,KAAK,eAAeG,GAAuB,CAACC,MAAa;AACrE,WAAKF,KAAYE;AAAA,IACjB,CAAA,EAAE,UAAU,EAAE,gBAAgB,IAAM;AAAA,EAAA;AAAA,EAGtC,MAAM,YACLC,GACAV,GACA,EAAE,MAAAH,GAAM,MAAAC,GAAM,OAAAF,EAAA,IAAU,EAAE,MAAM,GAAG,MAAM,KAAM,OAAO,MACrD;AACD,UAAM,KAAKS;AAEX,UAAMM,IAAiBX,KAAW,IAE5B,EAAE,MAAAY,GAAM,OAAAC,EAAA,IAAU,MAAM,KAAKP,GAAY,cAAc;AAAA,MAC5D,MAAAT;AAAA,MACA,MAAAC;AAAA,MACA,UAAUY;AAAA,MACV,SAASC;AAAA,MACT,OAAAf;AAAA,IAAA,CACA;AAED,WAAIgB,KAGEA,EAAA,MAAM,QAAQ,CAACE,MAAM,KAAKP,IAAW,OAAOO,CAAC,CAAC,GAG7C;AAAA,MACN,MAAAF;AAAA,MACA,OAAAC;AAAA,MACA,cAAc,MAAM,KAAKN,GAAW,QAAQG,GAAcC,GAAgBf,CAAK;AAAA,IAChF;AAAA,EAAA;AAAA,EAGD,MAAM,UACLc,GACAV,GACAJ,GACA,EAAE,MAAAC,GAAM,MAAAC,EAAK,IAAI,EAAE,MAAM,GAAG,MAAM,OACjC;AACM,WAAA,KAAK,YAAYY,GAAcV,GAAS,EAAE,MAAAH,GAAM,MAAAC,GAAM,OAAAF,GAAO;AAAA,EAAA;AAEtE;"}