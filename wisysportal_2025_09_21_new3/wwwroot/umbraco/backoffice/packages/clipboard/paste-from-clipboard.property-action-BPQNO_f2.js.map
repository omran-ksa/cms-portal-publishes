{"version":3,"file":"paste-from-clipboard.property-action-BPQNO_f2.js","sources":["../../../src/packages/clipboard/property/actions/paste/paste-from-clipboard.property-action.ts"],"sourcesContent":["import { UmbClipboardEntryItemRepository } from '../../../clipboard-entry/index.js';\r\nimport { UMB_CLIPBOARD_PROPERTY_CONTEXT } from '../../context/clipboard.property-context-token.js';\r\nimport type { MetaPropertyActionPasteFromClipboardKind } from './types.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property';\r\nimport { UmbPropertyActionBase, type UmbPropertyActionArgs } from '@umbraco-cms/backoffice/property-action';\r\n\r\nexport class UmbPasteFromClipboardPropertyAction extends UmbPropertyActionBase<MetaPropertyActionPasteFromClipboardKind> {\r\n\t#init: Promise<unknown>;\r\n\t#propertyContext?: typeof UMB_PROPERTY_CONTEXT.TYPE;\r\n\t#clipboardContext?: typeof UMB_CLIPBOARD_PROPERTY_CONTEXT.TYPE;\r\n\r\n\tconstructor(host: UmbControllerHost, args: UmbPropertyActionArgs<MetaPropertyActionPasteFromClipboardKind>) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis.#init = Promise.all([\r\n\t\t\tthis.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\r\n\t\t\t\tthis.#propertyContext = context;\r\n\t\t\t}).asPromise({ preventTimeout: true }),\r\n\r\n\t\t\tthis.consumeContext(UMB_CLIPBOARD_PROPERTY_CONTEXT, (context) => {\r\n\t\t\t\tthis.#clipboardContext = context;\r\n\t\t\t}).asPromise({ preventTimeout: true }),\r\n\t\t]);\r\n\t}\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tprotected async _pickerFilter(value: any, config: any) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\toverride async execute() {\r\n\t\tawait this.#init;\r\n\t\tif (!this.#clipboardContext) throw new Error('Clipboard context not found');\r\n\t\tif (!this.#propertyContext) throw new Error('Property context not found');\r\n\r\n\t\tconst propertyEditorManifest = this.#propertyContext.getEditorManifest();\r\n\r\n\t\tif (!propertyEditorManifest) {\r\n\t\t\tthrow new Error('Property editor manifest not found');\r\n\t\t}\r\n\r\n\t\tconst result = await this.#clipboardContext.pick({\r\n\t\t\tpropertyEditorUiAlias: propertyEditorManifest.alias,\r\n\t\t\tmultiple: false,\r\n\t\t\tfilter: this._pickerFilter,\r\n\t\t});\r\n\r\n\t\tconst selectedUnique = result.selection[0];\r\n\t\tconst propertyValue = result.propertyValues[0];\r\n\r\n\t\tif (!selectedUnique) {\r\n\t\t\tthrow new Error('No clipboard entry selected');\r\n\t\t}\r\n\r\n\t\tif (!propertyValue) {\r\n\t\t\tthrow new Error('No property value found');\r\n\t\t}\r\n\r\n\t\tconst hasCurrentPropertyValue = this.#propertyContext.getValue();\r\n\r\n\t\tif (hasCurrentPropertyValue) {\r\n\t\t\tconst clipboardEntryItemRepository = new UmbClipboardEntryItemRepository(this);\r\n\t\t\tconst { data } = await clipboardEntryItemRepository.requestItems([selectedUnique]);\r\n\r\n\t\t\tif (!data || data.length === 0) {\r\n\t\t\t\tthrow new Error('Clipboard entry not found');\r\n\t\t\t}\r\n\r\n\t\t\tconst item = data[0];\r\n\r\n\t\t\t// Todo: localize\r\n\t\t\tawait umbConfirmModal(this, {\r\n\t\t\t\theadline: 'Paste from clipboard',\r\n\t\t\t\tcontent: `The property already contains a value. Paste from the property action will overwrite the current value.\r\n\t\t\t\tDo you want to replace the current value with ${item.name}?`,\r\n\t\t\t\tconfirmLabel: 'Paste',\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.#propertyContext?.setValue(propertyValue);\r\n\t}\r\n}\r\nexport { UmbPasteFromClipboardPropertyAction as api };\r\n"],"names":["UmbPasteFromClipboardPropertyAction","UmbPropertyActionBase","#init","#propertyContext","#clipboardContext","host","args","UMB_PROPERTY_CONTEXT","context","UMB_CLIPBOARD_PROPERTY_CONTEXT","value","config","propertyEditorManifest","result","selectedUnique","propertyValue","clipboardEntryItemRepository","UmbClipboardEntryItemRepository","data","item","umbConfirmModal"],"mappings":";;;;;;;;;;;;;AAQO,MAAMA,UAA4CC,EAAgE;AAAA,EACxHC;AAAA,EACAC;AAAA,EACAC;AAAA,EAEA,YAAYC,GAAyBC,GAAuE;AAC3G,UAAMD,GAAMC,CAAI,GAEX,KAAAJ,KAAQ,QAAQ,IAAI;AAAA,MACxB,KAAK,eAAeK,GAAsB,CAACC,MAAY;AACtD,aAAKL,KAAmBK;AAAA,MACxB,CAAA,EAAE,UAAU,EAAE,gBAAgB,IAAM;AAAA,MAErC,KAAK,eAAeC,GAAgC,CAACD,MAAY;AAChE,aAAKJ,KAAoBI;AAAA,MACzB,CAAA,EAAE,UAAU,EAAE,gBAAgB,GAAM,CAAA;AAAA,IAAA,CACrC;AAAA,EAAA;AAAA;AAAA,EAIF,MAAgB,cAAcE,GAAYC,GAAa;AAC/C,WAAA;AAAA,EAAA;AAAA,EAGR,MAAe,UAAU;AAExB,QADA,MAAM,KAAKT,IACP,CAAC,KAAKE,GAAyB,OAAA,IAAI,MAAM,6BAA6B;AAC1E,QAAI,CAAC,KAAKD,GAAwB,OAAA,IAAI,MAAM,4BAA4B;AAElE,UAAAS,IAAyB,KAAKT,GAAiB,kBAAkB;AAEvE,QAAI,CAACS;AACE,YAAA,IAAI,MAAM,oCAAoC;AAGrD,UAAMC,IAAS,MAAM,KAAKT,GAAkB,KAAK;AAAA,MAChD,uBAAuBQ,EAAuB;AAAA,MAC9C,UAAU;AAAA,MACV,QAAQ,KAAK;AAAA,IAAA,CACb,GAEKE,IAAiBD,EAAO,UAAU,CAAC,GACnCE,IAAgBF,EAAO,eAAe,CAAC;AAE7C,QAAI,CAACC;AACE,YAAA,IAAI,MAAM,6BAA6B;AAG9C,QAAI,CAACC;AACE,YAAA,IAAI,MAAM,yBAAyB;AAK1C,QAFgC,KAAKZ,GAAiB,SAAS,GAElC;AACtB,YAAAa,IAA+B,IAAIC,EAAgC,IAAI,GACvE,EAAE,MAAAC,MAAS,MAAMF,EAA6B,aAAa,CAACF,CAAc,CAAC;AAEjF,UAAI,CAACI,KAAQA,EAAK,WAAW;AACtB,cAAA,IAAI,MAAM,2BAA2B;AAGtC,YAAAC,IAAOD,EAAK,CAAC;AAGnB,YAAME,EAAgB,MAAM;AAAA,QAC3B,UAAU;AAAA,QACV,SAAS;AAAA,oDACuCD,EAAK,IAAI;AAAA,QACzD,cAAc;AAAA,MAAA,CACd;AAAA,IAAA;AAGG,SAAAhB,IAAkB,SAASY,CAAa;AAAA,EAAA;AAE/C;"}