{"version":3,"file":"clipboard-paste-translator-value-resolver-CvUcR1Sa.js","sources":["../../../src/packages/clipboard/property/value-translator/copy/clipboard-copy-translator-value-resolver.ts","../../../src/packages/clipboard/property/value-translator/paste/clipboard-paste-translator-value-resolver.ts"],"sourcesContent":["import type { UmbClipboardEntryValuesType } from '../../../clipboard-entry/types.js';\r\nimport type { UmbClipboardCopyPropertyValueTranslator } from './types.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { createExtensionApi } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class UmbClipboardCopyPropertyValueTranslatorValueResolver extends UmbControllerBase {\r\n\tasync resolve(propertyValue: any, propertyEditorUiAlias: string): Promise<UmbClipboardEntryValuesType> {\r\n\t\tif (!propertyValue) {\r\n\t\t\tthrow new Error('Property value is required.');\r\n\t\t}\r\n\r\n\t\tif (!propertyEditorUiAlias) {\r\n\t\t\tthrow new Error('Property editor UI alias is required.');\r\n\t\t}\r\n\r\n\t\tconst manifests = umbExtensionsRegistry.getByTypeAndFilter(\r\n\t\t\t'clipboardCopyPropertyValueTranslator',\r\n\t\t\t(x) => x.fromPropertyEditorUi === propertyEditorUiAlias,\r\n\t\t);\r\n\r\n\t\tif (!manifests.length) {\r\n\t\t\tthrow new Error('No clipboard copy translators found.');\r\n\t\t}\r\n\r\n\t\t// Create translators\r\n\t\tconst apiPromises = manifests.map((manifest) =>\r\n\t\t\tcreateExtensionApi(this, manifest).then((api) => {\r\n\t\t\t\tif (api) {\r\n\t\t\t\t\t(api as any).manifest = manifest;\r\n\t\t\t\t}\r\n\t\t\t\treturn api;\r\n\t\t\t}),\r\n\t\t);\r\n\t\tconst apis = await Promise.all(apiPromises);\r\n\r\n\t\t// Translate values\r\n\t\tconst valuePromises = apis.map(async (api: UmbClipboardCopyPropertyValueTranslator | undefined) =>\r\n\t\t\tapi?.translate(propertyValue),\r\n\t\t);\r\n\t\tconst translatedValues = await Promise.all(valuePromises);\r\n\r\n\t\t// Map to clipboard entry value models with entry type and value\r\n\t\tconst entryValues = translatedValues.map((value: any, index: number) => {\r\n\t\t\tconst valueType = manifests[index].toClipboardEntryValueType;\r\n\t\t\treturn { type: valueType, value };\r\n\t\t});\r\n\r\n\t\treturn entryValues;\r\n\t}\r\n}\r\n","import type { UmbClipboardEntryValuesType } from '../../../clipboard-entry/types.js';\r\nimport type { UmbClipboardPastePropertyValueTranslator } from './types.js';\r\nimport type { ManifestClipboardPastePropertyValueTranslator } from './clipboard-paste-translator.extension.js';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { createExtensionApi, type ManifestBase } from '@umbraco-cms/backoffice/extension-api';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class UmbClipboardPastePropertyValueTranslatorValueResolver<\r\n\tPropertyValueType = unknown,\r\n> extends UmbControllerBase {\r\n\t#apiCache = new Map<string, UmbClipboardPastePropertyValueTranslator>();\r\n\r\n\tasync resolve(\r\n\t\tclipboardEntryValues: UmbClipboardEntryValuesType,\r\n\t\tpropertyEditorUiAlias: string,\r\n\t): Promise<PropertyValueType> {\r\n\t\tif (!clipboardEntryValues.length) {\r\n\t\t\tthrow new Error('Clipboard entry values are required.');\r\n\t\t}\r\n\r\n\t\tif (!propertyEditorUiAlias) {\r\n\t\t\tthrow new Error('Property editor UI alias is required.');\r\n\t\t}\r\n\r\n\t\tconst manifest = this.#getManifestWithBestFit(clipboardEntryValues, propertyEditorUiAlias);\r\n\t\tconst pasteTranslator = await this.getPasteTranslator(clipboardEntryValues, propertyEditorUiAlias);\r\n\r\n\t\tconst valueToTranslate = clipboardEntryValues.find((x) => x.type === manifest.fromClipboardEntryValueType);\r\n\r\n\t\tif (!valueToTranslate) {\r\n\t\t\tthrow new Error(`Value to translate is missing`);\r\n\t\t}\r\n\r\n\t\treturn pasteTranslator.translate(valueToTranslate.value);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the paste translator for the given clipboard entry values and property editor ui alias\r\n\t * @param {UmbClipboardEntryValuesType} clipboardEntryValues\r\n\t * @param {string} propertyEditorUiAlias\r\n\t * @returns {Promise<UmbClipboardPastePropertyValueTranslator>} - The paste translator\r\n\t * @memberof UmbClipboardPastePropertyValueTranslatorValueResolver\r\n\t */\r\n\tasync getPasteTranslator(\r\n\t\tclipboardEntryValues: UmbClipboardEntryValuesType,\r\n\t\tpropertyEditorUiAlias: string,\r\n\t): Promise<UmbClipboardPastePropertyValueTranslator> {\r\n\t\tconst manifest = this.#getManifestWithBestFit(clipboardEntryValues, propertyEditorUiAlias);\r\n\r\n\t\t// Check the cache before creating a new instance\r\n\t\tif (this.#apiCache.has(manifest.alias)) {\r\n\t\t\treturn this.#apiCache.get(manifest.alias)!;\r\n\t\t}\r\n\r\n\t\tconst pasteTranslator = await createExtensionApi<UmbClipboardPastePropertyValueTranslator>(this, manifest);\r\n\r\n\t\tif (!pasteTranslator) {\r\n\t\t\tthrow new Error('Failed to create paste translator.');\r\n\t\t}\r\n\r\n\t\tif (!pasteTranslator.translate) {\r\n\t\t\tthrow new Error('Paste translator does not have a translate method.');\r\n\t\t}\r\n\r\n\t\t// Cache the api instance for future use\r\n\t\tthis.#apiCache.set(manifest.alias, pasteTranslator);\r\n\r\n\t\treturn pasteTranslator;\r\n\t}\r\n\r\n\t#getManifestWithBestFit(\r\n\t\tclipboardEntryValues: UmbClipboardEntryValuesType,\r\n\t\tpropertyEditorUiAlias: string,\r\n\t): ManifestClipboardPastePropertyValueTranslator {\r\n\t\tconst supportedManifests = this.#getSupportedManifests(clipboardEntryValues, propertyEditorUiAlias);\r\n\r\n\t\tif (!supportedManifests.length) {\r\n\t\t\tthrow new Error('No paste translator found for the given property editor ui and entry value type.');\r\n\t\t}\r\n\r\n\t\t// Pick the manifest with the highest priority\r\n\t\t// TODO: This should have been handled in the extension registry, but until then we do it here: [NL]\r\n\t\treturn supportedManifests.sort((a: ManifestBase, b: ManifestBase): number => (b.weight || 0) - (a.weight || 0))[0];\r\n\t}\r\n\r\n\t#getSupportedManifests(clipboardEntryValues: UmbClipboardEntryValuesType, propertyEditorUiAlias: string) {\r\n\t\tconst entryValueTypes = clipboardEntryValues.map((x) => x.type);\r\n\r\n\t\tconst supportedManifests = umbExtensionsRegistry.getByTypeAndFilter(\r\n\t\t\t'clipboardPastePropertyValueTranslator',\r\n\t\t\t(manifest) => {\r\n\t\t\t\tconst canTranslateValue = entryValueTypes.includes(manifest.fromClipboardEntryValueType);\r\n\t\t\t\tconst supportsPropertyEditorUi = manifest.toPropertyEditorUi === propertyEditorUiAlias;\r\n\t\t\t\treturn canTranslateValue && supportsPropertyEditorUi;\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\treturn supportedManifests;\r\n\t}\r\n}\r\n"],"names":["UmbClipboardCopyPropertyValueTranslatorValueResolver","UmbControllerBase","propertyValue","propertyEditorUiAlias","manifests","umbExtensionsRegistry","x","apiPromises","manifest","createExtensionApi","api","valuePromises","value","index","UmbClipboardPastePropertyValueTranslatorValueResolver","#apiCache","clipboardEntryValues","#getManifestWithBestFit","pasteTranslator","valueToTranslate","supportedManifests","#getSupportedManifests","b","entryValueTypes","canTranslateValue","supportsPropertyEditorUi"],"mappings":";;;AAMO,MAAMA,UAA6DC,EAAkB;AAAA,EAC3F,MAAM,QAAQC,GAAoBC,GAAqE;AACtG,QAAI,CAACD;AACE,YAAA,IAAI,MAAM,6BAA6B;AAG9C,QAAI,CAACC;AACE,YAAA,IAAI,MAAM,uCAAuC;AAGxD,UAAMC,IAAYC,EAAsB;AAAA,MACvC;AAAA,MACA,CAACC,MAAMA,EAAE,yBAAyBH;AAAA,IACnC;AAEI,QAAA,CAACC,EAAU;AACR,YAAA,IAAI,MAAM,sCAAsC;AAIvD,UAAMG,IAAcH,EAAU;AAAA,MAAI,CAACI,MAClCC,EAAmB,MAAMD,CAAQ,EAAE,KAAK,CAACE,OACpCA,MACFA,EAAY,WAAWF,IAElBE,EACP;AAAA,IACF,GAIMC,KAHO,MAAM,QAAQ,IAAIJ,CAAW,GAGf;AAAA,MAAI,OAAOG,MACrCA,GAAK,UAAUR,CAAa;AAAA,IAC7B;AASO,YARkB,MAAM,QAAQ,IAAIS,CAAa,GAGnB,IAAI,CAACC,GAAYC,OAE9C,EAAE,MADST,EAAUS,CAAK,EAAE,2BACT,OAAAD,EAAM,EAChC;AAAA,EAEM;AAET;AC3CO,MAAME,UAEHb,EAAkB;AAAA,EAC3Bc,yBAAgB,IAAsD;AAAA,EAEtE,MAAM,QACLC,GACAb,GAC6B;AACzB,QAAA,CAACa,EAAqB;AACnB,YAAA,IAAI,MAAM,sCAAsC;AAGvD,QAAI,CAACb;AACE,YAAA,IAAI,MAAM,uCAAuC;AAGxD,UAAMK,IAAW,KAAKS,GAAwBD,GAAsBb,CAAqB,GACnFe,IAAkB,MAAM,KAAK,mBAAmBF,GAAsBb,CAAqB,GAE3FgB,IAAmBH,EAAqB,KAAK,CAACV,MAAMA,EAAE,SAASE,EAAS,2BAA2B;AAEzG,QAAI,CAACW;AACE,YAAA,IAAI,MAAM,+BAA+B;AAGzC,WAAAD,EAAgB,UAAUC,EAAiB,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUxD,MAAM,mBACLH,GACAb,GACoD;AACpD,UAAMK,IAAW,KAAKS,GAAwBD,GAAsBb,CAAqB;AAGzF,QAAI,KAAKY,GAAU,IAAIP,EAAS,KAAK;AACpC,aAAO,KAAKO,GAAU,IAAIP,EAAS,KAAK;AAGzC,UAAMU,IAAkB,MAAMT,EAA6D,MAAMD,CAAQ;AAEzG,QAAI,CAACU;AACE,YAAA,IAAI,MAAM,oCAAoC;AAGjD,QAAA,CAACA,EAAgB;AACd,YAAA,IAAI,MAAM,oDAAoD;AAIrE,gBAAKH,GAAU,IAAIP,EAAS,OAAOU,CAAe,GAE3CA;AAAA,EAAA;AAAA,EAGRD,GACCD,GACAb,GACgD;AAChD,UAAMiB,IAAqB,KAAKC,GAAuBL,GAAsBb,CAAqB;AAE9F,QAAA,CAACiB,EAAmB;AACjB,YAAA,IAAI,MAAM,kFAAkF;AAKnG,WAAOA,EAAmB,KAAK,CAAC,GAAiBE,OAA6BA,EAAE,UAAU,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC;AAAA,EAAA;AAAA,EAGlHD,GAAuBL,GAAmDb,GAA+B;AACxG,UAAMoB,IAAkBP,EAAqB,IAAI,CAACV,MAAMA,EAAE,IAAI;AAWvD,WAToBD,EAAsB;AAAA,MAChD;AAAA,MACA,CAACG,MAAa;AACb,cAAMgB,IAAoBD,EAAgB,SAASf,EAAS,2BAA2B,GACjFiB,IAA2BjB,EAAS,uBAAuBL;AACjE,eAAOqB,KAAqBC;AAAA,MAAA;AAAA,IAE9B;AAAA,EAEO;AAET;"}