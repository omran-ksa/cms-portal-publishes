{"version":3,"file":"clipboard.property-context-CM7UAgst.js","sources":["../../../src/packages/clipboard/property/context/clipboard.property-context.ts"],"sourcesContent":["import { UMB_CLIPBOARD_CONTEXT } from '../../context/index.js';\r\nimport {\r\n\tUMB_CLIPBOARD_ENTRY_PICKER_MODAL,\r\n\ttype UmbClipboardEntryDetailModel,\r\n\ttype UmbClipboardEntryValuesType,\r\n} from '../../clipboard-entry/index.js';\r\nimport type { ManifestClipboardPastePropertyValueTranslator } from '../value-translator/types.js';\r\nimport {\r\n\tUmbClipboardCopyPropertyValueTranslatorValueResolver,\r\n\tUmbClipboardPastePropertyValueTranslatorValueResolver,\r\n} from '../value-translator/index.js';\r\nimport { UMB_CLIPBOARD_PROPERTY_CONTEXT } from './clipboard.property-context-token.js';\r\nimport { UmbContextBase } from '@umbraco-cms/backoffice/class-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { umbOpenModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_PROPERTY_CONTEXT, UmbPropertyValueCloneController } from '@umbraco-cms/backoffice/property';\r\nimport { umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\nimport type { ManifestPropertyEditorUi } from '@umbraco-cms/backoffice/property-editor';\r\nimport type { UmbEntityUnique } from '@umbraco-cms/backoffice/entity';\r\nimport { UMB_NOTIFICATION_CONTEXT } from '@umbraco-cms/backoffice/notification';\r\nimport { UmbLocalizationController } from '@umbraco-cms/backoffice/localization-api';\r\n\r\n/**\r\n * Clipboard context for managing clipboard entries for property values\r\n * @export\r\n * @class UmbClipboardPropertyContext\r\n * @augments {UmbContextBase}\r\n */\r\nexport class UmbClipboardPropertyContext extends UmbContextBase {\r\n\t#init?: Promise<unknown>;\r\n\t#localize = new UmbLocalizationController(this);\r\n\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UMB_CLIPBOARD_PROPERTY_CONTEXT);\r\n\t}\r\n\r\n\t/**\r\n\t * Read a clipboard entry for a property. The entry will be translated to the property editor value\r\n\t * @param {string} unique - The unique id of the clipboard entry\r\n\t * @param {string} propertyEditorUiAlias - The alias of the property editor to match\r\n\t * @returns { Promise<unknown> } - Returns the resolved property value\r\n\t */\r\n\tasync read<ReturnType = unknown>(unique: string, propertyEditorUiAlias: string): Promise<ReturnType | undefined> {\r\n\t\tif (!unique) throw new Error('The Clipboard Entry unique is required');\r\n\t\tif (!propertyEditorUiAlias) throw new Error('Property Editor UI alias is required');\r\n\t\tconst manifest = await this.#findPropertyEditorUiManifest(propertyEditorUiAlias);\r\n\t\treturn this.#resolvePropertyValue<ReturnType>(unique, manifest);\r\n\t}\r\n\r\n\t/**\r\n\t * Read multiple clipboard entries for a property. The entries will be translated to the property editor values\r\n\t * @param {Array<string>} uniques - The unique ids of the clipboard entries\r\n\t * @param {string} propertyEditorUiAlias - The alias of the property editor to match\r\n\t * @returns { Promise<Array<unknown>> } - Returns an array of resolved property values\r\n\t */\r\n\tasync readMultiple<ReturnType = unknown>(\r\n\t\tuniques: Array<string>,\r\n\t\tpropertyEditorUiAlias: string,\r\n\t): Promise<Array<ReturnType>> {\r\n\t\tif (!uniques || !uniques.length) {\r\n\t\t\tthrow new Error('Clipboard entry uniques are required');\r\n\t\t}\r\n\r\n\t\tconst promises = Promise.allSettled(uniques.map((unique) => this.read(unique, propertyEditorUiAlias)));\r\n\r\n\t\tconst readResult = await promises;\r\n\t\t// TODO:show message if some entries are not fulfilled\r\n\t\tconst fulfilledResult = readResult.filter((result) => result.status === 'fulfilled' && result.value) as Array<\r\n\t\t\tPromiseFulfilledResult<ReturnType>\r\n\t\t>;\r\n\t\t// Map the values and remove undefined.\r\n\t\tconst propertyValues = fulfilledResult.map((result) => result.value).filter((x) => x);\r\n\r\n\t\tif (!propertyValues.length) {\r\n\t\t\tthrow new Error('Failed to read clipboard entries');\r\n\t\t}\r\n\r\n\t\treturn propertyValues;\r\n\t}\r\n\r\n\t/**\r\n\t * Write a clipboard entry for a property. The property value will be translated to the clipboard entry values\r\n\t * @param args - Arguments for writing a clipboard entry\r\n\t * @param {string} args.name - The name of the clipboard entry\r\n\t * @param {string} args.icon - The icon of the clipboard entry\r\n\t * @param {any} args.propertyValue - The property value to write\r\n\t * @param {string} args.propertyEditorUiAlias - The alias of the property editor to match\r\n\t * @returns { Promise<void> }\r\n\t */\r\n\tasync write(args: {\r\n\t\tname: string;\r\n\t\ticon?: string;\r\n\t\tpropertyValue: any;\r\n\t\tpropertyEditorUiAlias: string;\r\n\t}): Promise<UmbClipboardEntryDetailModel | undefined> {\r\n\t\tconst clipboardContext = await this.getContext(UMB_CLIPBOARD_CONTEXT);\r\n\t\tif (!clipboardContext) {\r\n\t\t\tthrow new Error('Clipboard context is required');\r\n\t\t}\r\n\r\n\t\tconst copyValueResolver = new UmbClipboardCopyPropertyValueTranslatorValueResolver(this);\r\n\t\tconst values = await copyValueResolver.resolve(args.propertyValue, args.propertyEditorUiAlias);\r\n\r\n\t\tconst entryPreset: Partial<UmbClipboardEntryDetailModel> = {\r\n\t\t\tname: args.name,\r\n\t\t\tvalues,\r\n\t\t\ticon: args.icon,\r\n\t\t};\r\n\r\n\t\tconst notificationContext = await this.getContext(UMB_NOTIFICATION_CONTEXT);\r\n\t\tif (!notificationContext) {\r\n\t\t\tthrow new Error('Notification context is required');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst clipboardEntry = await clipboardContext.write(entryPreset);\r\n\r\n\t\t\tnotificationContext.peek('positive', {\r\n\t\t\t\tdata: { message: this.#localize.term('clipboard_copySuccessHeadline') },\r\n\t\t\t});\r\n\r\n\t\t\treturn clipboardEntry;\r\n\t\t} catch (error) {\r\n\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error);\r\n\t\t\tnotificationContext.peek('danger', { data: { message: errorMessage } });\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Pick a clipboard entry for a property. The entry will be translated to the property editor value\r\n\t * @param args - Arguments for picking a clipboard entry\r\n\t * @param {boolean} args.multiple - Allow multiple clipboard entries to be picked\r\n\t * @param {string} args.propertyEditorUiAlias - The alias of the property editor to match\r\n\t * @param {() => Promise<boolean>} args.filter - A filter function to filter clipboard entries\r\n\t * @returns { Promise<{ selection: Array<UmbEntityUnique>; propertyValues: Array<any> }> }\r\n\t */\r\n\tasync pick(args: {\r\n\t\tmultiple: boolean;\r\n\t\tpropertyEditorUiAlias: string;\r\n\t\tfilter?: (value: any, config: any) => Promise<boolean>;\r\n\t}): Promise<{ selection: Array<UmbEntityUnique>; propertyValues: Array<any> }> {\r\n\t\tawait this.#init;\r\n\r\n\t\tconst pasteTranslatorManifests = this.getPasteTranslatorManifests(args.propertyEditorUiAlias);\r\n\t\tconst propertyEditorUiManifest = await this.#findPropertyEditorUiManifest(args.propertyEditorUiAlias);\r\n\t\tconst config = (await this.getContext(UMB_PROPERTY_CONTEXT))?.getConfig();\r\n\r\n\t\tif (!config) {\r\n\t\t\tthrow new Error('Property context is required');\r\n\t\t}\r\n\r\n\t\tconst valueResolver = new UmbClipboardPastePropertyValueTranslatorValueResolver(this);\r\n\r\n\t\tconst result = await umbOpenModal(this, UMB_CLIPBOARD_ENTRY_PICKER_MODAL, {\r\n\t\t\tdata: {\r\n\t\t\t\tasyncFilter: async (clipboardEntryDetail) => {\r\n\t\t\t\t\tconst hasSupportedPasteTranslator = this.hasSupportedPasteTranslator(\r\n\t\t\t\t\t\tpasteTranslatorManifests,\r\n\t\t\t\t\t\tclipboardEntryDetail.values,\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (!hasSupportedPasteTranslator) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst pasteTranslator = await valueResolver.getPasteTranslator(\r\n\t\t\t\t\t\tclipboardEntryDetail.values,\r\n\t\t\t\t\t\tpropertyEditorUiManifest.alias,\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (pasteTranslator.isCompatibleValue) {\r\n\t\t\t\t\t\tconst propertyValue = await valueResolver.resolve(\r\n\t\t\t\t\t\t\tclipboardEntryDetail.values,\r\n\t\t\t\t\t\t\tpropertyEditorUiManifest.alias,\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\treturn pasteTranslator.isCompatibleValue(propertyValue, config, args.filter);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst selection = result?.selection || [];\r\n\r\n\t\tif (!selection.length) {\r\n\t\t\tthrow new Error('No clipboard entry selected');\r\n\t\t}\r\n\r\n\t\tlet propertyValues: Array<any> = [];\r\n\r\n\t\tif (args.multiple) {\r\n\t\t\tthrow new Error('Multiple clipboard entries not supported');\r\n\t\t} else {\r\n\t\t\tconst selected = selection[0];\r\n\r\n\t\t\tif (!selected) {\r\n\t\t\t\tthrow new Error('No clipboard entry selected');\r\n\t\t\t}\r\n\r\n\t\t\tconst propertyValue = await this.#resolvePropertyValue(selected, propertyEditorUiManifest);\r\n\t\t\tpropertyValues = [propertyValue];\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tselection,\r\n\t\t\tpropertyValues,\r\n\t\t};\r\n\t}\r\n\r\n\tasync #findPropertyEditorUiManifest(alias: string): Promise<ManifestPropertyEditorUi> {\r\n\t\tconst manifest = umbExtensionsRegistry.getByAlias<ManifestPropertyEditorUi>(alias);\r\n\r\n\t\tif (!manifest) {\r\n\t\t\tthrow new Error(`Could not find property editor with alias: ${alias}`);\r\n\t\t}\r\n\r\n\t\tif (manifest.type !== 'propertyEditorUi') {\r\n\t\t\tthrow new Error(`Alias ${alias} is not a property editor ui`);\r\n\t\t}\r\n\r\n\t\treturn manifest;\r\n\t}\r\n\r\n\tasync #resolvePropertyValue<ValueType>(\r\n\t\tclipboardEntryUnique: string,\r\n\t\tpropertyEditorUiManifest: ManifestPropertyEditorUi,\r\n\t): Promise<ValueType | undefined> {\r\n\t\tif (!clipboardEntryUnique) {\r\n\t\t\tthrow new Error('Unique id is required');\r\n\t\t}\r\n\r\n\t\tif (!propertyEditorUiManifest.alias) {\r\n\t\t\tthrow new Error('Property Editor UI alias is required');\r\n\t\t}\r\n\r\n\t\tif (!propertyEditorUiManifest.meta.propertyEditorSchemaAlias) {\r\n\t\t\tthrow new Error('Property Editor UI Schema alias is required');\r\n\t\t}\r\n\r\n\t\tconst clipboardContext = await this.getContext(UMB_CLIPBOARD_CONTEXT);\r\n\t\tif (!clipboardContext) {\r\n\t\t\tthrow new Error('Clipboard context is required');\r\n\t\t}\r\n\t\tconst entry = await clipboardContext.read(clipboardEntryUnique);\r\n\r\n\t\tif (!entry) {\r\n\t\t\tthrow new Error(`Could not find clipboard entry with unique id: ${clipboardEntryUnique}`);\r\n\t\t}\r\n\r\n\t\tconst valueResolver = new UmbClipboardPastePropertyValueTranslatorValueResolver<ValueType>(this);\r\n\t\tconst propertyValue = await valueResolver.resolve(entry.values, propertyEditorUiManifest.alias);\r\n\r\n\t\tconst cloner = new UmbPropertyValueCloneController(this);\r\n\t\tconst clonedValue = await cloner.clone<ValueType>({\r\n\t\t\teditorAlias: propertyEditorUiManifest.meta.propertyEditorSchemaAlias,\r\n\t\t\talias: propertyEditorUiManifest.alias,\r\n\t\t\tvalue: propertyValue,\r\n\t\t});\r\n\r\n\t\treturn clonedValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Get all clipboard paste translators for a property editor ui\r\n\t * @param {string} propertyEditorUiAlias - The alias of the property editor to match\r\n\t * @returns {Array<ManifestClipboardPastePropertyValueTranslator>} - Returns an array of clipboard paste translators\r\n\t */\r\n\tgetPasteTranslatorManifests(propertyEditorUiAlias: string) {\r\n\t\treturn umbExtensionsRegistry.getByTypeAndFilter(\r\n\t\t\t'clipboardPastePropertyValueTranslator',\r\n\t\t\t(manifest) => manifest.toPropertyEditorUi === propertyEditorUiAlias,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the clipboard entry values has supported paste translator\r\n\t * @param {Array<ManifestClipboardPastePropertyValueTranslator>} manifests - The paste translator manifests\r\n\t * @param {UmbClipboardEntryValuesType} clipboardEntryValues - The clipboard entry values\r\n\t * @returns {boolean} - Returns true if the clipboard entry values has supported paste translator\r\n\t */\r\n\thasSupportedPasteTranslator(\r\n\t\tmanifests: Array<ManifestClipboardPastePropertyValueTranslator>,\r\n\t\tclipboardEntryValues: UmbClipboardEntryValuesType,\r\n\t): boolean {\r\n\t\tconst entryValueTypes = clipboardEntryValues.map((x) => x.type);\r\n\r\n\t\tconst supportedManifests = manifests.filter((manifest) => {\r\n\t\t\tconst canTranslateValue = entryValueTypes.includes(manifest.fromClipboardEntryValueType);\r\n\t\t\treturn canTranslateValue;\r\n\t\t});\r\n\r\n\t\treturn supportedManifests.length > 0;\r\n\t}\r\n}\r\n\r\nexport { UmbClipboardPropertyContext as api };\r\n"],"names":["UmbClipboardPropertyContext","UmbContextBase","#init","#localize","UmbLocalizationController","host","UMB_CLIPBOARD_PROPERTY_CONTEXT","unique","propertyEditorUiAlias","manifest","#findPropertyEditorUiManifest","#resolvePropertyValue","uniques","propertyValues","result","x","args","clipboardContext","UMB_CLIPBOARD_CONTEXT","values","UmbClipboardCopyPropertyValueTranslatorValueResolver","entryPreset","notificationContext","UMB_NOTIFICATION_CONTEXT","clipboardEntry","error","errorMessage","pasteTranslatorManifests","propertyEditorUiManifest","config","UMB_PROPERTY_CONTEXT","valueResolver","UmbClipboardPastePropertyValueTranslatorValueResolver","selection","umbOpenModal","UMB_CLIPBOARD_ENTRY_PICKER_MODAL","clipboardEntryDetail","pasteTranslator","propertyValue","selected","alias","umbExtensionsRegistry","clipboardEntryUnique","entry","UmbPropertyValueCloneController","manifests","clipboardEntryValues","entryValueTypes"],"mappings":"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"}