{"version":3,"file":"clipboard-entry-detail.repository-Be0QsLx1.js","sources":["../../../src/packages/clipboard/clipboard-entry/detail/clipboard-entry-detail.local-storage.data-source.ts","../../../src/packages/clipboard/clipboard-entry/detail/clipboard-entry-detail.repository.ts"],"sourcesContent":["import type { UmbClipboardEntryDetailModel } from '../types.js';\r\nimport { UmbClipboardLocalStorageManager } from '../../clipboard-local-storage.manager.js';\r\nimport { UMB_CLIPBOARD_ENTRY_ENTITY_TYPE } from '../entity.js';\r\nimport { UmbId } from '@umbraco-cms/backoffice/id';\r\nimport type {\r\n\tUmbDataSourceErrorResponse,\r\n\tUmbDataSourceResponse,\r\n\tUmbDetailDataSource,\r\n} from '@umbraco-cms/backoffice/repository';\r\nimport { UmbControllerBase } from '@umbraco-cms/backoffice/class-api';\r\nimport { UmbError } from '@umbraco-cms/backoffice/resources';\r\n\r\n/**\r\n * Manage clipboard entries in local storage\r\n * @export\r\n * @class UmbClipboardEntryDetailLocalStorageDataSource\r\n * @implements {UmbDetailDataSource<UmbClipboardEntryDetailModel>}\r\n */\r\nexport class UmbClipboardEntryDetailLocalStorageDataSource\r\n\textends UmbControllerBase\r\n\timplements UmbDetailDataSource<UmbClipboardEntryDetailModel>\r\n{\r\n\t#localStorageManager = new UmbClipboardLocalStorageManager(this);\r\n\r\n\t/**\r\n\t * Scaffold a new clipboard entry\r\n\t * @param {Partial<UmbClipboardEntryDetailModel>} [preset]\r\n\t * @returns {*}\r\n\t * @memberof UmbClipboardEntryDetailLocalStorageDataSource\r\n\t */\r\n\tasync createScaffold(preset: Partial<UmbClipboardEntryDetailModel> = {}) {\r\n\t\tconst data: UmbClipboardEntryDetailModel = {\r\n\t\t\tvalues: [],\r\n\t\t\tentityType: UMB_CLIPBOARD_ENTRY_ENTITY_TYPE,\r\n\t\t\ticon: null,\r\n\t\t\tmeta: {},\r\n\t\t\tname: null,\r\n\t\t\tunique: UmbId.new(),\r\n\t\t\tcreateDate: null,\r\n\t\t\tupdateDate: null,\r\n\t\t\t...preset,\r\n\t\t};\r\n\r\n\t\treturn { data };\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new clipboard entry in local storage\r\n\t * @param {UmbClipboardEntryDetailModel} model\r\n\t * @returns {*}  {Promise<UmbDataSourceResponse<UmbClipboardEntry>>}\r\n\t * @memberof UmbClipboardEntryDetailLocalStorageDataSource\r\n\t */\r\n\tasync create(model: UmbClipboardEntryDetailModel): Promise<UmbDataSourceResponse<UmbClipboardEntryDetailModel>> {\r\n\t\tif (!model) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Clipboard entry is missing'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// check if entry already exists\r\n\t\tconst entry = await this.#localStorageManager.getEntry(model.unique);\r\n\r\n\t\tif (entry) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Clipboard entry already exists'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst now = new Date().toISOString();\r\n\t\tconst newEntry: UmbClipboardEntryDetailModel = structuredClone(model);\r\n\t\tnewEntry.createDate = now;\r\n\t\tnewEntry.updateDate = now;\r\n\r\n\t\tconst entriesResult = await this.#localStorageManager.getEntries();\r\n\t\tconst updatedEntries = [...entriesResult.entries, newEntry];\r\n\r\n\t\tawait this.#localStorageManager.setEntries(updatedEntries);\r\n\r\n\t\treturn { data: newEntry };\r\n\t}\r\n\r\n\t/**\r\n\t * Read a clipboard entry from local storage\r\n\t * @param {string} unique\r\n\t * @returns {*}  {Promise<UmbDataSourceResponse<UmbClipboardEntry>>}\r\n\t * @memberof UmbClipboardEntryDetailLocalStorageDataSource\r\n\t */\r\n\tasync read(unique: string): Promise<UmbDataSourceResponse<UmbClipboardEntryDetailModel>> {\r\n\t\tif (!unique) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Unique is missing'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// check if entry exists\r\n\t\tconst entry = await this.#localStorageManager.getEntry(unique);\r\n\r\n\t\tif (!entry) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Entry not found'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn { data: entry };\r\n\t}\r\n\r\n\t/**\r\n\t * Update a clipboard entry in local storage\r\n\t * @param {UmbClipboardEntryDetailModel} model\r\n\t * @returns {*}  {Promise<UmbDataSourceResponse<UmbClipboardEntry>>}\r\n\t * @memberof UmbClipboardEntryDetailLocalStorageDataSource\r\n\t */\r\n\tasync update(model: UmbClipboardEntryDetailModel): Promise<UmbDataSourceResponse<UmbClipboardEntryDetailModel>> {\r\n\t\tif (!model) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Clipboard entry is missing'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// check if entry exists so it can be updated\r\n\t\tconst entry = await this.#localStorageManager.getEntry(model.unique);\r\n\t\tif (!entry) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Entry not found'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst entriesResult = await this.#localStorageManager.getEntries();\r\n\r\n\t\tconst updatedEntries = entriesResult.entries.map((storedEntry) => {\r\n\t\t\tif (storedEntry.unique === model.unique) {\r\n\t\t\t\tconst updatedEntry: UmbClipboardEntryDetailModel = structuredClone(model);\r\n\t\t\t\tupdatedEntry.updateDate = new Date().toISOString();\r\n\t\t\t\treturn updatedEntry;\r\n\t\t\t}\r\n\r\n\t\t\treturn storedEntry;\r\n\t\t});\r\n\r\n\t\tawait this.#localStorageManager.setEntries(updatedEntries);\r\n\r\n\t\tconst updatedEntry = updatedEntries.find((x) => x.unique === model.unique);\r\n\r\n\t\treturn { data: updatedEntry };\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a clipboard entry from local storage\r\n\t * @param {string} unique\r\n\t * @returns {*}  {Promise<UmbDataSourceErrorResponse>}\r\n\t * @memberof UmbClipboardEntryDetailLocalStorageDataSource\r\n\t */\r\n\tasync delete(unique: string): Promise<UmbDataSourceErrorResponse> {\r\n\t\tif (!unique) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Unique is missing'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// check if entry exist so it can be deleted\r\n\t\tconst entry = await this.#localStorageManager.getEntry(unique);\r\n\r\n\t\tif (!entry) {\r\n\t\t\treturn {\r\n\t\t\t\terror: new UmbError('Entry not found'),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst entriesResult = await this.#localStorageManager.getEntries();\r\n\t\tconst updatedEntriesArray = entriesResult.entries.filter((x) => x.unique !== unique);\r\n\r\n\t\tawait this.#localStorageManager.setEntries(updatedEntriesArray);\r\n\t\treturn {};\r\n\t}\r\n}\r\n","import type { UmbClipboardEntryDetailModel } from '../types.js';\r\nimport { UmbClipboardEntryDetailLocalStorageDataSource } from './clipboard-entry-detail.local-storage.data-source.js';\r\nimport { UMB_CLIPBOARD_ENTRY_DETAIL_STORE_CONTEXT } from './clipboard-entry-detail.store.context-token.js';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbDetailRepositoryBase } from '@umbraco-cms/backoffice/repository';\r\n\r\nexport class UmbClipboardEntryDetailRepository extends UmbDetailRepositoryBase<UmbClipboardEntryDetailModel> {\r\n\tconstructor(host: UmbControllerHost) {\r\n\t\tsuper(host, UmbClipboardEntryDetailLocalStorageDataSource, UMB_CLIPBOARD_ENTRY_DETAIL_STORE_CONTEXT);\r\n\t}\r\n\r\n\toverride async create(model: UmbClipboardEntryDetailModel) {\r\n\t\treturn super.create(model, null);\r\n\t}\r\n}\r\n\r\nexport default UmbClipboardEntryDetailRepository;\r\n"],"names":["UmbClipboardEntryDetailLocalStorageDataSource","UmbControllerBase","#localStorageManager","UmbClipboardLocalStorageManager","preset","UMB_CLIPBOARD_ENTRY_ENTITY_TYPE","UmbId","model","UmbError","now","newEntry","updatedEntries","unique","entry","storedEntry","updatedEntry","x","updatedEntriesArray","UmbClipboardEntryDetailRepository","UmbDetailRepositoryBase","host","UMB_CLIPBOARD_ENTRY_DETAIL_STORE_CONTEXT"],"mappings":"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"}