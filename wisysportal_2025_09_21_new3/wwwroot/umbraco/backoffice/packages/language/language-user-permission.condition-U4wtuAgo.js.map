{"version":3,"file":"language-user-permission.condition-U4wtuAgo.js","sources":["../../../src/packages/language/conditions/language-user-permission/language-user-permission.condition.ts"],"sourcesContent":["import type { UmbLanguageUserPermissionConditionConfig } from './types.js';\r\nimport { UMB_CURRENT_USER_CONTEXT, type UmbCurrentUserModel } from '@umbraco-cms/backoffice/current-user';\r\nimport type { UmbConditionControllerArguments, UmbExtensionCondition } from '@umbraco-cms/backoffice/extension-api';\r\nimport type { UmbControllerHost } from '@umbraco-cms/backoffice/controller-api';\r\nimport { UmbConditionBase } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class UmbLanguageUserPermissionCondition\r\n\textends UmbConditionBase<UmbLanguageUserPermissionConditionConfig>\r\n\timplements UmbExtensionCondition\r\n{\r\n\tconstructor(\r\n\t\thost: UmbControllerHost,\r\n\t\targs: UmbConditionControllerArguments<UmbLanguageUserPermissionConditionConfig>,\r\n\t) {\r\n\t\tsuper(host, args);\r\n\r\n\t\tthis.consumeContext(UMB_CURRENT_USER_CONTEXT, (context) => {\r\n\t\t\tthis.observe(\r\n\t\t\t\tcontext?.currentUser,\r\n\t\t\t\t(currentUser) => {\r\n\t\t\t\t\tthis.#check(currentUser);\r\n\t\t\t\t},\r\n\t\t\t\t'umbLanguageUserPermissionConditionObserver',\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t#check(currentUser?: UmbCurrentUserModel) {\r\n\t\tif (currentUser?.hasAccessToAllLanguages) {\r\n\t\t\tthis.permitted = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst cultures = currentUser?.languages ?? [];\r\n\t\t/* we default to true se we don't require both allOf and oneOf to be defined\r\n\t\t but they can be combined for more complex scenarios */\r\n\t\tlet allOfPermitted = true;\r\n\t\tlet oneOfPermitted = true;\r\n\r\n\t\t// check if all of the verbs are present\r\n\t\tif (this.config.allOf?.length) {\r\n\t\t\tallOfPermitted = this.config.allOf.every((verb) => cultures.includes(verb));\r\n\t\t}\r\n\r\n\t\t// check if at least one of the verbs is present\r\n\t\tif (this.config.oneOf?.length) {\r\n\t\t\toneOfPermitted = this.config.oneOf.some((verb) => cultures.includes(verb));\r\n\t\t}\r\n\r\n\t\tthis.permitted = allOfPermitted && oneOfPermitted;\r\n\t}\r\n}\r\n\r\nexport { UmbLanguageUserPermissionCondition as api };\r\n"],"names":["UmbLanguageUserPermissionCondition","UmbConditionBase","host","args","UMB_CURRENT_USER_CONTEXT","context","currentUser","#check","cultures","allOfPermitted","oneOfPermitted","verb"],"mappings":";;AAMO,MAAMA,UACJC,EAET;AAAA,EACC,YACCC,GACAC,GACC;AACD,UAAMD,GAAMC,CAAI,GAEX,KAAA,eAAeC,GAA0B,CAACC,MAAY;AACrD,WAAA;AAAA,QACJA,GAAS;AAAA,QACT,CAACC,MAAgB;AAChB,eAAKC,GAAOD,CAAW;AAAA,QACxB;AAAA,QACA;AAAA,MACD;AAAA,IAAA,CACA;AAAA,EAAA;AAAA,EAGFC,GAAOD,GAAmC;AACzC,QAAIA,GAAa,yBAAyB;AACzC,WAAK,YAAY;AACjB;AAAA,IAAA;AAEK,UAAAE,IAAWF,GAAa,aAAa,CAAC;AAG5C,QAAIG,IAAiB,IACjBC,IAAiB;AAGjB,IAAA,KAAK,OAAO,OAAO,WACLD,IAAA,KAAK,OAAO,MAAM,MAAM,CAACE,MAASH,EAAS,SAASG,CAAI,CAAC,IAIvE,KAAK,OAAO,OAAO,WACLD,IAAA,KAAK,OAAO,MAAM,KAAK,CAACC,MAASH,EAAS,SAASG,CAAI,CAAC,IAG1E,KAAK,YAAYF,KAAkBC;AAAA,EAAA;AAErC;"}