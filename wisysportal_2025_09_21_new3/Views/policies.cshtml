@using System.Globalization
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Models
@using Umbraco.Models
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<PoliciesModel>

@{
    Layout = "layout.cshtml";

    var routeCulture = ViewContext?.RouteData?.Values?["culture"]?.ToString();
    if (string.IsNullOrWhiteSpace(routeCulture))
    {
        var firstSeg = (Context.Request.Path.Value ?? "/").Trim('/').Split('/', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
        if (firstSeg is "ar" or "en") routeCulture = firstSeg;
    }
    var currentLang = !string.IsNullOrWhiteSpace(routeCulture) ? (routeCulture.StartsWith("ar", StringComparison.OrdinalIgnoreCase) ? "ar" : "en") : "ar";
    ViewData["CurrentLang"] = currentLang;
    var isAr = currentLang == "ar";
    var dir  = isAr ? "rtl" : "ltr";

    // data
    var title  = Model.Title ?? (isAr ? "سياسات وإجراءات" : "Policies & Procedures");
    var blocks = Model.PoliciesList ?? BlockListModel.Empty;

    var items = blocks
        .Select(b => b.Content as PolicieCard)
        .Where(x => x is not null && !x.Hide)
        .ToList();

    var categories = items
        .Select(x => x!.Category ?? "")
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(x => x, StringComparer.OrdinalIgnoreCase)
        .ToList();

    // dictionary helpers
    string D(string key, string fallback)
    {
        var v = Umbraco.GetDictionaryValue(key);
        return string.IsNullOrWhiteSpace(v) || v == key ? fallback : v;
    }
    string NormKey(string? c) => (c ?? "").Trim().ToLowerInvariant() switch
    {
        "policy" or "policies" or "سياسة" or "سياسات"        => "Policy",
        "procedure" or "procedures" or "إجراء" or "إجراءات"  => "Procedure",
        _                                                     => "All"
    };
    string CatLabel(string? c) => D($"Policies.Category.{NormKey(c)}", c ?? "");

    // localized UI text
    var tAll      = D("Common.All", isAr ? "الكل" : "All");
    var tFilter   = D("Common.Filter", isAr ? "فلتر" : "Filter");
    var tView     = D("Common.View", isAr ? "عرض" : "View");
    var tDownload = D("Common.Download", isAr ? "تحميل" : "Download");
    var tClose    = D("Common.Close", isAr ? "إغلاق" : "Close");
}

<section class="c-policies pb-4 pb-md-5 overflow-x-hidden" dir="@dir">
  <div class="container-fluid px-sm-4" style="min-height:68vh">

    <!-- Title + Filter -->
    <div class="d-flex align-items-center justify-content-between mb-4">
        <h2 class="h4 fw-bold mb-0 @(isAr ? "text-end" : "text-start")">@title</h2>


      @if (categories.Any())
      {
        <div class="input-group w-auto">
        @* <span class="input-group-text bg-transparent border-0 fw-medium ">@tFilter</span>*@

          <button class="btn btn-light border rounded-pill px-3 d-inline-flex align-items-center gap-2 dropdown-toggle  text-center justify-content-center"
                  type="button" data-bs-toggle="dropdown" aria-expanded="false" id="catBtn">
            <i class="bi bi-chevron-down"></i>
            <span id="catBtnTxt" class=" text-center ">@tAll</span>
          </button>

          <ul class="dropdown-menu dropdown-menu-end text-center " id="catMenu" aria-labelledby="catBtn" >
            <li><a class="dropdown-item active" href="#" data-cat="*" data-no-swup>@tAll</a></li>
            @foreach (var c in categories)
            {
              <li><a class="dropdown-item text-center" href="#" data-cat="@c"  data-no-swup>@(Umbraco.GetDictionaryValue(@c))</a></li>
            }
          </ul>
        </div>
      }
    </div>

    <!-- Grid -->
    @if (!items.Any())
    {
      <div class="alert alert-info text-center mb-0">@D("Policies.Empty", isAr ? "لا توجد عناصر للعرض." : "There are no items to display.")</div>
    }
    else
    {
            <div class="row g-5" id="policiesGrid">
        @foreach (var it in items)
        {
            var label = it!.Label ?? "";
            var cat   = it.Category ?? "";
            var url   = it.Link?.Url ?? "";

            <div class="col-12 col-md-6 col-xl-4" data-cat="@cat" data-title="@label">
              <div class="card shadow-sm border-0 rounded-4 h-100">
                <div class="card-body d-flex flex-column p-4">
                  <div class="d-flex align-items-start justify-content-between mb-4">
                    <h3 class="h5 fw-semibold mb-0 text-truncate">@label</h3>
                    @if (!string.IsNullOrWhiteSpace(cat))
                    {
                      <span class="badge bg-body-tertiary border text-secondary-emphasis rounded-pill">@(Umbraco.GetDictionaryValue(@cat))</span>
                    }
                  </div>

                  <div class="mt-auto d-flex align-items-center gap-2">

                                    @if (!string.IsNullOrWhiteSpace(url))
                                    {
                                        var fileExtension = url.Substring(url.LastIndexOf('.')).ToLowerInvariant();
                                        bool isPdf = fileExtension == ".pdf";
                                        bool isImage = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp", ".svg" }.Contains(fileExtension);
                                        bool isViewable = isPdf || isImage;

                                        @if (isPdf)
                                        {
                                            <button type="button"
                                                    class="btn btn-outline-primary rounded-pill px-4"
                                                    onclick="window.open('@url', '_blank')">
                                                <i class="bi bi-eye me-2"></i>@tView
                                            </button>
                                        }
                                        else if (isImage)
                                        {
                                            <button type="button"
                                                    class="btn btn-outline-primary rounded-pill px-4"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#policyModal"
                                                    data-policy-img="@url"
                                                    data-policy-title="@label">
                                                <i class="bi bi-eye me-2"></i>@tView
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button"
                                                    class="btn btn-secondary rounded-pill px-4"
                                                    disabled>
                                                <i class="bi bi-eye me-2"></i>@tView
                                            </button>
                                        }

                                        <a class="btn btn-primary rounded-pill px-4"
                                           href="@url"
                                           download data-no-swup>
                                            <i class="bi bi-download me-2"></i>@tDownload
                                        </a>
                                    }
                    else
                    {
                      <button class="btn btn-outline-secondary rounded-pill px-4" disabled>@tView</button>
                      <button class="btn btn-secondary rounded-pill px-4" disabled>@tDownload</button>
                    }
                  </div>
                </div>
              </div>
            </div>
        }
      </div>
    }
  </div>
</section>

<!-- Modal (image preview) -->
<div class="modal fade" id="policyModal" tabindex="-1" aria-hidden="true" dir="@dir" style="z-index:10052">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content rounded-4">
      <div class="modal-header" style="justify-content:space-between">
        <h5 class="modal-title" id="policyModalLabel"></h5>
        <button type="button" class="btn-close mx-1" data-bs-dismiss="modal" aria-label="@tClose"></button>
      </div>
      <div class="modal-body">
        <img id="policyModalImg" class="img-fluid rounded" alt="">
      </div>
      <div class="modal-footer">
        <a id="policyDownloadBtn" class="btn btn-primary rounded-pill px-4" download data-no-swup>
          <i class="bi bi-download me-2" ></i>@tDownload
        </a>
        <button type="button" class="btn btn-outline-secondary rounded-pill px-4" data-bs-dismiss="modal">@tClose</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script>
// dropdown category filter
(() => {
  const grid = document.getElementById('policiesGrid');
  const menu = document.getElementById('catMenu');
  const btnTxt = document.getElementById('catBtnTxt');
  if (!grid || !menu || !btnTxt) return;

  menu.addEventListener('click', e => {
    const a = e.target.closest('[data-cat]');
    if (!a) return;
    e.preventDefault();

    menu.querySelectorAll('.dropdown-item').forEach(x => x.classList.remove('active'));
    a.classList.add('active');

    const chosen = a.getAttribute('data-cat') || '*';
    btnTxt.textContent = a.textContent.trim();

    [...grid.children].forEach(col => {
      const cat = col.getAttribute('data-cat') || '';
      col.style.display = (chosen === '*' || cat === chosen) ? '' : 'none';
    });
  });
})();

// modal populate + download link
document.getElementById('policyModal')?.addEventListener('show.bs.modal', ev => {
  const t = ev.relatedTarget;
  const src = t?.getAttribute('data-policy-img') || '';
  const title = t?.getAttribute('data-policy-title') || '';
  const img = document.getElementById('policyModalImg');
  const label = document.getElementById('policyModalLabel');
  const down = document.getElementById('policyDownloadBtn');
  if (img) { img.src = src; img.alt = title; }
  if (label) label.textContent = title;
  if (down) {
    down.href = src;
    try {
      const file = src.split('?')[0].split('/').pop() || 'download';
      down.setAttribute('download', file);
    } catch {}
  }
});
</script>
}
